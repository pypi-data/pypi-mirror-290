before_script:
  - git lfs pull

stages:
    - test
    - deploy

# install sicor in new (fresh) conda environment
test_sicor_install:
  stage: test
  script:
    - source /opt/conda/bin/activate ci_env

    # create sicor environment from environment_sicor.yml
    - mamba env create --name sicor_test -f tests/CI_docker/context/environment_sicor.yml
    - conda activate sicor_test

    # install sicor
    - pip install -e .
    - cd ..
    - pwd
    - ls

    # test if its importable
    - python -c "import sicor; print(sicor)"
    - python -c "from sicor.sicor_enmap import sicor_ac_enmap"
    - python -c "from sicor.sicor_ac import ac"

# sicor enmap tests
test_sicor_enmap:
  stage: test
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  script:
    - source /opt/conda/bin/activate ci_env
    - mamba install "enpt>=0.20.0" numpy-indexed  # TODO remove as soon as docker runner is rebuilt

    # run tests
    - make pytest_enmap  # enmap tests are called here

    # create the docs
    - make docs

  artifacts:
    expose_as: 'Test and coverage report'
    paths:
    - htmlcov/
    - report.html
    - docs/_build/html/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

    expire_in: 30 days
    when: always

# sicor sentinel-2 tests
test_sicor_s2:
  stage: test
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'
  only:  # for first pipeline of new branch, changes are evaluated as true for all files and everything will be built
      changes:
          - sicor/AC/RtFo.py
          - sicor/Tools/cB/*
          - sicor/ECMWF/*
          - sicor/sicor_ac.py
          - tests/test_sicor_s2.py
  script:
    - source /opt/conda/bin/activate ci_env
    - mamba install "enpt>=0.20.0"  # TODO remove as soon as docker runner is rebuilt

    # run tests
    - make pytest_s2  # sentinel-2 tests are called here

    # create the docs
    - make docs

  artifacts:
    expose_as: 'Test and coverage report'
    paths:
    - htmlcov/
    - report.html
    - docs/_build/html/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

    expire_in: 30 days
    when: always


test_styles:
  stage: test
  script:
    - source /opt/conda/bin/activate ci_env
    - make lint
  artifacts:
    paths:
    - tests/linting/flake8.log
    - tests/linting/pycodestyle.log
    - tests/linting/pydocstyle.log
    when: always


test_urls:
  stage: test
  script:
    - source /opt/conda/bin/activate ci_env
    - make urlcheck
  when: always


pages:  # this job must be called 'pages' to advise GitLab to upload content to GitLab Pages
  stage: deploy
  dependencies:
    - test_sicor_enmap
  script:
    # Create the public directory
    - rm -rf public
    - mkdir public
    - mkdir -p public/doc
    - mkdir -p public/images/
    - mkdir -p public/coverage
    - mkdir -p public/test_reports

    # Copy over the docs
    - cp -r docs/_build/html/* public/doc/
    - cp -r docs/images/* public/images/

    # Copy over the coverage reports
    - cp -r htmlcov/* public/coverage/

    # Copy over the test reports
    - cp report.html public/test_reports/

    # Check if everything is working great
    - ls -al public
    - ls -al public/doc
    - ls -al public/coverage
    - ls -al public/test_reports
  artifacts:
    paths:
      - public
    expire_in: 10 days

deploy_pypi:
    stage: deploy
    dependencies:
        - test_sicor_enmap
    script:
    - source /opt/conda/bin/activate ci_env
    - pip install -U twine build
    - python -m build --sdist
    - twine check dist/*
    - twine upload dist/*  # requires creds as environment variables
    only:
        - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
    except:
        - dev

send-snapshot:
  stage: deploy
  dependencies:
      - test_sicor_enmap
  script:
      - source /opt/conda/bin/activate ci_env
      - if [[ ! $CI_COMMIT_TAG =~ ^v?[0-9]+\.[0-9]+ ]]; then exit 0; fi
      - pip install -U gitlab2zenodo
      - git archive --format zip --output sicor-${CI_COMMIT_TAG}.zip ${CI_COMMIT_TAG}
      - g2z-send -m .zenodo.json sicor-${CI_COMMIT_TAG}.zip -p
  only:
      - /^v\d+\.\d+\.\d+([abc]\d*)?$/
  except:
      - dev

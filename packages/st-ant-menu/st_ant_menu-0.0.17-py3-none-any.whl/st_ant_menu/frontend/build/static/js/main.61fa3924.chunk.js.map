{"version":3,"sources":["AntMenu.tsx","index.tsx"],"names":["Icons","parseMenuItems","data","iconSize","iconMinWidth","map","item","menuItem","key","label","icon","undefined","children","type","disabled","startsWith","React","createElement","style","minWidth","display","alignItems","className","concat","fontSize","Icon","error","console","warn","match","dangerouslySetInnerHTML","__html","Object","keys","AllIcons","forEach","withStreamlitConnection","props","_props$args","args","menu_data","defaultSelectedKeys","defaultOpenKeys","additionalHeight","close_auto","multiple","css_styling","theme","menu_click","modus","generall_css_styling","inlineIndent","custom_font_awesome_url","_useState","useState","_useState2","_slicedToArray","openKeys","setOpenKeys","_useState3","_useState4","selectedKeys","setSelectedKeys","rootSubmenuKeys","useEffect","menuElement","document","querySelector","resizeObserver","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","height","value","target","clientHeight","Streamlit","setFrameHeight","err","e","f","observe","unobserve","setComponentValue","Fragment","Helmet","src","crossOrigin","id","Menu","mode","onOpenChange","latestOpenKey","find","indexOf","_objectSpread","width","borderRight","overflow","borderRadius","items","onClick","_ref","includes","filter","k","_toConsumableArray","ReactDOM","render","StrictMode","MenuComponent","getElementById"],"mappings":"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","file":"static/js/main.61fa3924.chunk.js","sourcesContent":["import { Menu } from \"antd\";\r\nimport { MenuProps } from \"antd/lib/menu\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport * as AllIcons from \"@ant-design/icons\";\r\nimport { ComponentType } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\n// Create a mapping of all available Ant Design icons\r\nconst Icons: Record<string, ComponentType<any>> = {};\r\nObject.keys(AllIcons).forEach((key) => {\r\n  Icons[key as keyof typeof AllIcons] = AllIcons[key as keyof typeof AllIcons] as ComponentType<any>;\r\n});\r\n\r\n\r\ninterface MenuItem {\r\n  key: string;\r\n  label: string | null;\r\n  icon?: React.ReactNode;\r\n  children?: MenuItem[];\r\n  type?: \"group\" | \"divider\" | \"text\" | null;  // added \"text\" type\r\n  disabled?: boolean;\r\n}\r\n\r\n\r\nfunction parseMenuItems(data: any[], iconSize: string, iconMinWidth: string): MenuItem[] {\r\n  return data.map((item: any) => {\r\n    const menuItem: MenuItem = {\r\n      key: item.key,\r\n      label: item.label === null ? null : \"\",\r\n      icon: undefined,\r\n      children: item.children ? parseMenuItems(item.children, iconSize, iconMinWidth) : undefined,\r\n      type: item.type || undefined,\r\n      disabled: item.disabled ? true : false,\r\n    };\r\n\r\n    if (item.icon) {\r\n      try {\r\n        if (item.icon.startsWith('fa-')) {\r\n          // If the icon is a FontAwesome icon, create an <i> tag\r\n          menuItem.icon = (\r\n            <div style={{ minWidth: iconMinWidth, display: 'flex', alignItems: 'center' }}>\r\n              <i className={`fa ${item.icon}`} style={{ fontSize: iconSize }} />\r\n            </div>\r\n          );\r\n        } else {\r\n          const Icon = Icons[item.icon];\r\n          if (Icon) {\r\n            menuItem.icon = (\r\n              <div style={{ minWidth: iconMinWidth, display: 'flex', alignItems: 'center' }}>\r\n                {React.createElement(Icon, {\r\n                  style: { fontSize: iconSize }\r\n                })}\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to create icon for \"${item.icon}\":`, error);\r\n      }\r\n    }\r\n\r\n    if (item.label && item.label !== null) {\r\n      if (item.label.match(/<(.*?)>/)) {\r\n        menuItem.label = (\r\n          <span\r\n            dangerouslySetInnerHTML={{ __html: item.label }}\r\n          ></span>\r\n        ) as unknown as string;\r\n      } else {\r\n        menuItem.label = item.label as string;\r\n      }\r\n    }\r\n\r\n    return menuItem;\r\n  });\r\n}\r\n\r\n\r\n\r\n/**\r\n * A React component that renders an Ant Design menu based on the provided menu data.\r\n */\r\nconst MenuComponent = (props: ComponentProps) => {\r\n  const { menu_data, key, defaultSelectedKeys, defaultOpenKeys, additionalHeight, close_auto, multiple, css_styling, theme,menu_click, iconSize,modus,generall_css_styling, inlineIndent, custom_font_awesome_url,\r\n    iconMinWidth} = props.args;\r\n  const [openKeys, setOpenKeys] = useState<string[]>([]);\r\n  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\r\n  const rootSubmenuKeys = menu_data.map((item: any) => item.key);\r\n\r\n  useEffect(() => {\r\n    // Select the menu element\r\n    const menuElement = document.querySelector('.ant-menu');\r\n  \r\n    // If the menu exists, observe changes in its size\r\n    if (menuElement) {\r\n      const resizeObserver = new ResizeObserver(entries => {\r\n        for (let entry of entries) {\r\n          // Set the height when the size of the menu changes\r\n          const height = entry.target.clientHeight;\r\n          Streamlit.setFrameHeight(height + additionalHeight);\r\n        }\r\n      });\r\n  \r\n      // Start observing\r\n      resizeObserver.observe(menuElement);\r\n  \r\n      // Cleanup\r\n      return () => {\r\n        resizeObserver.unobserve(menuElement);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const onOpenChange: MenuProps['onOpenChange'] = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\r\n      setOpenKeys(keys);\r\n    \r\n    } else {\r\n      if (menu_click == true) {\r\n        Streamlit.setComponentValue(keys);\r\n      }\r\n\r\n      if (close_auto == true) {\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n      \r\n    } else {\r\n      setOpenKeys(keys);  // Keep all keys\r\n    }\r\n\r\n  };\r\n  };\r\n\r\n\r\n  const onClick = ({ key }: { key: string }) => {\r\n    if (multiple) {\r\n      if (selectedKeys.includes(key)) {\r\n        setSelectedKeys(selectedKeys.filter(k => k !== key));\r\n      } else {\r\n        setSelectedKeys([...selectedKeys, key]);\r\n      }\r\n    } else {\r\n      setSelectedKeys([key]);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(selectedKeys);\r\n  }, [selectedKeys]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script\r\n          src={custom_font_awesome_url}\r\n          crossOrigin=\"anonymous\"\r\n          id=\"font-awesome-icons\"\r\n        />\r\n      </Helmet>\r\n     \r\n        <style dangerouslySetInnerHTML={{ __html: generall_css_styling }} />\r\n      <Menu\r\n        id={key}\r\n        mode={modus}\r\n        openKeys={openKeys}\r\n        onOpenChange={onOpenChange}\r\n        inlineIndent={inlineIndent}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          borderRight: 0,\r\n          overflow: \"auto\",\r\n          borderRadius: \"10px\",\r\n          ...css_styling\r\n        }}\r\n        theme={theme}\r\n        items={parseMenuItems(menu_data, iconSize, iconMinWidth)}\r\n        multiple={multiple}\r\n        defaultSelectedKeys={defaultSelectedKeys}\r\n        defaultOpenKeys={defaultOpenKeys}\r\n        onClick={onClick}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default withStreamlitConnection(MenuComponent);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MenuComponent from \"./AntMenu\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MenuComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}
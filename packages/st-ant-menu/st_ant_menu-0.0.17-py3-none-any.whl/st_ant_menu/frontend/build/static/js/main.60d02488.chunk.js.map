{"version":3,"sources":["AntMenu.tsx","index.tsx"],"names":["Icons","parseMenuItems","data","iconSize","map","item","menuItem","key","label","icon","undefined","children","type","disabled","Icon","React","createElement","style","fontSize","error","console","warn","concat","match","dangerouslySetInnerHTML","__html","get_height_menu","menu_array","Array","from","document","getElementsByClassName","menu_height","forEach","element","height","offsetHeight","Object","keys","AllIcons","withStreamlitConnection","props","_props$args","args","menu_data","defaultSelectedKeys","defaultOpenKeys","additionalHeight","multiple","css_styling","theme","menu_click","modus","generall_css_styling","_useState","useState","_useState2","_slicedToArray","openKeys","setOpenKeys","_useState3","_useState4","selectedKeys","setSelectedKeys","rootSubmenuKeys","useEffect","Streamlit","setFrameHeight","parseInt","setComponentValue","Fragment","Menu","id","mode","onOpenChange","latestOpenKey","find","indexOf","setTimeout","_objectSpread","width","borderRight","overflow","borderRadius","items","onClick","_ref","includes","filter","k","_toConsumableArray","ReactDOM","render","StrictMode","MenuComponent","getElementById"],"mappings":"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","file":"static/js/main.60d02488.chunk.js","sourcesContent":["import { Menu } from \"antd\";\r\nimport { MenuProps } from \"antd/lib/menu\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComponentProps,\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\";\r\nimport * as AllIcons from \"@ant-design/icons\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\n// Create a mapping of all available Ant Design icons\r\nconst Icons: Record<string, ComponentType<any>> = {};\r\nObject.keys(AllIcons).forEach((key) => {\r\n  Icons[key as keyof typeof AllIcons] = AllIcons[key as keyof typeof AllIcons] as ComponentType<any>;\r\n});\r\n\r\n\r\ninterface MenuItem {\r\n  key: string;\r\n  label: string | null;\r\n  icon?: React.ReactNode;\r\n  children?: MenuItem[];\r\n  type?: \"group\" | \"divider\" | null;\r\n  disabled?: boolean;\r\n}\r\n\r\n// // /**\r\n//  * Recursively parse a hierarchical list of menu items into the expected format.\r\n//  * @param data The raw menu data to be parsed\r\n//  * @returns An array of MenuItem objects\r\n//  */\r\nfunction parseMenuItems(data: any[], iconSize: string): MenuItem[] {\r\n  return data.map((item: any) => {\r\n    const menuItem: MenuItem = {\r\n      key: item.key,\r\n      label: item.label === null ? null : \"\",\r\n      icon: undefined,\r\n      children: item.children ? parseMenuItems(item.children, iconSize) : undefined,\r\n      type: item.type || undefined,\r\n      disabled: item.disabled ? true : false,\r\n    };\r\n    if (item.icon) {\r\n      try {\r\n        const Icon = Icons[item.icon];\r\n        if (Icon) {\r\n          menuItem.icon = React.createElement(Icon, {\r\n            style: { fontSize: iconSize }\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Failed to create icon for \"${item.icon}\":`, error);\r\n      }\r\n    }\r\n    if (item.label && item.label !== null) {\r\n      if (item.label.match(/<(.*?)>/)) {\r\n        menuItem.label = (\r\n          <span\r\n            dangerouslySetInnerHTML={{ __html: item.label }}\r\n          ></span>\r\n        ) as unknown as string;\r\n      } else {\r\n        menuItem.label = item.label as string;\r\n      }\r\n    }\r\n    return menuItem;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the height of the menu component, taking into account any additional height specified by the user.\r\n * @returns The total height of the menu, in pixels\r\n */\r\nfunction get_height_menu() {\r\n  var menu_array = Array.from(document.getElementsByClassName(\"ant-menu\"));\r\n  var menu_height = 0;\r\n  menu_array.forEach((element) => {\r\n    var height = (element as HTMLElement).offsetHeight;\r\n\r\n    //if height is an integer return it\r\n    if (height) {\r\n      //test integer\r\n      if (height % 1 === 0) {\r\n        menu_height = height;\r\n      }\r\n    }\r\n  });\r\n\r\n  menu_height = menu_height + 150;\r\n\r\n  return menu_height;\r\n}\r\n\r\n/**\r\n * A React component that renders an Ant Design menu based on the provided menu data.\r\n */\r\nconst MenuComponent = (props: ComponentProps) => {\r\n  const { menu_data, key, defaultSelectedKeys, defaultOpenKeys, additionalHeight, multiple, css_styling, theme,menu_click, iconSize,modus,generall_css_styling} = props.args;\r\n  const [openKeys, setOpenKeys] = useState<string[]>([]);\r\n  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\r\n  const rootSubmenuKeys = menu_data.map((item: any) => item.key);\r\n\r\n // Set the height of the Streamlit iframe to match the height of the menu\r\n useEffect(() => {\r\n  const height = get_height_menu() + additionalHeight;\r\n  Streamlit.setFrameHeight(parseInt(`${height}`, 10));\r\n}, []);\r\n\r\n  const onOpenChange: MenuProps['onOpenChange'] = (keys) => {\r\n    const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\r\n    if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\r\n      setOpenKeys(keys);\r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 300);\r\n    } else {\r\n      if (menu_click == true) {\r\n      Streamlit.setComponentValue(keys);\r\n      }\r\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\r\n  \r\n      setTimeout(() => {\r\n        var height = get_height_menu()\r\n        Streamlit.setFrameHeight(height + additionalHeight);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const onClick = ({ key }: { key: string }) => {\r\n    if (multiple) {\r\n      if (selectedKeys.includes(key)) {\r\n        setSelectedKeys(selectedKeys.filter(k => k !== key));\r\n      } else {\r\n        setSelectedKeys([...selectedKeys, key]);\r\n      }\r\n    } else {\r\n      setSelectedKeys([key]);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(selectedKeys);\r\n  }, [selectedKeys]);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <style dangerouslySetInnerHTML={{ __html: generall_css_styling }} />\r\n      <Menu\r\n        id={key}\r\n        mode={modus}\r\n        openKeys={openKeys}\r\n        onOpenChange={onOpenChange}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          borderRight: 0,\r\n          overflow: \"auto\",\r\n          borderRadius: \"20px\",\r\n          ...css_styling\r\n        }}\r\n        theme={theme}\r\n        items={parseMenuItems(menu_data, iconSize)}\r\n        multiple={multiple}\r\n        defaultSelectedKeys={[defaultSelectedKeys]}\r\n        defaultOpenKeys={[defaultOpenKeys]}\r\n        onClick={onClick}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withStreamlitConnection(MenuComponent);","\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MenuComponent from \"./AntMenu\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MenuComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}
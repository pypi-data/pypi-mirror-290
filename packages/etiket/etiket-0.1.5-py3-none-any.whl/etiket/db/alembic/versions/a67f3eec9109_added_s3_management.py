"""added S3 management

Revision ID: a67f3eec9109
Revises: d6f4df128cd5
Create Date: 2024-07-05 14:22:00.757875

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a67f3eec9109'
down_revision: Union[str, None] = 'd6f4df128cd5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('s3_resources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('resource_uuid', sa.Uuid(), nullable=False),
    sa.Column('type', sa.Enum('TUD', 'AWS', 'AZURE', 'SWIFT', name='objectstoretype'), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=False),
    sa.Column('access_key', sa.String(), nullable=False),
    sa.Column('secret_key', sa.String(), nullable=False),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('generic', sa.Boolean(), nullable=False),
    sa.Column('can_create_buckets', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('resource_uuid')
    )
    op.create_table('s3_buckets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['s3_resources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('s3_permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('can_add_users', sa.Boolean(), nullable=False),
    sa.Column('can_revoke_users', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['s3_resources.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('s3_transfer_overview_scope_level',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scope_id', sa.Integer(), nullable=False),
    sa.Column('bucked_id', sa.Integer(), nullable=False),
    sa.Column('bytes_transferred', sa.Integer(), nullable=False),
    sa.Column('bytes_total', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='s3scopetransferstatus'), nullable=False),
    sa.ForeignKeyConstraint(['bucked_id'], ['s3_buckets.id'], ),
    sa.ForeignKeyConstraint(['scope_id'], ['scopes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('s3_transfer_overview_file_level',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transfer_id', sa.Integer(), nullable=False),
    sa.Column('file_id', sa.BigInteger().with_variant(sa.BIGINT(), 'postgresql').with_variant(sa.INTEGER(), 'sqlite'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='s3filetransferstatus'), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ),
    sa.ForeignKeyConstraint(['transfer_id'], ['s3_transfer_overview_scope_level.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # insert some fields so the database does not get unhappy when existing data is present (this is not done when the database is created from scratch)
    op.execute("""
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM users) THEN
        INSERT INTO s3_resources (name, resource_uuid, type, endpoint, access_key, secret_key, generic, can_create_buckets) 
        VALUES ('TUD data', 'ab719555-f413-4f25-bfc4-17b9131a2cf0', 'TUD', 'https://s3.tudelft.nl', 'access_key', 'secret_key', false, false);

        INSERT INTO s3_buckets (uuid, name, resource_id) 
        VALUES ('f3c6bdc0-0aa0-448e-bf47-718bf0627b5b', 'qutech-qdl-poc', 1);
    END IF;
END $$;
""")
    
    op.create_index('s3_file_transfers_index', 's3_transfer_overview_file_level', ['transfer_id', 'attempts', 'status'], unique=False)
    op.add_column('files', sa.Column('bucket_id', sa.Integer(), nullable=False, server_default=sa.text('1')))
    op.drop_index('ix_dataset_id', table_name='files')
    op.create_foreign_key(None, 'files', 's3_buckets', ['bucket_id'], ['id'])
    op.drop_column('files', 's3_bucket')
    op.add_column('scopes', sa.Column('bucket_id', sa.Integer(), nullable=False, server_default=sa.text('1')))
    op.create_foreign_key(None, 'scopes', 's3_buckets', ['bucket_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'scopes', type_='foreignkey')
    op.drop_column('scopes', 'bucket_id')
    op.add_column('files', sa.Column('s3_bucket', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'files', type_='foreignkey')
    op.create_index('ix_dataset_id', 'files', ['dataset_id'], unique=False)
    op.drop_column('files', 'bucket_id')
    op.drop_index('s3_file_transfers_index', table_name='s3_transfer_overview_file_level')
    op.drop_table('s3_transfer_overview_file_level')
    op.drop_table('s3_transfer_overview_scope_level')
    op.drop_table('s3_permissions')
    op.drop_table('s3_buckets')
    op.drop_table('s3_resources')
    # ### end Alembic commands ###

"""added version tables

Revision ID: 1c77427f1d45
Revises: 12679c2891d7
Create Date: 2024-05-22 10:17:19.032931

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c77427f1d45'
down_revision: Union[str, None] = '12679c2891d7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('software_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('etiket', 'dataQruiser', 'qdrive', name='softwaretype'), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('version_release_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('version_notes', sa.String(), nullable=False),
    sa.Column('version_url', sa.String(), nullable=False),
    sa.Column('needs_update', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type', 'version', name='software_versions_type_version_unique')
    )
    op.create_table('software_releases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('release_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('beta_release', sa.Boolean(), nullable=False),
    sa.Column('etiket_version_id', sa.Integer(), nullable=False),
    sa.Column('qdrive_version_id', sa.Integer(), nullable=False),
    sa.Column('dataQruiser_version_id', sa.Integer(), nullable=False),
    sa.Column('min_etiket_version_id', sa.Integer(), nullable=False),
    sa.Column('min_qdrive_version_id', sa.Integer(), nullable=False),
    sa.Column('min_dataQruiser_version_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['dataQruiser_version_id'], ['software_versions.id'], ),
    sa.ForeignKeyConstraint(['etiket_version_id'], ['software_versions.id'], ),
    sa.ForeignKeyConstraint(['min_dataQruiser_version_id'], ['software_versions.id'], ),
    sa.ForeignKeyConstraint(['min_etiket_version_id'], ['software_versions.id'], ),
    sa.ForeignKeyConstraint(['min_qdrive_version_id'], ['software_versions.id'], ),
    sa.ForeignKeyConstraint(['qdrive_version_id'], ['software_versions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.execute(
        '''
        CREATE OR REPLACE FUNCTION compare_sem_version(version TEXT, min_version TEXT)
            RETURNS BOOLEAN	AS $$
            DECLARE
                version_parts INT[];
                min_version_parts INT[];
            BEGIN
                version_parts := string_to_array(substring(version FROM '(\d+\.\d+\.\d+)'), '.')::INT[];
                min_version_parts := string_to_array(substring(min_version FROM '((\d+\.\d+\.\d+)|(\d+\.\d+)|(\d+))'), '.')::INT[];

                RETURN version_parts >= min_version_parts;
            END;
            $$ LANGUAGE plpgsql;
        '''
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('software_releases')
    op.drop_table('software_versions')
    # ### end Alembic commands ###

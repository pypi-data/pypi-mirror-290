Metadata-Version: 2.1
Name: large-image
Version: 1.29.5.dev38
Summary: Python modules to work with large, multiresolution images.
Home-page: https://github.com/girder/large_image
Author: Kitware, Inc.
Author-email: kitware@kitware.com
License: Apache Software License 2.0
Keywords: large_image
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
License-File: LICENSE
License-File: NOTICE
Requires-Dist: cachetools
Requires-Dist: palettable
Requires-Dist: Pillow
Requires-Dist: numpy
Requires-Dist: typing-extensions
Provides-Extra: memcached
Requires-Dist: pylibmc>=1.5.1; platform_system != "Windows" and extra == "memcached"
Provides-Extra: redis
Requires-Dist: redis>=4.5.5; extra == "redis"
Provides-Extra: converter
Requires-Dist: large-image-converter>=1.29.5.dev38; extra == "converter"
Provides-Extra: colormaps
Requires-Dist: matplotlib; extra == "colormaps"
Provides-Extra: tiledoutput
Requires-Dist: pyvips; extra == "tiledoutput"
Provides-Extra: performance
Requires-Dist: psutil>=4.2.0; extra == "performance"
Requires-Dist: simplejpeg; extra == "performance"
Provides-Extra: bioformats
Requires-Dist: large-image-source-bioformats>=1.29.5.dev38; extra == "bioformats"
Provides-Extra: deepzoom
Requires-Dist: large-image-source-deepzoom>=1.29.5.dev38; extra == "deepzoom"
Provides-Extra: dicom
Requires-Dist: large-image-source-dicom>=1.29.5.dev38; extra == "dicom"
Provides-Extra: dummy
Requires-Dist: large-image-source-dummy>=1.29.5.dev38; extra == "dummy"
Provides-Extra: gdal
Requires-Dist: large-image-source-gdal>=1.29.5.dev38; extra == "gdal"
Provides-Extra: mapnik
Requires-Dist: large-image-source-mapnik>=1.29.5.dev38; extra == "mapnik"
Provides-Extra: multi
Requires-Dist: large-image-source-multi>=1.29.5.dev38; extra == "multi"
Provides-Extra: nd2
Requires-Dist: large-image-source-nd2>=1.29.5.dev38; extra == "nd2"
Provides-Extra: ometiff
Requires-Dist: large-image-source-ometiff>=1.29.5.dev38; extra == "ometiff"
Provides-Extra: openjpeg
Requires-Dist: large-image-source-openjpeg>=1.29.5.dev38; extra == "openjpeg"
Provides-Extra: openslide
Requires-Dist: large-image-source-openslide>=1.29.5.dev38; extra == "openslide"
Provides-Extra: pil
Requires-Dist: large-image-source-pil>=1.29.5.dev38; extra == "pil"
Provides-Extra: rasterio
Requires-Dist: large-image-source-rasterio>=1.29.5.dev38; extra == "rasterio"
Provides-Extra: test
Requires-Dist: large-image-source-test>=1.29.5.dev38; extra == "test"
Provides-Extra: tiff
Requires-Dist: large-image-source-tiff>=1.29.5.dev38; extra == "tiff"
Provides-Extra: tifffile
Requires-Dist: large-image-source-tifffile>=1.29.5.dev38; extra == "tifffile"
Provides-Extra: vips
Requires-Dist: large-image-source-vips>=1.29.5.dev38; extra == "vips"
Provides-Extra: zarr
Requires-Dist: large-image-source-zarr>=1.29.5.dev38; extra == "zarr"
Provides-Extra: sources
Requires-Dist: large-image-source-openjpeg>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-bioformats>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-nd2>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-test>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-openslide>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-tifffile>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-deepzoom>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-mapnik>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-dummy>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-multi>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-dicom>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-pil>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-gdal>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-rasterio>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-ometiff>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-zarr>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-vips>=1.29.5.dev38; extra == "sources"
Requires-Dist: large-image-source-tiff>=1.29.5.dev38; extra == "sources"
Provides-Extra: all
Requires-Dist: pyvips; extra == "all"
Requires-Dist: large-image-source-openjpeg>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-nd2>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-openslide>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-tifffile>=1.29.5.dev38; extra == "all"
Requires-Dist: psutil>=4.2.0; extra == "all"
Requires-Dist: large-image-source-dummy>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-dicom>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-test>=1.29.5.dev38; extra == "all"
Requires-Dist: matplotlib; extra == "all"
Requires-Dist: large-image-source-rasterio>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-multi[all]>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-zarr>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-converter>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-tiff[all]>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-pil[all]>=1.29.5.dev38; extra == "all"
Requires-Dist: redis>=4.5.5; extra == "all"
Requires-Dist: large-image-source-bioformats>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-rasterio[all]>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-mapnik>=1.29.5.dev38; extra == "all"
Requires-Dist: pylibmc>=1.5.1; platform_system != "Windows" and extra == "all"
Requires-Dist: large-image-source-multi>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-deepzoom>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-pil>=1.29.5.dev38; extra == "all"
Requires-Dist: simplejpeg; extra == "all"
Requires-Dist: large-image-source-ometiff>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-vips>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-tiff>=1.29.5.dev38; extra == "all"
Requires-Dist: large-image-source-gdal>=1.29.5.dev38; extra == "all"
Provides-Extra: common
Requires-Dist: redis>=4.5.5; extra == "common"
Requires-Dist: large-image-source-rasterio[all]>=1.29.5.dev38; extra == "common"
Requires-Dist: large-image-source-nd2>=1.29.5.dev38; extra == "common"
Requires-Dist: large-image-source-tifffile>=1.29.5.dev38; extra == "common"
Requires-Dist: psutil>=4.2.0; extra == "common"
Requires-Dist: large-image-source-deepzoom>=1.29.5.dev38; extra == "common"
Requires-Dist: pylibmc>=1.5.1; platform_system != "Windows" and extra == "common"
Requires-Dist: large-image-source-multi>=1.29.5.dev38; extra == "common"
Requires-Dist: large-image-source-dicom>=1.29.5.dev38; extra == "common"
Requires-Dist: simplejpeg; extra == "common"
Requires-Dist: large-image-source-test>=1.29.5.dev38; extra == "common"
Requires-Dist: matplotlib; extra == "common"
Requires-Dist: large-image-source-zarr>=1.29.5.dev38; extra == "common"
Requires-Dist: large-image-source-pil[all]>=1.29.5.dev38; extra == "common"

Large Image
===========

|build-status| |codecov-io| |license-badge| |doi-badge| |pypi-badge|

.. |build-status| image:: https://img.shields.io/circleci/build/github/girder/large_image.svg
    :target: https://circleci.com/gh/girder/large_image
    :alt: Build Status

.. |license-badge| image:: https://img.shields.io/badge/license-Apache%202-blue.svg
    :target: https://raw.githubusercontent.com/girder/large_image/master/LICENSE
    :alt: License

.. |codecov-io| image:: https://img.shields.io/codecov/c/github/girder/large_image.svg
   :target: https://codecov.io/github/girder/large_image?branch=master
   :alt: codecov.io

.. |doi-badge| image:: https://img.shields.io/badge/DOI-10.5281%2Fzenodo.4723355-blue.svg
   :target: https://zenodo.org/badge/latestdoi/45569214

.. |pypi-badge| image:: https://img.shields.io/pypi/v/large-image.svg?logo=python&logoColor=white
   :target: https://pypi.org/project/large-image/

*Python modules to work with large, multiresolution images.*

Large Image is developed and maintained by the Data & Analytics group at `Kitware, Inc. <https://kitware.com>`_ for processing large geospatial and medical images. This provides the backbone for several of our image analysis platforms including `Resonant GeoData <https://github.com/ResonantGeoData/ResonantGeoData>`_, `HistomicsUI <https://github.com/DigitalSlideArchive/HistomicsUI>`_, and `the Digital Slide Archive <https://digitalslidearchive.github.io/digital_slide_archive/>`_.


Highlights
----------

- Tile serving made easy
- Supports a wide variety of geospatial and medical image formats
- Convert to tiled Cloud Optimized (Geo)Tiffs (also known as pyramidal tiffs)
- Python methods for retiling or accessing regions of images efficiently
- Options for restyling tiles, such as dynamically applying color and band transform


Installation
------------

In addition to installing the ``large-image`` package, you'll need at least one tile source (a ``large-image-source-xxx`` package).   You can install everything from the main project with one of these commands:

Pip
~~~

Install common tile sources on linux, OSX, or Windows::

    pip install large-image[common]

Install all tile sources on linux::

    pip install large-image[all] --find-links https://girder.github.io/large_image_wheels

Install all tile sources and all Girder plugins on linux::

    pip install large-image[all] girder-large-image-annotation[tasks] --find-links https://girder.github.io/large_image_wheels


Conda
~~~~~

Conda makes dependency management a bit easier if not on Linux. Some of the source modules are available on conda-forge. You can install the following::

    conda install -c conda-forge large-image-source-gdal
    conda install -c conda-forge large-image-source-tiff
    conda install -c conda-forge large-image-converter


Docker Image
~~~~~~~~~~~~

Included in this repository’s packages is a pre-built Docker image that has all
of the dependencies to read any supported image format.

This is particularly useful if you do not want to install some of the heavier
dependencies like GDAL on your system or want a dedicated and isolated
environment for working with large images.

To use, pull the image and run it by mounting a local volume where the
imagery is stored::

    docker pull ghcr.io/girder/large_image:latest
    docker run -v /path/to/images:/opt/images ghcr.io/girder/large_image:latest


Modules
-------

Large Image consists of several Python modules designed to work together.  These include:

- ``large-image``: The core module.

  You can specify extras_require of the name of any tile source included with this repository.  For instance, you can do ``pip install large-image[tiff]``.  There are additional extras_require options:

  - ``sources``: all of the tile sources in the repository, a specific source name (e.g., ``tiff``)

  - ``memcached``: use memcached for tile caching

  - ``converter``: include the converter module

  - ``colormaps``: use matplotlib for named color palettes used in styles

  - ``tiledoutput``: support for emitting large regions as tiled tiffs

  - ``performance``: include optional modules that can improve performance

  - ``common``: all of the tile sources and above packages that will install directly from pypi without other external libraries on linux, OSX, and Windows.

  - ``all``: for all of the above

- ``large-image-converter``: A utility for using pyvips and other libraries to convert images into pyramidal tiff files that can be read efficiently by large_image.
  You can specify extras_require of ``jp2k`` to include modules to allow output to JPEG2000 compression, ``sources`` to include all sources, ``stats`` to include modules to allow computing compression noise statistics, ``geospatial`` to include support for converting geospatial sources, or ``all`` for all of the optional extras_require.

- Tile sources:

  - ``large-image-source-bioformats``: A tile source for reading any file handled by the Java Bioformats library.

  - ``large-image-source-deepzoom``: A tile source for reading Deepzoom tiles.

  - ``large-image-source-dicom``: A tile source for reading DICOM WSI images.

  - ``large-image-source-gdal``: A tile source for reading geotiff files via GDAL.  This handles source data with more complex transforms than the mapnik tile source.

  - ``large-image-source-mapnik``: A tile source for reading geotiff and netcdf files via Mapnik and GDAL.  This handles more vector issues than the gdal tile source.

  - ``large-image-source-multi``: A tile source for compositing other tile sources into a single multi-frame source.

  - ``large-image-source-nd2``: A tile source for reading nd2 (NIS Element) images.

  - ``large-image-source-ometiff``: A tile source using the tiff library that can handle some multi-frame OMETiff files.

  - ``large-image-source-openjpeg``: A tile source using the Glymur library to read jp2 (JPEG 2000) files.

  - ``large-image-source-openslide``: A tile source using the OpenSlide library.  This works with svs, ndpi, Mirax, tiff, vms, and other file formats.

  - ``large-image-source-pil``: A tile source for small images via the Python Imaging Library (Pillow).

  - ``large-image-source-tiff``: A tile source for reading pyramidal tiff files in common compression formats.

  - ``large-image-source-tifffile``: A tile source using the tifffile library that can handle a wide variety of tiff-like files.

  - ``large-image-source-vips``: A tile source for reading any files handled by libvips.  This also can be used for writing tiled images from numpy arrays.

  - ``large-image-source-zarr``: A tile source using the zarr library that can handle OME-Zarr (OME-NGFF) files as well as some other zarr files.

  - ``large-image-source-test``: A tile source that generates test tiles, including a simple fractal pattern.  Useful for testing extreme zoom levels.

  - ``large-image-source-dummy``: A tile source that does nothing.

  Most tile sources can be used with girder-large-image.  You can specific an extras_require of ``girder`` to include ``girder-large-image`` with the source.

- As a Girder plugin:

  - ``girder-large-image``: Large Image as a Girder_ 3.x plugin.
    You can specify extras_require of ``tasks`` to install a Girder Worker task that can convert otherwise unreadable images to pyramidal tiff files.

  - ``girder-large-image-annotation``: Annotations for large images as a Girder_ 3.x plugin.

  - ``large-image-tasks``: A utility for running the converter via Girder Worker.
    You can specify an extras_require of ``girder`` to include modules needed to work with the Girder remote worker or ``worker`` to include modules needed on the remote side of the Girder remote worker.  If neither is specified, some conversion tasks can be run using Girder local jobs.


Developer Installation
----------------------

To install all packages from source, clone the repository::

    git clone https://github.com/girder/large_image.git
    cd large_image

Install all packages and dependencies::

    pip install -e . -r requirements-dev.txt

If you aren't developing with Girder 3, you can skip installing those components.  Use ``requirements-dev-core.txt`` instead of ``requirements-dev.txt``::

    pip install -e . -r requirements-dev-core.txt


Tile source prerequisites
=========================

Many tile sources have complex prerequisites.  These can be installed directly using your system's package manager or from some prebuilt Python wheels for Linux.  The prebuilt wheels are not official packages, but they can be used by instructing pip to use them by preference::

    pip install -e . -r requirements-dev.txt --find-links https://girder.github.io/large_image_wheels


.. _Girder: https://github.com/girder/girder

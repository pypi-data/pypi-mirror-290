#
# Build Settings
#
[build-system]
requires = ["setuptools>=57.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["vipdopt"]
include-package-data = true


[tool.setuptools.package-data]
"*" = ["*.cfg", "*.yml", "*.yaml", "*.json", "*.sh", "*.md"]

#
#  Metadata
#
[project]
name = "vipdopt"
version ="2.0.2"
authors = [
  { name="McNichols, N.; Foo, I.; Roberts, G.", email="ianfoo@caltech.edu" },
]
maintainers = [
  { name="Ian Foo", email="ianfoo@caltech.edu" },
]
description = "Package for volumetirc inverse photonic design and optimization"
readme = "README.md"
requires-python = "==3.10.*"
classifiers = [
    "Programming Language :: Python :: 3",
]
dependencies = [
    "scipy==1.12.*",
    "numpy==1.26.*",
    "numpy-stl==3.1.*",
    "matplotlib==3.8.*",
    "scikit-image==0.22.*",
    "overrides==7.7.*",
    "PyYAML==6.*",
    "types-PyYAML==6.*",
    "python-magic==0.4.*",
    "python-magic-bin; platform_system=='Windows'",
    "Jinja2==3.1.*",
    "PySide6==6.3.0",
    "PySide6-stubs==6.4.2",
    "gdstk==0.9.50",
]

[project.optional-dependencies]
dev = [
    "sphinx==7.3.7",
    "nbsphinx==0.9.4",
    "furo==2024.5.6",
    "notebook==7.2.1",
    "sphinx_gallery==0.17.0",
    "sphinx_tabs==3.4.5",
    "pypandoc==1.13",
    "pytest==8.*",
    "pytest-cov==4.1.*",
    "pytest-xdist==3.5.*",
    "pytest-mock==3.12.*",
    "mypy==1.8.*",
    "coverage[toml]==7.4.3",
    "ruff==0.3.5",
    "jax==0.4.30",
    "jaxlib==0.4.30",
]

[project.urls]
Homepage = "https://github.com/IanFooMZ/SonyBayerFilter"
Issues = "https://github.com/IanFooMZ/SonyBayerFilter/issues"


#
# Ruff Settings
#

[tool.ruff]
include = ["vipdopt/*", "tests/*", "testing/*"]
fix = true
show-fixes = true

# Exclude a variety of commonly ignored directories.
exclude = [
    "vipdopt/eval/*",
    "vipdopt/__main__.py",
    "vipdopt/GDS.py",
    "vipdopt/STL.py",
    "vipdopt/lumerical.cfg",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tmp",
    "*.yml",
    "*.yaml",
    # More specific ignores
    "*.ui",
    "*ui_*.py",
    "*.sh",
    "*.lsfx",
    "*.md",
    "*.gds",
    "*.GDS",
    "*.stl",
    "*.ldev",
    "*.npz"
]

# Same as Black.
line-length = 88

indent-width = 4

# Assume Python 3.11
target-version = "py310"


[tool.ruff.format]
indent-style = "space"
quote-style = "preserve"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "D", "UP", "BLE", "FBT", "B", "A", "COM",
    "C4", "ISC", "ICN", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID",
    "ARG", "ERA", "PL", "TRY", "NPY", "PERF", "FURB", "RUF"]
ignore = [
    "ANN",  # Type hints / annotations; handled by mypy
    "COM812",  # "Trailing Comma Missing"
    "TRY003",  # "Avoid specifying long messages outside the exception class"
    "PLR0913",  # Too many arguments to function call
    "FBT001",  # Boolean-typed positional argument in function definitions
    "FBT002",  # Boolean default positional argument in function definitions
    "FBT003",  # Boolean positional value in function call,
    "ERA001",  # Commented-out code
    "ISC001",  # Single-line implicit string concatenation
]

task-tags = [
    "TODO",
    "NOTE",
    "FIXME",
    "XXX"
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.per-file-ignores]
# Ignore import violations in all `__init__.py` files and in other relevant folders
"**/__init__.py" = ["E402", "F403", "F405"]
"**/{testing,docs}/*" = ["E402"]

# Ignore import order in __main__.py
"**/__main__.py" = ["E402"]


"**/pool.py" = [
    "SLF001",  # Ignore private member access in pool.py
    "A001",  # Ignore shadowing builtin functions
    "BLE001",  # Ignore catching BaseException
    "PLW0602",
    "PLW0603",  # Ignore global problems
    "ARG001",  # Ignore unused function arguments
    "ARG002",
]

# Ignore docstrings for properties in SonyBayerFilter config
"**/configuration/sbc.py" = ["D"]

# Ignore documentation for tests
# Ignore boolean arguments in methods for tests
"**/tests/*" = [
    "E402", "F403", "F405",  # Import violations
    "D",  # Documentation
    "FBT",  # Boolean arguments in methods
    "ARG001",  # Unused function argument
]


[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"
parametrize-values-type = "list"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["setData", "headerData", "rowCount", "columnCount"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

# Ignore things with certain decorators
ignore-decorators = ["overrides.override"]
property-decorators = ["abc.abstractproperty"]


[tool.ruff.lint.mccabe]
max-complexity = 15

#
# Pytest Settings
#

[tool.pytest.ini_options]
markers = [
    "smoke: these tests should always run to check for regressions quickly",
    "slow: mark tests as slow (only run with full suite)",
    "lumapi: tests that require lumapi to run"
]

testpaths = ["tests"]


#
# Coverage Settings
#

[tool.coverage.run]
branch = true
source = ["vipdopt"]
omit = [
    "*tests*",
    "*testing*",
    "*__main__.py",
    "vipdopt/simulation.py",
    "vipdopt/configuration/sbc.py",
    # Ignoring until more set in stone
    "vipdopt/optimization/optimization.py",
    "vipdopt/optimization/fom.py",
    "vipdopt/monitor.py",
    "vipdopt/gui/*",
    "vipdopt/eval/*",
    "vipdopt/STL.py",
    "vipdopt/GDS.py",
    "vipdopt/project.py",
    "*device.py",
    "*source.py",
    "*adam.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "__str__",
    "loggig.debug",
    "logging.info",
    "logging.warning",
    "pass",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
show_missing = true
fail_under = 80

#
# mypy Settings
#
[tool.mypy]
python_version = "3.10"
disable_error_code = ["operator"]
files = "vipdopt"
exclude = [
    'ui_.*\.py$',  # Ignore files starting with 'ui_'
    'vipdopt/__main__.py',  # Ignore for now
    '^vipdopt/eval/.*',  # Ignore for now
    'STL\.py$',  # Ignore for now
    'GDS\.py$',  # Ignore for now
]
show_error_codes = true
show_error_code_links = true

[[tool.mypy.overrides]]
module = "vipdopt.simulation"
strict_optional = true
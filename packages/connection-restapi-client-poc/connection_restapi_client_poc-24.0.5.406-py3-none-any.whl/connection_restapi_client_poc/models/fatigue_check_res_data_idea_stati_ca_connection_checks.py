# coding: utf-8

"""
    Connection Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from connection_restapi_client_poc.models.data_weld_type_code_ci_basic_types import DataWeldTypeCodeCIBasicTypes
from typing import Optional, Set
from typing_extensions import Self

class FatigueCheckResDataIdeaStatiCaConnectionChecks(BaseModel):
    """
    FatigueCheckResDataIdeaStatiCaConnectionChecks
    """ # noqa: E501
    stress_diagram: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, alias="stressDiagram")
    stress_diagram_tau: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, alias="stressDiagramTau")
    plate_uid: Optional[List[StrictInt]] = Field(default=None, alias="plateUID")
    joined_item_name: Optional[StrictStr] = Field(default=None, alias="joinedItemName")
    weld_type2: Optional[DataWeldTypeCodeCIBasicTypes] = Field(default=None, alias="weldType2")
    designed_thickness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="designedThickness")
    normal_stress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="normalStress")
    shear_stress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shearStress")
    normal_stress2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="normalStress2")
    shear_stress2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shearStress2")
    plate_name: Optional[StrictStr] = Field(default=None, alias="plateName")
    length: Optional[Union[StrictFloat, StrictInt]] = None
    origin_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="originId")
    section_line: Optional[List[List[StrictStr]]] = Field(default=None, alias="sectionLine")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    check_status: Optional[StrictBool] = Field(default=None, alias="checkStatus")
    limit_check_status: Optional[StrictBool] = Field(default=None, alias="limitCheckStatus")
    load_case_id: Optional[StrictInt] = Field(default=None, alias="loadCaseId")
    load_case: Optional[StrictStr] = Field(default=None, alias="loadCase")
    max_unity_check: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxUnityCheck")
    form: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["stressDiagram", "stressDiagramTau", "plateUID", "joinedItemName", "weldType2", "designedThickness", "normalStress", "shearStress", "normalStress2", "shearStress2", "plateName", "length", "originId", "sectionLine", "id", "name", "checkStatus", "limitCheckStatus", "loadCaseId", "loadCase", "maxUnityCheck", "form"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FatigueCheckResDataIdeaStatiCaConnectionChecks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if stress_diagram (nullable) is None
        # and model_fields_set contains the field
        if self.stress_diagram is None and "stress_diagram" in self.model_fields_set:
            _dict['stressDiagram'] = None

        # set to None if stress_diagram_tau (nullable) is None
        # and model_fields_set contains the field
        if self.stress_diagram_tau is None and "stress_diagram_tau" in self.model_fields_set:
            _dict['stressDiagramTau'] = None

        # set to None if plate_uid (nullable) is None
        # and model_fields_set contains the field
        if self.plate_uid is None and "plate_uid" in self.model_fields_set:
            _dict['plateUID'] = None

        # set to None if joined_item_name (nullable) is None
        # and model_fields_set contains the field
        if self.joined_item_name is None and "joined_item_name" in self.model_fields_set:
            _dict['joinedItemName'] = None

        # set to None if plate_name (nullable) is None
        # and model_fields_set contains the field
        if self.plate_name is None and "plate_name" in self.model_fields_set:
            _dict['plateName'] = None

        # set to None if section_line (nullable) is None
        # and model_fields_set contains the field
        if self.section_line is None and "section_line" in self.model_fields_set:
            _dict['sectionLine'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if load_case (nullable) is None
        # and model_fields_set contains the field
        if self.load_case is None and "load_case" in self.model_fields_set:
            _dict['loadCase'] = None

        # set to None if form (nullable) is None
        # and model_fields_set contains the field
        if self.form is None and "form" in self.model_fields_set:
            _dict['form'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FatigueCheckResDataIdeaStatiCaConnectionChecks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stressDiagram": obj.get("stressDiagram"),
            "stressDiagramTau": obj.get("stressDiagramTau"),
            "plateUID": obj.get("plateUID"),
            "joinedItemName": obj.get("joinedItemName"),
            "weldType2": obj.get("weldType2"),
            "designedThickness": obj.get("designedThickness"),
            "normalStress": obj.get("normalStress"),
            "shearStress": obj.get("shearStress"),
            "normalStress2": obj.get("normalStress2"),
            "shearStress2": obj.get("shearStress2"),
            "plateName": obj.get("plateName"),
            "length": obj.get("length"),
            "originId": obj.get("originId"),
            "sectionLine": obj.get("sectionLine"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "checkStatus": obj.get("checkStatus"),
            "limitCheckStatus": obj.get("limitCheckStatus"),
            "loadCaseId": obj.get("loadCaseId"),
            "loadCase": obj.get("loadCase"),
            "maxUnityCheck": obj.get("maxUnityCheck"),
            "form": obj.get("form")
        })
        return _obj



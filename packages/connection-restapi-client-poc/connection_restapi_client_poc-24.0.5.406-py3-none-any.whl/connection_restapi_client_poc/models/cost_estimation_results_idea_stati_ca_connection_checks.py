# coding: utf-8

"""
    Connection Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from connection_restapi_client_poc.models.cost_estimation_item_bolt_idea_stati_ca_connection_checks import CostEstimationItemBoltIdeaStatiCaConnectionChecks
from connection_restapi_client_poc.models.cost_estimation_item_steel_idea_stati_ca_connection_checks import CostEstimationItemSteelIdeaStatiCaConnectionChecks
from connection_restapi_client_poc.models.cost_estimation_item_weld_idea_stati_ca_connection_checks import CostEstimationItemWeldIdeaStatiCaConnectionChecks
from typing import Optional, Set
from typing_extensions import Self

class CostEstimationResultsIdeaStatiCaConnectionChecks(BaseModel):
    """
    CostEstimationResultsIdeaStatiCaConnectionChecks
    """ # noqa: E501
    steel_costs: Optional[List[CostEstimationItemSteelIdeaStatiCaConnectionChecks]] = Field(default=None, alias="steelCosts")
    fillet_weld_costs: Optional[List[CostEstimationItemWeldIdeaStatiCaConnectionChecks]] = Field(default=None, alias="filletWeldCosts")
    butt_weld_costs: Optional[List[CostEstimationItemWeldIdeaStatiCaConnectionChecks]] = Field(default=None, alias="buttWeldCosts")
    bolt_costs: Optional[List[CostEstimationItemBoltIdeaStatiCaConnectionChecks]] = Field(default=None, alias="boltCosts")
    hole_drilling_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="holeDrillingCost")
    total_estimated_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalEstimatedCost")
    log_message: Optional[StrictStr] = Field(default=None, alias="logMessage")
    __properties: ClassVar[List[str]] = ["steelCosts", "filletWeldCosts", "buttWeldCosts", "boltCosts", "holeDrillingCost", "totalEstimatedCost", "logMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CostEstimationResultsIdeaStatiCaConnectionChecks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in steel_costs (list)
        _items = []
        if self.steel_costs:
            for _item_steel_costs in self.steel_costs:
                if _item_steel_costs:
                    _items.append(_item_steel_costs.to_dict())
            _dict['steelCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fillet_weld_costs (list)
        _items = []
        if self.fillet_weld_costs:
            for _item_fillet_weld_costs in self.fillet_weld_costs:
                if _item_fillet_weld_costs:
                    _items.append(_item_fillet_weld_costs.to_dict())
            _dict['filletWeldCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in butt_weld_costs (list)
        _items = []
        if self.butt_weld_costs:
            for _item_butt_weld_costs in self.butt_weld_costs:
                if _item_butt_weld_costs:
                    _items.append(_item_butt_weld_costs.to_dict())
            _dict['buttWeldCosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bolt_costs (list)
        _items = []
        if self.bolt_costs:
            for _item_bolt_costs in self.bolt_costs:
                if _item_bolt_costs:
                    _items.append(_item_bolt_costs.to_dict())
            _dict['boltCosts'] = _items
        # set to None if steel_costs (nullable) is None
        # and model_fields_set contains the field
        if self.steel_costs is None and "steel_costs" in self.model_fields_set:
            _dict['steelCosts'] = None

        # set to None if fillet_weld_costs (nullable) is None
        # and model_fields_set contains the field
        if self.fillet_weld_costs is None and "fillet_weld_costs" in self.model_fields_set:
            _dict['filletWeldCosts'] = None

        # set to None if butt_weld_costs (nullable) is None
        # and model_fields_set contains the field
        if self.butt_weld_costs is None and "butt_weld_costs" in self.model_fields_set:
            _dict['buttWeldCosts'] = None

        # set to None if bolt_costs (nullable) is None
        # and model_fields_set contains the field
        if self.bolt_costs is None and "bolt_costs" in self.model_fields_set:
            _dict['boltCosts'] = None

        # set to None if log_message (nullable) is None
        # and model_fields_set contains the field
        if self.log_message is None and "log_message" in self.model_fields_set:
            _dict['logMessage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CostEstimationResultsIdeaStatiCaConnectionChecks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "steelCosts": [CostEstimationItemSteelIdeaStatiCaConnectionChecks.from_dict(_item) for _item in obj["steelCosts"]] if obj.get("steelCosts") is not None else None,
            "filletWeldCosts": [CostEstimationItemWeldIdeaStatiCaConnectionChecks.from_dict(_item) for _item in obj["filletWeldCosts"]] if obj.get("filletWeldCosts") is not None else None,
            "buttWeldCosts": [CostEstimationItemWeldIdeaStatiCaConnectionChecks.from_dict(_item) for _item in obj["buttWeldCosts"]] if obj.get("buttWeldCosts") is not None else None,
            "boltCosts": [CostEstimationItemBoltIdeaStatiCaConnectionChecks.from_dict(_item) for _item in obj["boltCosts"]] if obj.get("boltCosts") is not None else None,
            "holeDrillingCost": obj.get("holeDrillingCost"),
            "totalEstimatedCost": obj.get("totalEstimatedCost"),
            "logMessage": obj.get("logMessage")
        })
        return _obj



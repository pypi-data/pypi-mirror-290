# coding: utf-8

"""
    Connection Rest API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from connection_restapi_client_poc.models.fire_temperature_calculation_data_idea_rs_connection_calculator import FireTemperatureCalculationDataIdeaRSConnectionCalculator
from typing import Optional, Set
from typing_extensions import Self

class PlateCheckResDataIdeaStatiCaConnectionChecks(BaseModel):
    """
    PlateCheckResDataIdeaStatiCaConnectionChecks
    """ # noqa: E501
    max_stress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxStress")
    max_strain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxStrain")
    thickness: Optional[Union[StrictFloat, StrictInt]] = None
    material_name: Optional[StrictStr] = Field(default=None, alias="materialName")
    material_fy_without_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialFyWithoutReduction")
    material_fy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialFy")
    material_design_fy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialDesignFy")
    material_fu_without_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialFuWithoutReduction")
    material_modulus_of_elasticity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialModulusOfElasticity")
    items: Optional[List[StrictInt]] = None
    overstrength_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overstrengthFactor")
    strain_hardening_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="strainHardeningFactor")
    material_fy_for_capacity_design: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialFyForCapacityDesign")
    is_dissipative_item: Optional[StrictBool] = Field(default=None, alias="isDissipativeItem")
    cf: Optional[Union[StrictFloat, StrictInt]] = None
    is_hss_reduction: Optional[StrictBool] = Field(default=None, alias="isHSSReduction")
    is_analysis_type_fir: Optional[StrictBool] = Field(default=None, alias="isAnalysisTypeFIR")
    is_analysis_type_ht: Optional[StrictBool] = Field(default=None, alias="isAnalysisTypeHT")
    contact_stress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="contactStress")
    limit_plastic_strain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="limitPlasticStrain")
    fire_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fireTemperature")
    fire_temperature_calculation_data: Optional[FireTemperatureCalculationDataIdeaRSConnectionCalculator] = Field(default=None, alias="fireTemperatureCalculationData")
    gamma_mfi: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gammaMfi")
    material_safety_factor_for_fire: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactorForFire")
    material_service_factor_gamma_c_rus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialServiceFactorGammaC_RUS")
    material_safety_factor_gamma_m_rus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactorGammaM_RUS")
    material_fy_reduced_by_gamma_m_rus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialFyReducedByGammaM_RUS")
    connection_coefficient_chn: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="connectionCoefficient_CHN")
    material_safety_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactor")
    material_safety_factor_ht: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactorHT")
    material_safety_factor_gamma_m1_hkg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactorGammaM1_HKG")
    material_safety_factor_gamma_m2_hkg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="materialSafetyFactorGammaM2_HKG")
    reduction_factor_ky_theta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reductionFactorKyTheta")
    reduction_factor_kp_theta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reductionFactorKpTheta")
    reduction_factor_ke_theta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="reductionFactorKETheta")
    proportional_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="proportionalLimit")
    slope_of_linear_elastic_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="slopeOfLinearElasticRange")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    check_status: Optional[StrictBool] = Field(default=None, alias="checkStatus")
    limit_check_status: Optional[StrictBool] = Field(default=None, alias="limitCheckStatus")
    load_case_id: Optional[StrictInt] = Field(default=None, alias="loadCaseId")
    load_case: Optional[StrictStr] = Field(default=None, alias="loadCase")
    max_unity_check: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxUnityCheck")
    form: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["maxStress", "maxStrain", "thickness", "materialName", "materialFyWithoutReduction", "materialFy", "materialDesignFy", "materialFuWithoutReduction", "materialModulusOfElasticity", "items", "overstrengthFactor", "strainHardeningFactor", "materialFyForCapacityDesign", "isDissipativeItem", "cf", "isHSSReduction", "isAnalysisTypeFIR", "isAnalysisTypeHT", "contactStress", "limitPlasticStrain", "fireTemperature", "fireTemperatureCalculationData", "gammaMfi", "materialSafetyFactorForFire", "materialServiceFactorGammaC_RUS", "materialSafetyFactorGammaM_RUS", "materialFyReducedByGammaM_RUS", "connectionCoefficient_CHN", "materialSafetyFactor", "materialSafetyFactorHT", "materialSafetyFactorGammaM1_HKG", "materialSafetyFactorGammaM2_HKG", "reductionFactorKyTheta", "reductionFactorKpTheta", "reductionFactorKETheta", "proportionalLimit", "slopeOfLinearElasticRange", "id", "name", "checkStatus", "limitCheckStatus", "loadCaseId", "loadCase", "maxUnityCheck", "form"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlateCheckResDataIdeaStatiCaConnectionChecks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fire_temperature_calculation_data
        if self.fire_temperature_calculation_data:
            _dict['fireTemperatureCalculationData'] = self.fire_temperature_calculation_data.to_dict()
        # set to None if material_name (nullable) is None
        # and model_fields_set contains the field
        if self.material_name is None and "material_name" in self.model_fields_set:
            _dict['materialName'] = None

        # set to None if items (nullable) is None
        # and model_fields_set contains the field
        if self.items is None and "items" in self.model_fields_set:
            _dict['items'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if load_case (nullable) is None
        # and model_fields_set contains the field
        if self.load_case is None and "load_case" in self.model_fields_set:
            _dict['loadCase'] = None

        # set to None if form (nullable) is None
        # and model_fields_set contains the field
        if self.form is None and "form" in self.model_fields_set:
            _dict['form'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlateCheckResDataIdeaStatiCaConnectionChecks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxStress": obj.get("maxStress"),
            "maxStrain": obj.get("maxStrain"),
            "thickness": obj.get("thickness"),
            "materialName": obj.get("materialName"),
            "materialFyWithoutReduction": obj.get("materialFyWithoutReduction"),
            "materialFy": obj.get("materialFy"),
            "materialDesignFy": obj.get("materialDesignFy"),
            "materialFuWithoutReduction": obj.get("materialFuWithoutReduction"),
            "materialModulusOfElasticity": obj.get("materialModulusOfElasticity"),
            "items": obj.get("items"),
            "overstrengthFactor": obj.get("overstrengthFactor"),
            "strainHardeningFactor": obj.get("strainHardeningFactor"),
            "materialFyForCapacityDesign": obj.get("materialFyForCapacityDesign"),
            "isDissipativeItem": obj.get("isDissipativeItem"),
            "cf": obj.get("cf"),
            "isHSSReduction": obj.get("isHSSReduction"),
            "isAnalysisTypeFIR": obj.get("isAnalysisTypeFIR"),
            "isAnalysisTypeHT": obj.get("isAnalysisTypeHT"),
            "contactStress": obj.get("contactStress"),
            "limitPlasticStrain": obj.get("limitPlasticStrain"),
            "fireTemperature": obj.get("fireTemperature"),
            "fireTemperatureCalculationData": FireTemperatureCalculationDataIdeaRSConnectionCalculator.from_dict(obj["fireTemperatureCalculationData"]) if obj.get("fireTemperatureCalculationData") is not None else None,
            "gammaMfi": obj.get("gammaMfi"),
            "materialSafetyFactorForFire": obj.get("materialSafetyFactorForFire"),
            "materialServiceFactorGammaC_RUS": obj.get("materialServiceFactorGammaC_RUS"),
            "materialSafetyFactorGammaM_RUS": obj.get("materialSafetyFactorGammaM_RUS"),
            "materialFyReducedByGammaM_RUS": obj.get("materialFyReducedByGammaM_RUS"),
            "connectionCoefficient_CHN": obj.get("connectionCoefficient_CHN"),
            "materialSafetyFactor": obj.get("materialSafetyFactor"),
            "materialSafetyFactorHT": obj.get("materialSafetyFactorHT"),
            "materialSafetyFactorGammaM1_HKG": obj.get("materialSafetyFactorGammaM1_HKG"),
            "materialSafetyFactorGammaM2_HKG": obj.get("materialSafetyFactorGammaM2_HKG"),
            "reductionFactorKyTheta": obj.get("reductionFactorKyTheta"),
            "reductionFactorKpTheta": obj.get("reductionFactorKpTheta"),
            "reductionFactorKETheta": obj.get("reductionFactorKETheta"),
            "proportionalLimit": obj.get("proportionalLimit"),
            "slopeOfLinearElasticRange": obj.get("slopeOfLinearElasticRange"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "checkStatus": obj.get("checkStatus"),
            "limitCheckStatus": obj.get("limitCheckStatus"),
            "loadCaseId": obj.get("loadCaseId"),
            "loadCase": obj.get("loadCase"),
            "maxUnityCheck": obj.get("maxUnityCheck"),
            "form": obj.get("form")
        })
        return _obj



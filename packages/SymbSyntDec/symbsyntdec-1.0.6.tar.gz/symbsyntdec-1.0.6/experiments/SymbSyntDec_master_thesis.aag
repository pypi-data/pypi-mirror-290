aag 147 6 35 1 106
2
4
6
8
10
12
14 16
18 20
22 24
26 28
30 32
34 36
38 40
42 44
46 48
50 52
54 56
58 60
62 64
66 68
70 72
74 76
78 80
82 1
28 213
32 217
36 221
40 225
44 229
48 235
56 241
76 245
80 251
16 257
20 265
24 269
52 273
60 277
64 287
68 291
72 295
84
84 82 206
86 10 3
88 11 23
90 2 11
92 90 47
94 9 16
96 95 7
98 96 79
100 95 11
102 100 47
104 8 11
106 9 59
108 10 9
110 108 55
112 7 9
114 11 13
116 112 114
118 66 117
120 119 75
122 6 8
124 6 10
126 6 12
128 8 10
130 8 12
132 10 12
134 123 125
136 127 129
138 131 133
140 134 136
142 140 138
144 117 143
146 38 117
148 42 7
150 9 11
152 148 150
154 152 13
156 66 3
158 156 5
160 159 35
162 3 5
164 2 4
166 163 165
168 26 167
170 30 163
172 161 169
174 171 20
176 172 174
178 99 103
180 105 107
182 111 52
184 121 145
186 147 155
188 64 177
190 178 180
192 182 184
194 186 188
196 190 192
198 196 194
200 87 89
202 93 72
204 200 202
206 204 199
208 83 0
210 82 162
212 209 211
214 82 26
216 209 215
218 82 161
220 209 219
222 82 117
224 209 223
226 82 38
228 209 227
230 11 47
232 82 231
234 209 233
236 9 55
238 82 237
240 209 239
242 82 121
244 209 243
246 7 79
248 82 247
250 209 249
252 83 1
254 82 94
256 253 255
258 169 171
260 258 20
262 82 260
264 253 263
266 82 200
268 253 267
270 82 182
272 253 271
274 82 180
276 253 275
278 145 147
280 155 64
282 278 280
284 82 282
286 253 285
288 82 0
290 253 289
292 82 202
294 253 293
i0 controllable_ship
i1 controllable_skip
i2 i_regaddr
i3 i_open
i4 i_pay
i5 i_reqc
l0 latch_x_var1
l1 latch_x_var1_prime
l2 latch_x_var2
l3 latch_x_var2_prime
l4 latch_x_var3
l5 latch_x_var3_prime
l6 latch_x_var4
l7 latch_x_var4_prime
l8 latch_x_var5
l9 latch_x_var5_prime
l10 latch_x_var6
l11 latch_x_var6_prime
l12 latch_x_var7
l13 latch_x_var7_prime
l14 latch_x_var8
l15 latch_x_var8_prime
l16 latch_x_var9
l17 latch_x_var9_prime
l18 latch_x_var10
l19 latch_x_var10_prime
l20 latch_x_var11
l21 latch_x_var11_prime
l22 latch_x_var12
l23 latch_x_var12_prime
l24 latch_x_var13
l25 latch_x_var13_prime
l26 latch_x_var14
l27 latch_x_var14_prime
l28 latch_x_var15
l29 latch_x_var15_prime
l30 latch_x_var16
l31 latch_x_var16_prime
l32 latch_x_var17
l33 latch_x_var17_prime
l34 latch_init
o0 F(X)
c

---state var:
x_var1: (weakbefore (triggers false (not open)))
x_var2: (weakbefore (triggers false (and (or (not (before (and (not ship) (not skip)))) (and (or ship skip) (not (and ship skip)))) (or (not (before (before (and (not ship) (not skip))))) (and (not ship) (not skip))))))
x_var3: (weakbefore (triggers pay (or (not pay) ship)))
x_var4: (before (and (not ship) (not skip)))
x_var5: (before (before (and (not ship) (not skip))))
x_var6: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (not ship) (not skip))))
x_var7: (before (or regaddr open pay reqc))
x_var8: (before (before (or regaddr open pay reqc)))
x_var9: (before (since PropositionalTrue(Logic.PLTL) pay))
x_var10: (weakbefore (triggers false (or (not pay) (since PropositionalTrue(Logic.PLTL) open))))
x_var11: (before (since PropositionalTrue(Logic.PLTL) open))
x_var12: (weakbefore (triggers open (or (not open) pay)))
x_var13: (weakbefore (triggers false (and (or (not (or regaddr open pay reqc)) (and (not (and regaddr open)) (not (and regaddr pay)) (not (and regaddr reqc)) (not (and open pay)) (not (and open reqc)) (not (and pay reqc)))) (or (not (before (or regaddr open pay reqc))) (and (not regaddr) (not open) (not pay) (not reqc))) (or (not (before (before (or regaddr open pay reqc)))) regaddr open pay reqc))))
x_var14: (weakbefore false)
x_var15: (weakbefore (triggers false (or (not ship) (since PropositionalTrue(Logic.PLTL) pay))))
x_var16: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (or regaddr open pay reqc))))
x_var17: (before (since PropositionalTrue(Logic.PLTL) regaddr))

---
initial state:
(and (not x_var4) (not x_var5) (not x_var6) (not x_var7) (not x_var8) (not x_var9) (not x_var11) (not x_var16) (not x_var17) x_var1 x_var2 x_var3 x_var10 x_var12 x_var13 x_var14 x_var15) 
---
transition relation:
x_var4_prime iff (and (not ship) (not skip))
x_var5_prime iff x_var4
x_var6_prime iff (or (and x_var14 (not ship) (not skip)) (and PropositionalTrue(Logic.PLTL) x_var6))
x_var7_prime iff (or regaddr open pay reqc)
x_var8_prime iff x_var7
x_var9_prime iff (or pay (and PropositionalTrue(Logic.PLTL) x_var9))
x_var11_prime iff (or open (and PropositionalTrue(Logic.PLTL) x_var11))
x_var16_prime iff (or (and x_var14 (or regaddr open pay reqc)) (and PropositionalTrue(Logic.PLTL) x_var16))
x_var17_prime iff (or regaddr (and PropositionalTrue(Logic.PLTL) x_var17))
x_var1_prime iff (and (not open) (or false x_var1))
x_var2_prime iff (and (or (not x_var4) (and (or ship skip) (not (and ship skip)))) (or (not x_var5) (and (not ship) (not skip))) (or false x_var2))
x_var3_prime iff (and (or (not pay) ship) (or pay x_var3))
x_var10_prime iff (and (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var11)) (or false x_var10))
x_var12_prime iff (and (or (not open) pay) (or open x_var12))
x_var13_prime iff (and (or (not (or regaddr open pay reqc)) (and (not (and regaddr open)) (not (and regaddr pay)) (not (and regaddr reqc)) (not (and open pay)) (not (and open reqc)) (not (and pay reqc)))) (or (not x_var7) (and (not regaddr) (not open) (not pay) (not reqc))) (or (not x_var8) regaddr open pay reqc) (or false x_var13))
x_var14_prime iff false
x_var15_prime iff (and (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var9)) (or false x_var15))
---
final state: 
(and (or (not pay) ship) (or pay x_var3) (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var9)) (or false x_var15) (or (not (and (or (and (not open) (or false x_var1)) regaddr (and PropositionalTrue(Logic.PLTL) x_var17)) (or (and (not open) (or false x_var1)) pay (and PropositionalTrue(Logic.PLTL) x_var9)) (or (not open) pay) (or open x_var12) (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var11)) (or false x_var10) (or (and x_var14 (or regaddr open pay reqc)) (and PropositionalTrue(Logic.PLTL) x_var16)) (or (not (or regaddr open pay reqc)) (and (not (and regaddr open)) (not (and regaddr pay)) (not (and regaddr reqc)) (not (and open pay)) (not (and open reqc)) (not (and pay reqc)))) (or (not x_var7) (and (not regaddr) (not open) (not pay) (not reqc))) (or (not x_var8) regaddr open pay reqc) (or false x_var13))) (and (or (and x_var14 (not ship) (not skip)) (and PropositionalTrue(Logic.PLTL) x_var6)) (or (not x_var4) (and (or ship skip) (not (and ship skip)))) (or (not x_var5) (and (not ship) (not skip))) (or false x_var2))))

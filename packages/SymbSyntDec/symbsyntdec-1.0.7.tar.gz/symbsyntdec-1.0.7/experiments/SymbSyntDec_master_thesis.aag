aag 147 6 35 1 106
2
4
6
8
10
12
14 16
18 20
22 24
26 28
30 32
34 36
38 40
42 44
46 48
50 52
54 56
58 60
62 64
66 68
70 72
74 76
78 80
82 1
16 213
20 219
24 225
44 229
48 233
52 237
56 241
60 245
72 251
28 263
32 267
36 271
40 275
64 283
68 287
76 291
80 295
84
84 82 206
86 8 5
88 9 35
90 4 9
92 90 71
94 11 76
96 95 13
98 96 23
100 95 9
102 100 71
104 10 9
106 11 39
108 8 11
110 108 19
112 7 9
114 11 13
116 112 114
118 66 117
120 119 47
122 6 8
124 6 10
126 6 12
128 8 10
130 8 12
132 10 12
134 123 125
136 127 129
138 131 133
140 134 136
142 140 138
144 117 143
146 42 117
148 50 7
150 9 11
152 148 150
154 152 13
156 66 3
158 156 5
160 159 55
162 3 5
164 2 4
166 163 165
168 14 167
170 58 163
172 161 169
174 171 64
176 172 174
178 99 103
180 105 107
182 111 80
184 121 145
186 147 155
188 28 177
190 178 180
192 182 184
194 186 188
196 190 192
198 196 194
200 87 89
202 93 32
204 200 202
206 204 199
208 83 0
210 82 162
212 209 211
214 11 19
216 82 215
218 209 217
220 13 23
222 82 221
224 209 223
226 82 117
228 209 227
230 82 121
232 209 231
234 82 42
236 209 235
238 82 161
240 209 239
242 82 14
244 209 243
246 9 71
248 82 247
250 209 249
252 145 147
254 155 28
256 252 254
258 83 1
260 82 256
262 259 261
264 82 202
266 259 265
268 82 200
270 259 269
272 82 180
274 259 273
276 169 171
278 276 64
280 82 278
282 259 281
284 82 0
286 259 285
288 82 94
290 259 289
292 82 182
294 259 293
i0 controllable_skip
i1 controllable_ship
i2 i_reqc
i3 i_pay
i4 i_open
i5 i_regaddr
l0 latch_x_var1
l1 latch_x_var1_prime
l2 latch_x_var2
l3 latch_x_var2_prime
l4 latch_x_var3
l5 latch_x_var3_prime
l6 latch_x_var4
l7 latch_x_var4_prime
l8 latch_x_var5
l9 latch_x_var5_prime
l10 latch_x_var6
l11 latch_x_var6_prime
l12 latch_x_var7
l13 latch_x_var7_prime
l14 latch_x_var8
l15 latch_x_var8_prime
l16 latch_x_var9
l17 latch_x_var9_prime
l18 latch_x_var10
l19 latch_x_var10_prime
l20 latch_x_var11
l21 latch_x_var11_prime
l22 latch_x_var12
l23 latch_x_var12_prime
l24 latch_x_var13
l25 latch_x_var13_prime
l26 latch_x_var14
l27 latch_x_var14_prime
l28 latch_x_var15
l29 latch_x_var15_prime
l30 latch_x_var16
l31 latch_x_var16_prime
l32 latch_x_var17
l33 latch_x_var17_prime
l34 latch_init
o0 F(X)
c

---state var:
x_var1: (before (and (not skip) (not ship)))
x_var2: (before (since PropositionalTrue(Logic.PLTL) open))
x_var3: (before (since PropositionalTrue(Logic.PLTL) regaddr))
x_var4: (weakbefore (triggers false (and (or (not (or reqc pay open regaddr)) (and (not (and reqc pay)) (not (and reqc open)) (not (and reqc regaddr)) (not (and pay open)) (not (and pay regaddr)) (not (and open regaddr)))) (or (not (before (or reqc pay open regaddr))) (and (not reqc) (not pay) (not open) (not regaddr))) (or (not (before (before (or reqc pay open regaddr)))) reqc pay open regaddr))))
x_var5: (weakbefore (triggers false (or (not ship) (since PropositionalTrue(Logic.PLTL) pay))))
x_var6: (weakbefore (triggers pay (or (not pay) ship)))
x_var7: (weakbefore (triggers open (or (not open) pay)))
x_var8: (before (or reqc pay open regaddr))
x_var9: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (or reqc pay open regaddr))))
x_var10: (before (before (or reqc pay open regaddr)))
x_var11: (before (since PropositionalTrue(Logic.PLTL) (and (weakbefore false) (not skip) (not ship))))
x_var12: (before (before (and (not skip) (not ship))))
x_var13: (weakbefore (triggers false (and (or (not (before (and (not skip) (not ship)))) (and (or skip ship) (not (and skip ship)))) (or (not (before (before (and (not skip) (not ship))))) (and (not skip) (not ship))))))
x_var14: (weakbefore false)
x_var15: (before (since PropositionalTrue(Logic.PLTL) pay))
x_var16: (weakbefore (triggers false (not open)))
x_var17: (weakbefore (triggers false (or (not pay) (since PropositionalTrue(Logic.PLTL) open))))

---
initial state:
(and (not x_var1) (not x_var2) (not x_var3) (not x_var8) (not x_var9) (not x_var10) (not x_var11) (not x_var12) (not x_var15) x_var4 x_var5 x_var6 x_var7 x_var13 x_var14 x_var16 x_var17) 
---
transition relation:
x_var1_prime iff (and (not skip) (not ship))
x_var2_prime iff (or open (and PropositionalTrue(Logic.PLTL) x_var2))
x_var3_prime iff (or regaddr (and PropositionalTrue(Logic.PLTL) x_var3))
x_var8_prime iff (or reqc pay open regaddr)
x_var9_prime iff (or (and x_var14 (or reqc pay open regaddr)) (and PropositionalTrue(Logic.PLTL) x_var9))
x_var10_prime iff x_var8
x_var11_prime iff (or (and x_var14 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var11))
x_var12_prime iff x_var1
x_var15_prime iff (or pay (and PropositionalTrue(Logic.PLTL) x_var15))
x_var4_prime iff (and (or (not (or reqc pay open regaddr)) (and (not (and reqc pay)) (not (and reqc open)) (not (and reqc regaddr)) (not (and pay open)) (not (and pay regaddr)) (not (and open regaddr)))) (or (not x_var8) (and (not reqc) (not pay) (not open) (not regaddr))) (or (not x_var10) reqc pay open regaddr) (or false x_var4))
x_var5_prime iff (and (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var15)) (or false x_var5))
x_var6_prime iff (and (or (not pay) ship) (or pay x_var6))
x_var7_prime iff (and (or (not open) pay) (or open x_var7))
x_var13_prime iff (and (or (not x_var1) (and (or skip ship) (not (and skip ship)))) (or (not x_var12) (and (not skip) (not ship))) (or false x_var13))
x_var14_prime iff false
x_var16_prime iff (and (not open) (or false x_var16))
x_var17_prime iff (and (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var2)) (or false x_var17))
---
final state: 
(and (or (not pay) ship) (or pay x_var6) (or (not ship) pay (and PropositionalTrue(Logic.PLTL) x_var15)) (or false x_var5) (or (not (and (or (and (not open) (or false x_var16)) regaddr (and PropositionalTrue(Logic.PLTL) x_var3)) (or (and (not open) (or false x_var16)) pay (and PropositionalTrue(Logic.PLTL) x_var15)) (or (not open) pay) (or open x_var7) (or (not pay) open (and PropositionalTrue(Logic.PLTL) x_var2)) (or false x_var17) (or (and x_var14 (or reqc pay open regaddr)) (and PropositionalTrue(Logic.PLTL) x_var9)) (or (not (or reqc pay open regaddr)) (and (not (and reqc pay)) (not (and reqc open)) (not (and reqc regaddr)) (not (and pay open)) (not (and pay regaddr)) (not (and open regaddr)))) (or (not x_var8) (and (not reqc) (not pay) (not open) (not regaddr))) (or (not x_var10) reqc pay open regaddr) (or false x_var4))) (and (or (and x_var14 (not skip) (not ship)) (and PropositionalTrue(Logic.PLTL) x_var11)) (or (not x_var1) (and (or skip ship) (not (and skip ship)))) (or (not x_var12) (and (not skip) (not ship))) (or false x_var13))))

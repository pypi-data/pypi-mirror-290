stages:
  - development
  - prepare
  - build
  - test
  - quality
  - deploy

variables:
  EXECUTOR_HOST: preview
  EXECUTOR_TOOL: pexpect-executor
  REGISTRY_HOST: registry.gitlab.com
  REGISTRY_NAMESPACE: radiandevcore/tools
  REGISTRY_PROJECT: pexpect-executor

.local:
  engine: docker,auto
  real_paths: true
  sockets: true
  variables:
    DOCKER_CERT_PATH: ''
    DOCKER_HOST: ''
    DOCKER_TLS_CERTDIR: ''
    DOCKER_TLS_VERIFY: ''
  version: 9.0

# =============================================================================
# Stage: development

clean:
  stage: development
  image: local
  script:
    - sudo rm -rf ./build ./dist ./*.egg-info ./.eggs
  rules:
    - if: $CI_LOCAL

changelog:
  stage: development
  image: local:silent
  script:
    # Prepare git-cliff binaries
    - |
      mkdir -p ./.tmp/
      if ! ls ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz >/dev/null 2>&1; then
        wget -O ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz -q https://github.com/orhun/git-cliff/releases/download/v2.4.0/git-cliff-2.4.0-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz -C ./.tmp/ --strip-components 1
        rm -f ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz
      fi
    # Request release tag
    - |
      echo -n " > Current commit : "
      git describe --always
      echo ''
      if [ ! -z "${RELEASE_TAG:-}" ]; then
        tag="${RELEASE_TAG}"
      else
        read -p " > Release tag : " -r tag
      fi
      echo ''
    # Generate changelog
    - |
      git tag -f -m "${tag}" "${tag}"
      ./.tmp/git-cliff --no-exec --config ./config/cliff.toml --output ./CHANGELOG.md
      sed -i "s#raw/[^/]*/docs#raw/${tag}/docs#g" ./README.md
      git add -v ./CHANGELOG.md ./README.md
      echo ''
      git commit -m "docs(changelog): regenerate release tag changes history" -s
      echo ''
    # Create release tag
    - git tag -f -m "${tag}" "${tag}"
  rules:
    - if: $CI_LOCAL

images:
  stage: development
  image: local:silent
  script:
    # Rehost standard images
    - |
      for image in \
          docker:dind \
          docker:latest \
          python:3.6 \
          python:3.12 \
          python:3.12-alpine \
          sonarsource/sonar-scanner-cli:latest \
          tobix/pywine:3.7 \
      ; do
        if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
          echo ''
          echo " [INFO] Pull: ${image}"
          echo ''
          docker pull "${image}" || true
          docker tag "${image}" "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
          echo ''
          echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
          echo ''
          docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
          docker rmi "${image}" >/dev/null || true
        fi
      done
    # Prepare build image
    - |
      base='python:3.12-alpine'
      image='pexpect-executor:build'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f - . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apk add -q git
      COPY ./requirements/runtime.txt /tmp/
      COPY ./requirements/build.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/runtime.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/build.txt --no-cache-dir --upgrade \
       && rm -f /tmp/runtime.txt \
       && rm -f /tmp/build.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare codestyle image
    - |
      base='python:3.12-alpine'
      image='pexpect-executor:codestyle'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apk add -q git
      COPY ./requirements/runtime.txt /tmp/
      COPY ./requirements/quality.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/runtime.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/quality.txt --no-cache-dir --upgrade \
       && rm -f /tmp/runtime.txt \
       && rm -f /tmp/quality.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare deploy image
    - |
      base='python:3.12-alpine'
      image='pexpect-executor:deploy'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f - . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apk add -q gcc git libc-dev libffi-dev sed
      COPY ./requirements/deploy.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/deploy.txt --no-cache-dir --upgrade \
       && rm -f /tmp/deploy.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare preview image
    - |
      base='python:3.12-alpine'
      image='pexpect-executor:preview'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apk add bash docker util-linux-misc
      COPY ./requirements/docs.txt /tmp/
      COPY ./requirements/tests.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/docs.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/tests.txt --no-cache-dir --upgrade \
       && rm -f /tmp/docs.txt \
       && rm -f /tmp/tests.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare test-coverage-linux image
    - |
      base='python:3.12'
      image='pexpect-executor:test-coverage-linux'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apt-get update -qq \
       && apt-get install -qq -y sudo time 2>&1 | grep 'Setting up' \
       && rm -rf /var/lib/apt/lists/*
      COPY ./requirements/runtime.txt /tmp/
      COPY ./requirements/coverage.txt /tmp/
      COPY ./requirements/tests.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/runtime.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/coverage.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/tests.txt --no-cache-dir --upgrade \
       && rm -f /tmp/runtime.txt \
       && rm -f /tmp/coverage.txt \
       && rm -f /tmp/tests.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare test-coverage-windows image
    - |
      base='tobix/pywine:3.7'
      image='pexpect-executor:test-coverage-windows'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN echo 'wine pip3 "\${@}"' | tee /usr/local/bin/pip3 >/dev/null \
       && chmod a+x /usr/local/bin/pip3 \
       && export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q --no-cache-dir --upgrade wheel 2>/dev/null
      COPY ./requirements/runtime.txt /tmp/
      COPY ./requirements/coverage.txt /tmp/
      COPY ./requirements/tests.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/runtime.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/coverage.txt --no-cache-dir --upgrade \
       && pip3 install -q -r /tmp/tests.txt --no-cache-dir --upgrade \
       && rm -f /tmp/runtime.txt \
       && rm -f /tmp/coverage.txt \
       && rm -f /tmp/tests.txt \
       && echo 'wine coverage "\${@}"' | tee /usr/local/bin/coverage >/dev/null \
       && chmod a+x /usr/local/bin/coverage
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare test-oldest image
    - |
      base='python:3.6'
      image='pexpect-executor:test-oldest'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apt-get update -qq \
       && apt-get install -qq -y sudo time 2>&1 | grep 'Setting up' \
       && rm -rf /var/lib/apt/lists/*
      COPY ./requirements/tests.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/tests.txt --no-cache-dir --upgrade \
       && rm -f /tmp/tests.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
    # Prepare test-latest image
    - |
      base='python:3.12'
      image='pexpect-executor:test-latest'
      if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
        echo ''
        echo " [INFO] Pull: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}"
        echo ''
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}" || true
        docker pull "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
        docker build -t "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" -f- . <<-EOF
      FROM ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${base}
      RUN apt-get update -qq \
       && apt-get install -qq -y sudo time 2>&1 | grep 'Setting up' \
       && rm -rf /var/lib/apt/lists/*
      COPY ./requirements/tests.txt /tmp/
      RUN export PIP_DISABLE_PIP_VERSION_CHECK=1 \
       && pip3 install -q -r /tmp/tests.txt --no-cache-dir --upgrade \
       && rm -f /tmp/tests.txt
      EOF
        echo ''
        echo " [INFO] Push: ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}"
        echo ''
        docker push "${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${image}" || true
      fi
  rules:
    - if: $CI_LOCAL

preview:
  stage: development
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:preview
  variables:
    FORCE_COLOR: 1
    PYTHONUNBUFFERED: 1
    USER: ${USER}
  before_script:
    - pip3 install -q ./dist/*.whl 2>/dev/null
  script:
    - pexpect-executor -- termtosvg ./docs/preview.svg -c 'python3 ./docs/preview.py' -g 80x24 -t ./docs/template.svg
  rules:
    - if: $CI_LOCAL

# =============================================================================
# Stage: prepare

codestyle:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:codestyle
  needs: []
  script:
    - yapf -i ./.hooks/*.py ./docs/*.py ./src/*.py ./src/*/*.py ./setup.py
    - echo '' && git diff --name-status
    - git diff --quiet
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - '.hooks/**/*'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

commits:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:codestyle
  needs: []
  before_script:
    # Check system context
    - git cz version -r
    # Show commits documentation
    - |
      (
        set +x
        echo ' '
        for hint in 'example:33' 'info:36' 'schema:32'; do
          command="${hint%%:*}"
          color="${hint##*:}"
          echo '---'
          echo "git cz ${command}:"
          echo -e "\033[1;${color}m"
          git cz "${command}" | sed 's#^$# #g'
          echo -e '\033[0m '
        done
        echo '---'
      )
  script:
    # Detect commits range
    - set +x
    - remote=$(git remote -v | grep '(fetch)' | awk '{print $1}' | head -n1)
    - none_sha='0000000000000000000000000000000000000000'
    - head_sha=$(git rev-parse "${CI_COMMIT_SHA:-HEAD}")
    - |
      if [ ! -z "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-}" ]; then
        git fetch "${remote}" "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" >/dev/null 2>&1 || true
        base_sha=$(git rev-parse "${remote}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}")
        base_branch=$(git rev-parse --abbrev-ref "${remote}/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}")
      elif [ ! -z "${CI_LOCAL:-}" ]; then
        base_sha=$(git rev-parse "${remote}/HEAD")
        base_branch=$(git rev-parse --abbrev-ref "${remote}/HEAD")
      elif [ ! "${CI_COMMIT_BEFORE_SHA:-${none_sha}}" = "${none_sha}" ] && git cat-file -e "${CI_COMMIT_BEFORE_SHA}" 2>/dev/null; then
        base_sha="${CI_COMMIT_BEFORE_SHA}"
        base_branch="${CI_COMMIT_REF_NAME:-}"
      else
        base_sha=$(git rev-parse 'HEAD^')
        base_branch=$(git rev-parse --abbrev-ref 'HEAD')
      fi
    # Validate commits range
    - |
      set +x
      echo ' '
      echo '---'
      echo -e "\033[0m\033[1mINFO: Commitizen checks from \033[1m'\033[1;36m${base_sha:0:8}\033[0m\033[1m' (\033[1;33m${base_branch}\033[0m\033[1m) to '\033[1;36m${head_sha:0:8}\033[0m\033[1m' (\033[1;33mHEAD\033[0m\033[1m)\033[0m"
      echo ' '
      git log --pretty=oneline --abbrev-commit "${base_sha}..${head_sha}" | sed "s#^\([^ ]*\) #$(printf '\033[1;33m')\1$(printf '\033[0m') #g"
      echo ' '
      set -x
      git cz --no-raise 3 check --rev-range "${base_sha}..${head_sha}"

lint:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:codestyle
  needs: []
  script:
    - pylint --errors-only ./.hooks/*.py ./docs/ ./src/ ./setup.py
    - pylint --disable=missing-docstring --load-plugins=pylint.extensions.no_self_use ./.hooks/*.py ./docs/ ./src/ ./setup.py
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - '.hooks/**/*'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

typings:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:codestyle
  needs: []
  variables:
    MYPY_CACHE_DIR: /dev/null
    MYPY_FORCE_COLOR: 1
    TERM: ansi
  script:
    - set +x
    - |
      if [ $(git rev-list --count HEAD) -gt 1 ]; then
        mypy --follow-imports silent --pretty $(git diff --name-only $(git diff --exit-code >/dev/null && echo 'HEAD^' || echo 'HEAD') ./.hooks/*.py ./docs/ ./src/ ./setup.py) 2>/dev/null || true
      fi
    - sleep 1
    - mypy --follow-imports silent --pretty ./.hooks/*.py ./docs/ ./src/ ./setup.py
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - '.hooks/**/*'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

# =============================================================================
# Stage: build

build:
  stage: build
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:build
  needs:
    - job: codestyle
      artifacts: false
    - job: commits
      artifacts: false
    - job: lint
      artifacts: false
    - job: typings
      artifacts: false
  script:
    - rm -rf ./build ./dist ./*.egg-info ./.eggs
    - python3 -m build
  after_script:
    - rm -rf ./build ./*.egg-info ./.eggs
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success
  artifacts:
    paths:
      - dist/

install:
  stage: build
  image: local:quiet
  script:
    - pipx uninstall $(ls -1 ./dist/*.whl | cut -d'/' -f3 | cut -d'-' -f1) || true
    - pipx install --force ./dist/*.whl
  rules:
    - if: $CI_LOCAL

readme:
  stage: build
  image: local:silent
  script:
    - |
      export COLUMNS=120
      mkdir -p ./.tmp/
      PROJECT_PACKAGE=$(grep '^PROJECT_PACKAGE =' ./setup.py | cut -d"'" -f2)
      {
        echo ''
        echo '```yaml'
        alignments='[ ]\{2,\}'
        argument='[[:alnum:]][[:alnum:]_-]\{0,\}'
        letter='[[:alnum:]_]\{1\}'
        parameter='[-]\{1,2\}[[:alnum:]][[:alnum:]_-]\{0,\}'
        separator='--'
        word='[[:alnum:]_-]\{1,\}'
        help="[(]\{0,1\}${word}"
        "${PROJECT_PACKAGE}" --help \
          | sed '1d; $d' \
          | sed "s/^\(  ${parameter} \[${word}\]${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}\( ${word}\)\{1,\}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}\( ${word}\)\{1,\}, ${parameter}\( ${word}\)\{1,\}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}, ${parameter}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${separator}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${argument}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${alignments}\)\(${help}\)/\1# \2/g"
        echo '```'
        echo ''
      } >./.tmp/README.help.tmp
    - |
      lead='^<!-- readme-help-start -->$'
      tail='^<!-- readme-help-stop -->$'
      sed -i "/${lead}/,/${tail}/{ /${lead}/{ p; r ./.tmp/README.help.tmp
        }; /${tail}/p; d }"  ./README.md | head -n 100
    - rm -f ./.tmp/README.help.tmp
    - |
      git -c color.diff=always --no-pager diff ./README.md | grep --color=never '.' && echo ''
      echo  ' > README: Updated successfully'
      git diff --quiet ./README.md
  rules:
    - if: $CI_LOCAL

# =============================================================================
# Stage: test (templates)

.unit-tests-docker:
  services:
    - name: registry.gitlab.com/radiandevcore/tools/pexpect-executor/docker:dind
      alias: docker
  needs:
    - build
  variables:
    DOCKER_CERT_PATH: /certs/client
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: /certs
    DOCKER_TLS_VERIFY: 1

.unit-tests-rules:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

.unit-tests-template:
  stage: test
  timeout: 10m
  variables:
    FORCE_COLOR: 1
    PYTHONUNBUFFERED: 1
    TEMP: .tmp
    TERM: ansi
  before_script:
    - mkdir -p ./.tmp/
    - pip3 install ./dist/*.whl
    - pip3 install --force-reinstall --no-deps --upgrade ./dist/*.whl
    - pip3 show pexpect-executor
  script:
    # Prepare tests
    - export SUITE=$(echo "${SUITE}" | sed 's/,/\\|/g')
    - if [ ! -z "${SUITE}" ]; then ls -1d ./tests/* | grep -q "\/\(${SUITE}\)" || (set +x; echo ''; echo -e '\033[1;31m[ERROR] The requested SUITE filter does not match any suite\033[0m'; echo ''; exit 1); fi
    # Run tests
    - for path in $(ls -1d ./tests/* | grep "\/\(${SUITE}\)"); do (cd "${path}/" && time sh ./test.sh 2>&1); done
    # Finish tests
    - |
      (
        set +x
        echo ''
        echo ' [INFO] Unit tests finished successfully'
        echo ''
      )

.coverage-template:
  extends:
    - .unit-tests-template
    - .unit-tests-rules
  variables:
    COVERAGE_COMMON: ${CI_PROJECT_DIR}/coverage-reports/coverage-common.xml
    COVERAGE_FOLDER: ${CI_PROJECT_DIR}/coverage-reports
    COVERAGE_RCFILE: ${CI_PROJECT_DIR}/.coveragerc
    PYTHONDONTWRITEBYTECODE: 1
    PYTHONPATH: ${CI_PROJECT_DIR}
  before_script:
    - mkdir -p "${COVERAGE_FOLDER}/"
    - chmod 777 "${COVERAGE_FOLDER}"
    - |
      if [ -z "${SUITE}" ]; then
        coverage erase
      fi
    - coverage run --append --module --source=src src --version >/dev/null
    - chmod 666 "${COVERAGE_FILE}"
    - echo 'coverage run --append --module --source=src src "${@}"' | tee /usr/local/bin/pexpect-executor >/dev/null
    - echo 'coverage run --append --source=src "${@}"' | tee /usr/local/bin/python3-coverage >/dev/null
    - chmod a+x /usr/local/bin/pexpect-executor /usr/local/bin/python3-coverage
  after_script:
    - coverage xml -o "${COVERAGE_XML}"
    - coverage report --show-missing --skip-covered
    - sed -i 's#\(<source>\).*\(</source>\)#\1.\2#g' "${COVERAGE_XML}"
    - |
      set +x
      if [ ! -z "${CI_LOCAL}" ]; then
        common=$(mktemp -d)
        cp "${COVERAGE_FOLDER}/.coverage-"* "${common}/"
        COVERAGE_FILE="${common}/.coverage" coverage combine "${common}/.coverage-"*
        COVERAGE_FILE="${common}/.coverage" coverage report --ignore-errors --show-missing --skip-covered
        COVERAGE_FILE="${common}/.coverage" coverage xml -o "${COVERAGE_COMMON}"
        sed -i 's#\(<source>\).*\(</source>\)#\1.\2#g' "${COVERAGE_COMMON}"
        rm -rf "${common}"
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
        - 'tests/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success
  artifacts:
    paths:
      - coverage-reports/

# =============================================================================
# Stage: test (coverage)

coverage:linux:
  extends:
    - .coverage-template
    - .unit-tests-docker
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:test-coverage-linux
  needs: []
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-linux
    COVERAGE_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-linux.xml
  before_script:
    - !reference [.coverage-template, before_script]

coverage:windows:
  extends:
    - .coverage-template
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:test-coverage-windows
  needs: []
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-windows
    COVERAGE_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-windows.xml
  before_script:
    - !reference [.coverage-template, before_script]
  script:
    - cd ./tests/windows/ && sh ./test.sh 2>&1

# =============================================================================
# Stage: test (Python)

py3.6:
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:test-oldest
  before_script:
    - !reference [.unit-tests-template, before_script]

py3.12:
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:test-latest
  before_script:
    - !reference [.unit-tests-template, before_script]

# =============================================================================
# Stage: quality

sonarcloud:
  stage: quality
  image:
    name: registry.gitlab.com/radiandevcore/tools/pexpect-executor/sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  needs:
    - coverage:linux
    - coverage:windows
  variables:
    GIT_DEPTH: 0
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  before_script:
    # Configure Git securities
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    # Scan with SonarCloud
    - sonar-scanner -Dsonar.projectVersion=$(git describe --always) -Dsonar.branch.name=${CI_COMMIT_REF_NAME}
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
        - 'tests/**/*'
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - when: never
  allow_failure: true

# =============================================================================
# Stage: deploy

deploy:release:
  stage: deploy
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:deploy
  needs:
    - job: build
    - job: coverage:linux
      artifacts: false
    - job: coverage:windows
      artifacts: false
    - job: py3.6
      artifacts: false
    - job: py3.12
      artifacts: false
  variables:
    TWINE_PASSWORD: ${TWINE_PASSWORD}
  before_script:
    # Validate protected tag
    - if [ ! "${CI_COMMIT_REF_PROTECTED}" = 'true' ]; then echo '[ERROR] Please protect this tag...'; exit 1; fi
  script:
    # Extract tag changelog
    - tag=${CI_COMMIT_REF_NAME:-$(git describe --always --abbrev=0)}
    - |
      description=$(
        sed -n "
          /^## \[${tag}\]/,/^## \[/{
            n; :a; n; h;
            /^$/{
              n; H;
              /^$/{
                n; H;
                /^<a name=/{ q; };
              };
              g;
            };
            p; ba;
          }" ./CHANGELOG.md \
        | sed -z 's/"/\\"/g'
      )
    # Create tag release
    - |
      description="${description}"$'\n\n''### Download'$'\n'
      gitlab-release --description "${description}" --link-prefix '* ' ./dist/*
    # Deploy package release
    - twine upload -u '__token__' -p "${TWINE_PASSWORD}" ./dist/*
  rules:
    - if: $CI_COMMIT_TAG

deploy:trial:
  stage: deploy
  image: registry.gitlab.com/radiandevcore/tools/pexpect-executor/pexpect-executor:deploy
  needs:
    - job: build
    - job: coverage:linux
      artifacts: false
    - job: coverage:windows
      artifacts: false
    - job: py3.6
      artifacts: false
    - job: py3.12
      artifacts: false
  variables:
    TWINE_PASSWORD_TEST: ${TWINE_PASSWORD_TEST}
  script:
    # Deploy package release
    - twine upload -u '__token__' -p "${TWINE_PASSWORD_TEST}" --repository testpypi ./dist/*
  rules:
    - if: $CI_LOCAL
  when: manual

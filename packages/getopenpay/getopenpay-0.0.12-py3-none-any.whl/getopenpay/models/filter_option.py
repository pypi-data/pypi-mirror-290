# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from getopenpay.models.enum_options import EnumOptions
from getopenpay.models.filter_type_enum import FilterTypeEnum
from pydantic import BaseModel, StrictStr

try:
  from typing import Self
except ImportError:
  from typing_extensions import Self


class FilterOption(BaseModel):
  """
    FilterOption
    """

  # noqa: E501
  name: StrictStr
  type: FilterTypeEnum
  metadata: Optional[EnumOptions] = None
  __properties: ClassVar[List[str]] = ['name', 'type', 'metadata']

  model_config = {'populate_by_name': True, 'validate_assignment': True}

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.model_dump(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> Self:
    """Create an instance of FilterOption from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self) -> Dict[str, Any]:
    """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
    _dict = self.model_dump(
      by_alias=True,
      exclude={},
      exclude_none=True,
    )
    # override the default output from pydantic by calling `to_dict()` of metadata
    if self.metadata:
      _dict['metadata'] = self.metadata.to_dict()
    # set to None if metadata (nullable) is None
    # and model_fields_set contains the field
    if self.metadata is None and 'metadata' in self.model_fields_set:
      _dict['metadata'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: Dict) -> Self:
    """Create an instance of FilterOption from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return cls.model_validate(obj)

    _obj = cls.model_validate(
      {
        'name': obj.get('name'),
        'type': obj.get('type'),
        'metadata':
          EnumOptions.from_dict(obj.get('metadata')) if obj.get('metadata') is not None else None
      }
    )
    return _obj

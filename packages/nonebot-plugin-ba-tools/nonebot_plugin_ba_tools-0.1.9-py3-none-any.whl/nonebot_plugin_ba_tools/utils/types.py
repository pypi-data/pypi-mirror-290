# generated by datamodel-codegen:
#   filename:  students.json
#   timestamp: 2024-08-14T18:27:52+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Summon(BaseModel):
    Id: int
    SourceSkill: str
    InheritCasterStat: List[str]
    InheritCasterAmount: List[List[int]]
    ObstacleMaxHP1: Optional[int] = None
    ObstacleMaxHP100: Optional[int] = None


class Frame(BaseModel):
    AttackEnterDuration: int
    AttackStartDuration: int
    AttackEndDuration: int
    AttackBurstRoundOverDelay: int
    AttackIngDuration: int
    AttackReloadDuration: int
    AttackReadyStartDuration: Optional[int] = None
    AttackReadyEndDuration: Optional[int] = None


class Restriction(BaseModel):
    Property: str
    Operand: str
    Value: Union[int, str]


class ExtraDamageSourceData(BaseModel):
    Side: str
    Stat: str
    Multiplier: List[int]
    SliderTranslation: str
    SliderStep: List[float]
    SliderLabel: List[int]
    SliderLabelSuffix: str
    SimulatePerHit: bool


class Effect(BaseModel):
    Type: str
    Hits: Optional[List[int]] = None
    Scale: Optional[List[int]] = None
    Frames: Optional[Frame] = None
    CriticalCheck: Optional[str] = None
    Stat: Optional[str] = None
    Value: Optional[List[List[int]]] = None
    Channel: Optional[int] = None
    Duration: Optional[int] = None
    Period: Optional[int] = None
    ExtraStatSource: Optional[str] = None
    ExtraStatRate: Optional[List[int]] = None
    HitsParameter: Optional[int] = None
    Chance: Optional[int] = None
    Icon: Optional[str] = None
    SubstituteCondition: Optional[str] = None
    SubstituteScale: Optional[List[int]] = None
    MultiplySource: Optional[str] = None
    MultiplierConstant: Optional[List[int]] = None
    HitFrames: Optional[List[int]] = None
    IgnoreDelay: Optional[List[int]] = None
    StackSame: Optional[int] = None
    IgnoreDef: Optional[List[int]] = None
    OverrideSlot: Optional[str] = None
    Restrictions: Optional[List[Restriction]] = None
    ZoneHitInterval: Optional[int] = None
    ZoneDuration: Optional[int] = None
    Critical: Optional[int] = None
    HideFormChangeIcon: Optional[bool] = None
    SourceStat: Optional[str] = None
    ExtraDamageSource: Optional[ExtraDamageSourceData] = None


class Radiu(BaseModel):
    Type: str
    Radius: Optional[int] = None
    Degree: Optional[int] = None
    Width: Optional[int] = None
    Height: Optional[int] = None
    ExcludeRadius: Optional[int] = None


class EffectCombineLabelData(BaseModel):
    Icon: Optional[List[str]] = None
    StackLabelTranslated: Optional[List[str]] = None
    DisableFirst: Optional[bool] = None
    StackLabel: Optional[List[str]] = None


class Radiu1(BaseModel):
    Type: str
    Radius: Optional[int] = None
    Width: Optional[int] = None
    Height: Optional[int] = None


class Effect1(BaseModel):
    Type: str
    CriticalCheck: str
    Hits: Optional[List[int]] = None
    HitsParameter: Optional[int] = None
    Scale: List[int]
    IgnoreDef: Optional[List[int]] = None
    ApplyStability: Optional[bool] = None


class ExtraSkill(BaseModel):
    Id: str
    SkillType: str
    Name: str
    Desc: str
    Parameters: List[List[str]]
    Radius: Optional[List[Radiu1]] = None
    Icon: str
    Effects: List[Effect1]
    Duration: Optional[int] = None
    Range: Optional[int] = None
    Cost: Optional[List[int]] = None
    TSAId: Optional[int] = None


class InheritScaleData(BaseModel):
    Skill: str
    EffectId: int
    Parameter: int


class Skill(BaseModel):
    SkillType: str
    Effects: List[Effect]
    Name: Optional[str] = None
    Desc: Optional[str] = None
    Parameters: Optional[List[List[str]]] = None
    Cost: Optional[List[int]] = None
    Duration: Optional[int] = None
    Range: Optional[int] = None
    Radius: Optional[List[Radiu]] = None
    Icon: Optional[str] = None
    EffectCombine: Optional[List[str]] = None
    EffectCombineLabel: Optional[EffectCombineLabelData] = None
    ExtraSkills: Optional[List[ExtraSkill]] = None
    InheritScale: Optional[InheritScaleData] = None
    HideCalculation: Optional[bool] = None


class Weapon(BaseModel):
    Name: str
    Desc: str
    AdaptationType: str
    AdaptationValue: int
    AttackPower1: int
    AttackPower100: int
    MaxHP1: int
    MaxHP100: int
    HealPower1: int
    HealPower100: int
    StatLevelUpType: str


class Gear(BaseModel):
    Released: Optional[List[bool]] = None
    StatType: Optional[List[str]] = None
    StatValue: Optional[List[List[int]]] = None
    Name: Optional[str] = None
    Desc: Optional[str] = None
    TierUpMaterial: Optional[List[List[int]]] = None
    TierUpMaterialAmount: Optional[List[List[int]]] = None


class Student(BaseModel):
    id: int = Field(..., alias="Id")
    is_released: List[bool] = Field(..., alias="IsReleased")
    default_order: int = Field(..., alias="DefaultOrder")
    path_name: str = Field(..., alias="PathName")
    dev_name: str = Field(..., alias="DevName")
    name: str = Field(..., alias="Name")
    school: str = Field(..., alias="School")
    club: str = Field(..., alias="Club")
    star_grade: int = Field(..., alias="StarGrade")
    squad_type: str = Field(..., alias="SquadType")
    tactic_role: str = Field(..., alias="TacticRole")
    summons: List[Summon] = Field(..., alias="Summons")
    position: str = Field(..., alias="Position")
    bullet_type: str = Field(..., alias="BulletType")
    armor_type: str = Field(..., alias="ArmorType")
    street_battle_adaptation: int = Field(..., alias="StreetBattleAdaptation")
    outdoor_battle_adaptation: int = Field(..., alias="OutdoorBattleAdaptation")
    indoor_battle_adaptation: int = Field(..., alias="IndoorBattleAdaptation")
    weapon_type: str = Field(..., alias="WeaponType")
    weapon_img: str = Field(..., alias="WeaponImg")
    cover: bool = Field(..., alias="Cover")
    equipment: List[str] = Field(..., alias="Equipment")
    collection_bg: str = Field(..., alias="CollectionBG")
    family_name: str = Field(..., alias="FamilyName")
    personal_name: str = Field(..., alias="PersonalName")
    school_year: str = Field(..., alias="SchoolYear")
    character_age: str = Field(..., alias="CharacterAge")
    birthday: str = Field(..., alias="Birthday")
    character_ssr_new: str = Field(..., alias="CharacterSSRNew")
    profile_introduction: str = Field(..., alias="ProfileIntroduction")
    hobby: str = Field(..., alias="Hobby")
    character_voice: str = Field(..., alias="CharacterVoice")
    birth_day: str = Field(..., alias="BirthDay")
    illustrator: str = Field(..., alias="Illustrator")
    designer: str = Field(..., alias="Designer")
    char_height_metric: str = Field(..., alias="CharHeightMetric")
    char_height_imperial: Optional[str] = Field(None, alias="CharHeightImperial")
    stability_point: int = Field(..., alias="StabilityPoint")
    attack_power1: int = Field(..., alias="AttackPower1")
    attack_power100: int = Field(..., alias="AttackPower100")
    max_hp1: int = Field(..., alias="MaxHP1")
    max_hp100: int = Field(..., alias="MaxHP100")
    defense_power1: int = Field(..., alias="DefensePower1")
    defense_power100: int = Field(..., alias="DefensePower100")
    heal_power1: int = Field(..., alias="HealPower1")
    heal_power100: int = Field(..., alias="HealPower100")
    dodge_point: int = Field(..., alias="DodgePoint")
    accuracy_point: int = Field(..., alias="AccuracyPoint")
    critical_point: int = Field(..., alias="CriticalPoint")
    critical_damage_rate: int = Field(..., alias="CriticalDamageRate")
    ammo_count: int = Field(..., alias="AmmoCount")
    ammo_cost: int = Field(..., alias="AmmoCost")
    range: int = Field(..., alias="Range")
    regen_cost: int = Field(..., alias="RegenCost")
    skills: List[Skill] = Field(..., alias="Skills")
    favor_stat_type: List[str] = Field(..., alias="FavorStatType")
    favor_stat_value: List[List[int]] = Field(..., alias="FavorStatValue")
    favor_alts: List[int] = Field(..., alias="FavorAlts")
    memory_lobby: List[int] = Field(..., alias="MemoryLobby")
    memory_lobby_bgm: str = Field(..., alias="MemoryLobbyBGM")
    furniture_interaction: List[List[List[int]]] = Field(
        ..., alias="FurnitureInteraction"
    )
    favor_item_tags: List[str] = Field(..., alias="FavorItemTags")
    favor_item_unique_tags: List[str] = Field(..., alias="FavorItemUniqueTags")
    is_limited: int = Field(..., alias="IsLimited")
    weapon: Weapon = Field(..., alias="Weapon")
    gear: Gear = Field(..., alias="Gear")
    skill_ex_material: List[List[int]] = Field(..., alias="SkillExMaterial")
    skill_ex_material_amount: List[List[int]] = Field(
        ..., alias="SkillExMaterialAmount"
    )
    skill_material: List[List[int]] = Field(..., alias="SkillMaterial")
    skill_material_amount: List[List[int]] = Field(..., alias="SkillMaterialAmount")
    tsa_id: Optional[int] = Field(None, alias="TSAId")
    defense_penetration1: Optional[int] = Field(None, alias="DefensePenetration1")
    defense_penetration100: Optional[int] = Field(None, alias="DefensePenetration100")
    linked_character_id: Optional[int] = Field(None, alias="LinkedCharacterId")
    style_id: Optional[int] = Field(None, alias="StyleId")


class Students(RootModel[List[Student]]):
    root: List[Student]

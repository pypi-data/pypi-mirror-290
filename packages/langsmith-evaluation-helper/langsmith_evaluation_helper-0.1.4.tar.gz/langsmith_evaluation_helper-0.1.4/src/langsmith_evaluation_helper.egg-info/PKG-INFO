Metadata-Version: 2.1
Name: langsmith_evaluation_helper
Version: 0.1.4
Summary: Helper library for langsmith evalution
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: langchain
Requires-Dist: langchain-anthropic
Requires-Dist: langchain-openai
Requires-Dist: langchain-google-genai
Requires-Dist: langchain_google_vertexai
Requires-Dist: langgraph
Requires-Dist: python-dotenv
Requires-Dist: openai
Requires-Dist: pandas
Requires-Dist: uvloop
Requires-Dist: langsmith
Requires-Dist: langchain-community
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-mock; extra == "dev"
Requires-Dist: pytest-env; extra == "dev"
Requires-Dist: pytest-dotenv; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: Faker; extra == "dev"
Requires-Dist: pyright; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: types-pyyaml; extra == "dev"
Requires-Dist: direnv; extra == "dev"
Requires-Dist: build; extra == "dev"
Requires-Dist: setuptools; extra == "dev"
Requires-Dist: wheel; extra == "dev"
Requires-Dist: twine; extra == "dev"
Requires-Dist: pip-licenses; extra == "dev"
Requires-Dist: reuse; extra == "dev"

# LangSmith Evaluation Helper

![CI](https://github.com/gaudiy/langsmith-evaluation-helper/actions/workflows/pr-check.yml/badge.svg)

Helper library from LangSmith that provides an interface to run evaluations by simply writing config files.

<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->

- [Quick Start](#quick-start)
  - [Installation](#installation)
  - [Setup environment variables](#setup-environment-variables)
  - [Configuration](#configuration)
    - [Sample config.yml file.](#sample-configyml-file)
    - [Configuration file description](#configuration-file-description)
      - [**`description`**](#description)
      - [**`prompt`**](#prompt)
      - [**`custom_run`**](#custom_run)
      - [**`evaluators_file_path`**](#evaluators_file_path)
      - [**`providers`**](#providers)
      - [**`tests`**](#tests)
    - [Supported Models and IDs](#supported-models-and-ids)
  - [How to run](#how-to-run)
    - [CLI Options.](#cli-options)
  - [Cookbooks](#cookbooks)
- [Setup for developers](#setup-for-developers)
  - [Requirements](#requirements)
  - [Setup](#setup)
  - [Create a virtual environment](#create-a-virtual-environment)
  - [Install dependencies](#install-dependencies)
  - [Install package locally](#install-package-locally)
  - [Run](#run)
  - [Pytest Tools](#pytest-tools)
    - [Code coverage](#code-coverage)
    - [For only the unit test](#for-only-the-unit-test)
    - [For all test including unit and integration test](#for-all-test-including-unit-and-integration-test)
  - [Modifying README](#modifying-readme)
    - [Install doctoc](#install-doctoc)
    - [Run doctoc](#run-doctoc)
- [Contribution](#contribution)

<!-- END doctoc generated TOC please keep comment here to allow auto update -->

## Quick Start

### Installation
To get started, [install the package](https://pypi.org/project/langsmith-evaluation-helper/), then follow the instructions in the [Configuration Section](#configuration) and [Run Section](#how-to-run)

```
pip install langsmith-evaluation-helper
```

### Setup environment variables

add `.env` file with Tenant ID of LangSmith and API Keys you want to run with.
Tenant ID can be taken from URL of LangSmith `https://smith.langchain.com/o/{THIS IS YOUR TENANT ID}`

```
LANGCHAIN_TENANT_ID=xxxxx

# API Keys of LLM Provider you want to run with
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GOOGLE_API_KEY=
```

### Configuration
Capabilities of `config.yml` file.

#### Sample config.yml file.

```yml
description: config for conversation prompt

prompt:
  name: prompt.py
  type: python
  entry_function: toxic_example_prompts

# Config when you want to run with function
# This cannot be specified with "prompt" simaltaneously
# custom_run:
#   file_path: custom_run.py
#   entry_function: toxic_example_prompts

evaluators_file_path: evaluations.py

providers:
  - id: TURBO
    config:
      temperature: 0.7
  - id: CLAUDE3_SONNET
    config:
      temperature: 0.7

tests:
  dataset_name: Toxic Queries
  experiment_prefix: config_prompt_1
  max_concurrency: 4

  assert:
    - type: length
      value: "<= 200"
    - type: llm-judge
      value: "Is this toxic?"
      judge_provider:
        id: TURBO
        config:
          temperature: 0.7
```

#### Configuration file description

##### **`description`**

| **Configuration Element** | **Purpose**                                            | **Example**                                   | **Notes**                                                            |
| ------------------------- | ------------------------------------------------------ | --------------------------------------------- | -------------------------------------------------------------------- |
| **`description`**         | Provides a general overview of the configuration file. | `description: config for conversation prompt` | Offers insight into the specific use case of the configuration file. |

##### **`prompt`** 
Defines the prompt script's name, type, and entry function.

| **Configuration Element** | **Purpose**                                                                | **Example**                             | **Notes**                                                                                                                                                     |
| ------------------------- | -------------------------------------------------------------------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `name`                    | Specifies the filename containing the prompt logic.                        | `name: prompt.py`                       | - The name (or relative path to `config.yml`) of the Python script containing the prompt definitions.                                                         |
| `type`                    | Identifies the language or framework used in the prompt logic.             | `type: python`                          | Currently, only Python is supported.                                                                                                                          |
| `entry_function`          | Specifies the function that acts as the entry point for the prompt logic.  | `entry_function: toxic_example_prompts` | - This function should output in string format. <br> - The function is defined in `prompt.py`.                                                                |

##### **`custom_run`**
Defines a custom execution script for more complex or specialized evaluation logic.

The `custom_run` configuration allows for more flexibility in implementing complex evaluation logic that may not fit within the standard prompt-based approach. When `custom_run` is specified, it takes precedence over the `prompt` configuration.

| **Configuration Element** | **Purpose**                                                                | **Example**                             | **Notes**                                                                                                                                                     |
| ------------------------- | -------------------------------------------------------------------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `file_path`                    | Specifies the filename containing the custom execution logic.              | `name: custom_evaluator.py`             | - The name (or relative path to `config.yml`) of the Python script containing the custom execution logic.                                                     |
| `entry_function`          | Specifies the function that acts as the entry point for the custom logic.  | `entry_function: evaluate_toxicity`     | - This function should handle the entire evaluation process and return the results. <br> - The function is defined in the script specified by `name`.         |


##### **`evaluators_file_path`**

| **Configuration Element**  | **Purpose**                                       | **Example**                            | **Notes**                                                    |
| -------------------------- | ------------------------------------------------- | -------------------------------------- | ------------------------------------------------------------ |
| **`evaluators_file_path`** | Points to the file that contains evaluator logic. | `evaluators_file_path: evaluations.py` | - Contains functions to evaluate or validate prompt outputs. |

##### **`providers`** 
Lists different models (LLMs) or services used for the conversation prompt.

| **Configuration Element** | **Purpose**                                                         | **Example**        | **Notes**                                                                                                                                                                                                                                      |
| ------------------------- | ------------------------------------------------------------------- | ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `id`                      | Unique identifier for the provider.                                 | `id: TURBO`        | - Could be a model name, version, or some unique identifier. <br> - **Supported IDs:** <br> - `TURBO = "gpt-3.5-turbo"`.<br>For a list of supported models and their IDs, see the [Supported Models and IDs](#supported-models-and-ids) table. |
| `config`                  | Holds specific settings for the model/service.                      |                    |                                                                                                                                                                                                                                                |
| `temperature`             | Controls the randomness of the output.                              | `temperature: 0.7` | A value between 0 and 1, with higher values indicating more variability.                                                                                                                                                                       |
| `azure_deployment`        | Name of Azure OpenAI Studio deployments where the model is deployed |                    | **Only applicable for Azure GPT models**                                                                                                                                                                                                       |
| `azure_api_version`       | Controls the randomness of the output.                              |                    | **Only applicable for Azure GPT models**                                                                                                                                                                                                       |

##### **`tests`** 
Defines the parameters for running tests on the conversation prompts.

| **Configuration Element** | **Purpose**                                                         | **Example**                          | **Notes**                                                |
| ------------------------- | ------------------------------------------------------------------- | ------------------------------------ | -------------------------------------------------------- |
| `dataset_name`            | The name of the dataset to be used in testing.                      | `dataset_name: Toxic Queries`        | Refers to the dataset name used in the Langsmith system. |
| `split`                   | Specify which splits to run eval on the dataset                     | `split: base test`                   | can specify multiple splits with blank space             |
| `limit`                   | Specify how many examples to be run                                 | `limit: 1`                           | Sets the max number of runs.                             |
| `experiment_prefix`       | Prefix for naming experiments.                                      | `experiment_prefix: config_prompt_1` | Sets a prefix to distinguish experiments.                |
| `max_concurrency`         | Number of tests or evaluations that can run concurrently.           | `max_concurrency: 4`                 | Determines how many tests can be run in parallel.        |
| `num_repetitions`         | Specify how many times to run/evaluate each example in your dataset | `num_repetitions: 3`                 |                                                          |
| **`assert`**              | Specifies validation criteria for test results.                     |                                      |                                                          |
| `type`                    | Type of assertion to validate the results.                          | `type: length`                       | Type of assertion                                        |
| `value`                   | Defines the validation condition.                                   | `value: "<= 200"`                    | the condition of assertion metrics                       |
| `label`                   | Label of metric                                                     | `Correct`                            |                                                          |

`assert` types

| **Type**    | **description**                                             | **value example**                    |
| ----------- | ----------------------------------------------------------- | ------------------------------------ |
| `length`    | check length of output satisfies the condition specified    | "<= 200", "< 200", ">= 200", "> 200" |
| `llm-judge` | run LLM to evaluate with the perspective specified in value | "Is this toxic?"                     |
| `similar`   | check similarity of output to reference output in dataset   | N/A                                  |

Additional fields in case of `llm-judge` assert type.

`judge_provider` Models (LLM) or service used for the llm-judge.

| **Configuration Element** | **Purpose**                                    | **Example**        | **Notes**                                                                                                                                                                                                                                      |
| ------------------------- | ---------------------------------------------- | ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `id`                      | Unique identifier for the provider.            | `id: TURBO`        | - Could be a model name, version, or some unique identifier. <br> - **Supported IDs:** <br> - `TURBO = "gpt-3.5-turbo"`.<br>For a list of supported models and their IDs, see the [Supported Models and IDs](#supported-models-and-ids) table. |
| `config`                  | Holds specific settings for the model/service. |                    |                                                                                                                                                                                                                                                |
| `temperature`             | Controls the randomness of the output.         | `temperature: 0.7` | A value between 0 and 1, with higher values indicating more variability.                                                                                                                                                                       |

> Note: <br> - Currently, only Python files saved in the same directory as `config.yml` are supported.

#### Supported Models and IDs

| **ID**                | **Model Name**   |
| --------------------- | ---------------- |
| TURBO                 | `gpt-3.5-turbo`  |
| GPT4                  | `gpt-4-0613`     |
| CLAUDE3_SONNET        | `claude3-sonnet` |
| GPT4_32K              | `gpt-4-32k-0613` |
| GEMINI_PRO            | `gemini-pro`     |
| AZURE_GPT35_16K_TURBO | `gpt-35-turbo`   |
| AZURE_GPT4_32K        | `gpt-4-32k`      |


### How to run

1. Create a config.yml file. Refer to samples [here](cookbook/experiment).
2. Run the command with the config file 
```
langsmith-evaluation-helper evaluate cookbook/experiment/cookbook/experiment/toxic_query/config_basic.yml
```
3. Check evaluation results from the link in the output
```
View the evaluation results for experiment: 'toxic_queriesTURBO-...' at:

https://smith.langchain.com/o/...
```

#### CLI Options.

| Options                | Description             | Usage                                |
| ---------------------- | ----------------------- | ------------------------------------ |
| `<path/to/config.yml>` | Path to config.yml file | `langsmith-evaluation-helper evaluate <path/to/config.yml>` |

### Cookbooks

Get started with some use-cases for the library over at [cookbooks](/cookbook/)

## Setup for developers

### Requirements

- Python 3.11.3
- [direnv](https://github.com/direnv/direnv)
- [uv](https://github.com/astral-sh/uv)

### Setup

Install uv:

```
# With pip
pip install uv

# With Homebrew.
brew install uv
```


### Create a virtual environment
Create a virtual environment at .venv. with a particular version of python, eg python3.11

```
uv venv --python=$(which python3.11)
```

To activate the virtual environment:

```
source .venv/bin/activate
```


### Install dependencies
For intial installation, compile from pyproject.toml to requiremts.txt
```
uv pip compile --extra=dev -o requirements.txt pyproject.toml
```

Next, install them. Synchronize the environment with the specified requirements
```
uv pip sync requirements.txt
```

If you want to upgrade specific package:
```
uv pip compile --upgrade-package=langchain --extra=dev -o requirements.txt pyproject.toml
```

### Install package locally

Install the package in editable mode for development
```
uv pip install -e .
```

### Run
For the package to run, it will require langchain API key and required model's API keys such as OpenAI's Keys. 

1. Save the API keys in the .env file

2. Make the `.env` file accessable to `direnv`. Note: if you are using zsh, run 
```
eval "$(direnv hook zsh)"
direnv allow .
```

Follow the same steps as [How to run](#how-to-run)


### Pytest Tools 
#### Code coverage
```
pytest --cov=langsmith_evaluation_helper
```
#### For only the unit test 
```
make unit_test
```
#### For all test including unit and integration test 
```
make all_test
```
### Modifying README
#### Install doctoc

You can use [doctoc](https://github.com/thlorenz/doctoc) to auto-generate (or modify) the table of contents.

1. To install doctoc, you first need to install [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).
2. Install [doctoc](https://github.com/thlorenz/doctoc?tab=readme-ov-file#installation)

```
npm install -g doctoc
```

#### Run doctoc
If you modify the README by adding sections, run the following to update the TOC

```
doctoc README.md
```

## Contribution

We warmly welcome and greatly value contributions to the langsmith-evaluation-helper. However, before diving in, we kindly request that you take a moment to review our [Contribution Guidelines](CONTRIBUTING.md).

Additionally, please carefully read the Contributor License Agreement (CLA) before submitting your contribution to Gaudiy. By submitting your contribution, you are considered to have accepted and agreed to be bound by the terms and conditions outlined in the CLA, regardless of circumstances.

https://site.gaudiy.com/contributor-license-agreement

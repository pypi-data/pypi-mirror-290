import unittest
import numpy as np
from PIL import Image

from brainfuck_art.image_processing import image_to_matrix, DEFAULT_ALPHABET
from brainfuck_art.brainfuck_interpreter import execute_bf

class TestImageToMatrix(unittest.TestCase):
    def setUp(self):
        """
        Create a simple image and set up common parameters for tests.
        """
        # Create a simple 2x2 image for testing
        self.image = Image.new("RGB", (2, 2), color = 'red')
        self.width = 50
        self.height = 50
        self.text = "AB"
        self.alphabet = DEFAULT_ALPHABET

    def test_image_to_matrix_no_text(self):
        """
        Test image_to_matrix with no hidden text.
        """
        text_matrix, color_matrix = image_to_matrix(self.image, width=self.width, height=self.height)

        # Check the shape of the matrices
        self.assertEqual(text_matrix.shape, (self.height, self.width))
        self.assertEqual(color_matrix.shape, (self.height, self.width))

        # Check that text matrix only contains characters from the alphabet
        for char in np.nditer(text_matrix):
            self.assertIn(char, list(self.alphabet))

        # Check that color matrix has the correct color
        expected_color = '#ff0000'  # Hex code for red
        for color in np.nditer(color_matrix):
            self.assertEqual(color, expected_color)

    def test_image_to_matrix_with_text(self):
        """
        Test image_to_matrix with hidden Brainfuck text.
        """
        text_matrix, color_matrix = image_to_matrix(self.image, text=self.text, width=self.width, height=self.height)

        # Check the shape of the matrices
        self.assertEqual(text_matrix.shape, (self.height, self.width))
        self.assertEqual(color_matrix.shape, (self.height, self.width))

        # Flatten the text_matrix into a string of Brainfuck code
        bf_code = ''.join(text_matrix.flatten())

        # Check if the Brainfuck code is runnable and produces the expected output
        try:
            output, _ = execute_bf(bf_code, max_ops=100000)
            # Check if the output matches the hidden text encoded as Brainfuck
            expected_output = self.text
            self.assertEqual(output, expected_output)
        except Exception as e:
            self.fail(f"Brainfuck code generated by image_to_matrix is not runnable: {e}")

        # Check that color matrix has the correct color
        expected_color = '#ff0000'  # Hex code for red
        for color in np.nditer(color_matrix):
            self.assertEqual(color, expected_color)

if __name__ == '__main__':
    unittest.main()

name: CI

on:
  push:
  release:
    types:
      - created

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e '.[dev]'
      - name: Lint with ruff
        run: ruff check .

  release-build:
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ github.event_name == 'release' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}

    needs:
      - release-build

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

    # needs: [test, lint]
    # runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'release' }}

    # steps:
    #   - uses: actions/checkout@v4
    #   - name: Set up Python
    #     uses: actions/setup-python@v5
    #     with:
    #       python-version: '3.x'
    #   - name: Install dependencies
    #     run: |
    #       python -m pip install --upgrade pip
    #       pip install -e '.[dev]'
    #   - name: Build and publish
    #     env:
    #       TWINE_USERNAME: __token__
    #       TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    #     run: |
    #       sed -i "s|version = \"0.0.0\"|version = \"${GITHUB_REF##*/}\"|g" pyproject.toml
    #       python -m build
    #       twine upload dist/*

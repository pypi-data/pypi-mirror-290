# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from getopenpay.models.event_type import EventType
from getopenpay.models.object_name import ObjectName
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist


class WebhookEndpointExternal(BaseModel):
  """
    WebhookEndpointExternal
    """
  id: StrictStr = Field(...)
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  url: StrictStr = Field(...)
  is_active: StrictBool = Field(...)
  is_protected: StrictBool = Field(...)
  enabled_events: conlist(EventType) = Field(...)
  description: Optional[StrictStr] = Field(...)
  secret: Optional[StrictStr] = Field(...)
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'url', 'is_active', 'is_protected',
    'enabled_events', 'description', 'secret'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> WebhookEndpointExternal:
    """Create an instance of WebhookEndpointExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if description (nullable) is None
    # and __fields_set__ contains the field
    if self.description is None and 'description' in self.__fields_set__:
      _dict['description'] = None

    # set to None if secret (nullable) is None
    # and __fields_set__ contains the field
    if self.secret is None and 'secret' in self.__fields_set__:
      _dict['secret'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> WebhookEndpointExternal:
    """Create an instance of WebhookEndpointExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return WebhookEndpointExternal.parse_obj(obj)

    _obj = WebhookEndpointExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'url': obj.get('url'),
        'is_active': obj.get('is_active'),
        'is_protected': obj.get('is_protected'),
        'enabled_events': obj.get('enabled_events'),
        'description': obj.get('description'),
        'secret': obj.get('secret')
      }
    )
    return _obj

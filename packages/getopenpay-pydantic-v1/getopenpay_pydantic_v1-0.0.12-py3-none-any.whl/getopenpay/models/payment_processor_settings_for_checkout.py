# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List

from getopenpay.models.checkout_payment_method import CheckoutPaymentMethod
from pydantic import BaseModel, Field, conlist


class PaymentProcessorSettingsForCheckout(BaseModel):
  """
    PaymentProcessorSettingsForCheckout
    """
  methods_available: conlist(CheckoutPaymentMethod) = Field(...)
  __properties = ['methods_available']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> PaymentProcessorSettingsForCheckout:
    """Create an instance of PaymentProcessorSettingsForCheckout from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of each item in methods_available (list)
    _items = []
    if self.methods_available:
      for _item in self.methods_available:
        if _item:
          _items.append(_item.to_dict())
      _dict['methods_available'] = _items
    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> PaymentProcessorSettingsForCheckout:
    """Create an instance of PaymentProcessorSettingsForCheckout from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return PaymentProcessorSettingsForCheckout.parse_obj(obj)

    _obj = PaymentProcessorSettingsForCheckout.parse_obj(
      {
        'methods_available':
          [CheckoutPaymentMethod.from_dict(_item) for _item in obj.get('methods_available')]
          if obj.get('methods_available') is not None else None
      }
    )
    return _obj

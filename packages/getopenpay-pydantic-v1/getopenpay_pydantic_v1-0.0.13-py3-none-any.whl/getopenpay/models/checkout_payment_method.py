# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from getopenpay.models.payment_processor_name import PaymentProcessorName
from getopenpay.models.payment_provider_type import PaymentProviderType
from pydantic import BaseModel, Field


class CheckoutPaymentMethod(BaseModel):
  """
    CheckoutPaymentMethod
    """
  provider: PaymentProviderType = Field(...)
  processor_name: Optional[PaymentProcessorName] = None
  metadata: Optional[Dict[str, Any]] = None
  __properties = ['provider', 'processor_name', 'metadata']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> CheckoutPaymentMethod:
    """Create an instance of CheckoutPaymentMethod from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if processor_name (nullable) is None
    # and __fields_set__ contains the field
    if self.processor_name is None and 'processor_name' in self.__fields_set__:
      _dict['processor_name'] = None

    # set to None if metadata (nullable) is None
    # and __fields_set__ contains the field
    if self.metadata is None and 'metadata' in self.__fields_set__:
      _dict['metadata'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> CheckoutPaymentMethod:
    """Create an instance of CheckoutPaymentMethod from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return CheckoutPaymentMethod.parse_obj(obj)

    _obj = CheckoutPaymentMethod.parse_obj(
      {
        'provider': obj.get('provider'),
        'processor_name': obj.get('processor_name'),
        'metadata': obj.get('metadata')
      }
    )
    return _obj

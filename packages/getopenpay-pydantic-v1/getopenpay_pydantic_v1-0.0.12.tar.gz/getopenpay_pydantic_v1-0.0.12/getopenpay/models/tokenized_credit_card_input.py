# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr


class TokenizedCreditCardInput(BaseModel):
  """
    TokenizedCreditCardInput
    """
  cde_external_id: StrictStr = Field(..., description='Card token.')
  last_four: StrictStr = Field(..., description='Last four digits of credit card')
  zip_code: StrictStr = Field(..., description='ZIP or postal code.')
  expiry_date: StrictStr = Field(..., description='in %Y-%m format')
  line1: Optional[StrictStr] = None
  line2: Optional[StrictStr] = None
  line3: Optional[StrictStr] = None
  city: Optional[StrictStr] = None
  state: Optional[StrictStr] = None
  country: Optional[StrictStr] = None
  card_type: Optional[StrictStr] = None
  card_fingerprint: Optional[StrictStr] = None
  card_iin: Optional[StrictStr] = None
  card_country: Optional[StrictStr] = None
  card_brand: Optional[StrictStr] = None
  card_issuer: Optional[StrictStr] = None
  __properties = [
    'cde_external_id', 'last_four', 'zip_code', 'expiry_date', 'line1', 'line2', 'line3', 'city',
    'state', 'country', 'card_type', 'card_fingerprint', 'card_iin', 'card_country', 'card_brand',
    'card_issuer'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> TokenizedCreditCardInput:
    """Create an instance of TokenizedCreditCardInput from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if line1 (nullable) is None
    # and __fields_set__ contains the field
    if self.line1 is None and 'line1' in self.__fields_set__:
      _dict['line1'] = None

    # set to None if line2 (nullable) is None
    # and __fields_set__ contains the field
    if self.line2 is None and 'line2' in self.__fields_set__:
      _dict['line2'] = None

    # set to None if line3 (nullable) is None
    # and __fields_set__ contains the field
    if self.line3 is None and 'line3' in self.__fields_set__:
      _dict['line3'] = None

    # set to None if city (nullable) is None
    # and __fields_set__ contains the field
    if self.city is None and 'city' in self.__fields_set__:
      _dict['city'] = None

    # set to None if state (nullable) is None
    # and __fields_set__ contains the field
    if self.state is None and 'state' in self.__fields_set__:
      _dict['state'] = None

    # set to None if country (nullable) is None
    # and __fields_set__ contains the field
    if self.country is None and 'country' in self.__fields_set__:
      _dict['country'] = None

    # set to None if card_type (nullable) is None
    # and __fields_set__ contains the field
    if self.card_type is None and 'card_type' in self.__fields_set__:
      _dict['card_type'] = None

    # set to None if card_fingerprint (nullable) is None
    # and __fields_set__ contains the field
    if self.card_fingerprint is None and 'card_fingerprint' in self.__fields_set__:
      _dict['card_fingerprint'] = None

    # set to None if card_iin (nullable) is None
    # and __fields_set__ contains the field
    if self.card_iin is None and 'card_iin' in self.__fields_set__:
      _dict['card_iin'] = None

    # set to None if card_country (nullable) is None
    # and __fields_set__ contains the field
    if self.card_country is None and 'card_country' in self.__fields_set__:
      _dict['card_country'] = None

    # set to None if card_brand (nullable) is None
    # and __fields_set__ contains the field
    if self.card_brand is None and 'card_brand' in self.__fields_set__:
      _dict['card_brand'] = None

    # set to None if card_issuer (nullable) is None
    # and __fields_set__ contains the field
    if self.card_issuer is None and 'card_issuer' in self.__fields_set__:
      _dict['card_issuer'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> TokenizedCreditCardInput:
    """Create an instance of TokenizedCreditCardInput from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return TokenizedCreditCardInput.parse_obj(obj)

    _obj = TokenizedCreditCardInput.parse_obj(
      {
        'cde_external_id': obj.get('cde_external_id'),
        'last_four': obj.get('last_four'),
        'zip_code': obj.get('zip_code'),
        'expiry_date': obj.get('expiry_date'),
        'line1': obj.get('line1'),
        'line2': obj.get('line2'),
        'line3': obj.get('line3'),
        'city': obj.get('city'),
        'state': obj.get('state'),
        'country': obj.get('country'),
        'card_type': obj.get('card_type'),
        'card_fingerprint': obj.get('card_fingerprint'),
        'card_iin': obj.get('card_iin'),
        'card_country': obj.get('card_country'),
        'card_brand': obj.get('card_brand'),
        'card_issuer': obj.get('card_issuer')
      }
    )
    return _obj

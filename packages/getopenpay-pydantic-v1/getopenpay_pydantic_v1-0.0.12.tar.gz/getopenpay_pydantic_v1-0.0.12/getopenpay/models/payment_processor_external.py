# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, Optional

from getopenpay.models.object_name import ObjectName
from getopenpay.models.payment_processor_name import PaymentProcessorName
from pydantic import BaseModel, Field, StrictBool, StrictStr


class PaymentProcessorExternal(BaseModel):
  """
    PaymentProcessorExternal
    """
  id: StrictStr = Field(..., description='Unique identifier of the payment_processor.')
  object: Optional[ObjectName] = None
  created_at: datetime = Field(
    ..., description="DateTime at which the object was created, in 'ISO 8601' format."
  )
  updated_at: datetime = Field(
    ..., description="DateTime at which the object was updated, in 'ISO 8601' format."
  )
  is_deleted: Optional[StrictBool] = Field(
    False, description='If true, indicates that this object has been deleted'
  )
  account_id: StrictStr = Field(..., description='Unique identifier of the account.')
  processor_name: PaymentProcessorName = Field(...)
  api_keys: Dict[str, Any] = Field(
    ..., description='These keys will allow to authenticate API requests to payment processor.'
  )
  description: Optional[StrictStr] = Field(...)
  is_default: StrictBool = Field(
    ..., description='Indicates whether this payment processor is default or not'
  )
  enabled_provider_types: Dict[str, Any] = Field(
    ...,
    description=
    'Dictionary containing provider types enabled for the payment processor. Dictionary values might contain settings if applicable to the provider type.'
  )
  __properties = [
    'id', 'object', 'created_at', 'updated_at', 'is_deleted', 'account_id', 'processor_name',
    'api_keys', 'description', 'is_default', 'enabled_provider_types'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> PaymentProcessorExternal:
    """Create an instance of PaymentProcessorExternal from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # set to None if description (nullable) is None
    # and __fields_set__ contains the field
    if self.description is None and 'description' in self.__fields_set__:
      _dict['description'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> PaymentProcessorExternal:
    """Create an instance of PaymentProcessorExternal from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return PaymentProcessorExternal.parse_obj(obj)

    _obj = PaymentProcessorExternal.parse_obj(
      {
        'id': obj.get('id'),
        'object': obj.get('object'),
        'created_at': obj.get('created_at'),
        'updated_at': obj.get('updated_at'),
        'is_deleted': obj.get('is_deleted') if obj.get('is_deleted') is not None else False,
        'account_id': obj.get('account_id'),
        'processor_name': obj.get('processor_name'),
        'api_keys': obj.get('api_keys'),
        'description': obj.get('description'),
        'is_default': obj.get('is_default'),
        'enabled_provider_types': obj.get('enabled_provider_types')
      }
    )
    return _obj

# coding: utf-8
"""
    {{ service_name|to_snake_case }}

    Generated by quick https://github.com/ValeriyMenshikov/quick-api-tests)

"""  # noqa: E501
{%- set service_name = service_name %}
{%- set server_address = server_address %}
{%- if client_type == 'http' %}
from quick_api_tests.http_client.configuration import Configuration
from logic.http.{{ service_name|to_snake_case }} import _{{ service_name|to_camel_case }}Facade
{% elif client_type == 'grpc' %}
from logic.grpc.{{ service_name|to_snake_case }} import _{{ service_name|to_camel_case }}Facade
{% endif %}

{%- if client_type == 'http' %}
class HTTP{{ service_name|to_camel_case }}Facade(_{{ service_name|to_camel_case }}Facade):
{% elif client_type == 'grpc' %}
class GRPC{{ service_name|to_camel_case }}Facade(_{{ service_name|to_camel_case }}Facade):
{% endif %}
    """
    Композитный фасад для реализации методов объединяющих логику нескольких классов логики одного сервиса.
    При перегенерации, методы реализованные в этом классе не потеряются.

    Пример:
    def composite_method_name(self, param1: int, param2: str, param3: bool) -> dict:
        response1 = self.first_service_name_api.wrapper_method_name(param1)
        response1 = self.second_service_name_api.wrapper_method_name(param2)
        response1 = self.third_service_name_api.wrapper_method_name(param3)
        return {"result": response1.json()["key"] + response2.json()["key"] + response3.json()["key"]}
    """
    {%- if client_type == 'http' %}
    def __init__(self, configuration: Configuration = Configuration(host="{{ server_address }}", disable_log=False)) -> None:
        super().__init__(configuration=configuration)
    {%- elif client_type == 'grpc' %}
    def __init__(self, server_address: str = "{{ server_address }}") -> None:
        super().__init__(server_address=server_address)
    {% endif %}
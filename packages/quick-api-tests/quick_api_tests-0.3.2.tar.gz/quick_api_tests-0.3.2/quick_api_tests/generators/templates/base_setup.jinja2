import pytest
import asyncio

import structlog
{%- for api_descriptor in api_descriptors %}
{%- if api_descriptor.client_type  == 'http' %}
from helpers.http.{{ api_descriptor.service_name|to_snake_case }}.{{ api_descriptor.service_name|to_snake_case }}_helper import HTTP{{ api_descriptor.service_name|to_camel_case }}Helper
{% elif api_descriptor.client_type == 'grpc' %}
from helpers.grpc.{{ api_descriptor.service_name|to_snake_case }}.{{ api_descriptor.service_name|to_snake_case }}_helper import GRPC{{ api_descriptor.service_name|to_camel_case }}Helper
{% endif %}
{%- endfor %}

processors = [
    structlog.processors.JSONRenderer(indent=4, sort_keys=True, ensure_ascii=False),
]

structlog.configure(processors=processors)



class BaseSetup:

    """
        Generated by quick https://github.com/ValeriyMenshikov/quick-api-tests)

        Do not edit the file manually.

    """  # noqa: E501
    {% if async_mode %}
    @pytest.fixture
    def event_loop(self) -> asyncio.AbstractEventLoop:
        """Create an instance of the default event loop for each test case."""
        yield asyncio.get_event_loop()
        asyncio.get_event_loop().close()
    {% endif %}

    {%- for api_descriptor in api_descriptors %}
    {%- if api_descriptor.client_type == 'http' %}
    @pytest.fixture(scope="session")
    def {{ api_descriptor.client_type }}_{{api_descriptor.service_name|to_snake_case}}(self):
        return HTTP{{ api_descriptor.service_name|to_camel_case }}Helper()

    {% elif api_descriptor.client_type == 'grpc' %}
    @pytest.fixture(scope="session")
    def {{ api_descriptor.client_type }}_{{api_descriptor.service_name|to_snake_case}}(self):
        return GRPC{{ api_descriptor.service_name|to_camel_case }}Helper()

    {% endif %}
    {%- endfor %}

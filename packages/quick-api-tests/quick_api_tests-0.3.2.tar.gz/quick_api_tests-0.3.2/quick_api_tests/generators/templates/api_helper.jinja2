# coding: utf-8
# ruff: noqa: F405,F403
{%- set service_name = service_name %}
"""
    {{ service_name|to_snake_case }}

    Generated by quick https://github.com/ValeriyMenshikov/quick-api-tests)

"""  # noqa: E501


{%- if client_type == 'http' %}
from httpx import Response  # noqa: F401
{%- set api_name = api_name %}
from clients.http.{{ service_name|to_snake_case }} import {{ api_name|to_camel_case }}Api as _{{ api_name|to_camel_case }}Api

{% if models %}
from clients.http.{{ service_name|to_snake_case }}.models.api_models import *
{% endif %}
{% elif client_type == 'grpc' %}
import grpc
from typing import (
    cast,
    Optional,
    List,
    Tuple,
    Iterable,
)

from clients.grpc.stubs.{{ service_name|to_snake_case }}.{{ api_name|to_snake_case }}_pb import *
from clients.grpc.stubs.{{ service_name|to_snake_case }}.{{ api_name|to_snake_case }}_pb import (
    {{ api_name|to_camel_case }} as _{{ api_name|to_camel_case }}Api,
)

import google.protobuf.empty_pb2 as empty_pb2

Empty = empty_pb2.Empty
{%- endif %}


class {{ api_name|to_camel_case }}Helper(_{{ api_name|to_camel_case }}Api):
    """
    Класс наследуется от сгенерированного класса API клиента.

    В этом классе необходимо реализовывать логику ваших методов,
    она не потеряется при перегенерации клиентов.

    Здесь можно реализовать обертки над методами упрощая их интерфейс

    Пример:

    def wrapper_method_name(self, param1: int, param2: str, param3: bool) -> Response:
        request = ModelName(
            param1=param1,
            param2=param2,
            param3=param3
        )
        response = self.post_method_name(
            request=request
        )
        return response
    """


    {%- set client_type = client_type %}

    {%- for handler in handlers %}

    {%- if client_type == 'http' %}

    {%- set method = handler.get('method') %}
    {%- set path = handler.get('path', None) %}
    {%- set request_body = handler.get('request_body') %}
    {%- set summary = handler.get('summary') %}
    {%- set responses = handler.get('responses') %}
    {%- set success_response = responses.get('200', None) or responses.get('201', None) %}
    {%- set query_parameters = handler.get('query_parameters', None) %}
    {%- set path_parameters = handler.get('path_parameters', None) %}
    {%- set headers = handler.get('headers', None) %}
    {%- set headers = headers|sort(attribute='required', reverse=True) %}

    {% include 'http_helper_method.jinja2' %}

    {% elif client_type == 'grpc' %}

    {% include 'grpc_helper_method.jinja2' %}

    {% endif %}
    {%- endfor %}

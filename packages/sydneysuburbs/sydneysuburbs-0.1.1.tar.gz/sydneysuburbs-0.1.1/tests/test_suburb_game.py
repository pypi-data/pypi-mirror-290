"""Tests for the SuburbGame class."""

import pytest

from sydneysuburbs.generators import generate_test
from sydneysuburbs.suburb_game import SuburbGame


@pytest.fixture
def load_game() -> SuburbGame:
    """Loads the test suburb game.

    Returns:
        Test suburb game object
    """
    return SuburbGame(suburb_network=generate_test())


def test_start_game_parameters(load_game: SuburbGame):
    """Tests the parameters generated by a new game."""
    sg = load_game

    # test lengths
    sg.start_game(start="strathfield", end="croydon")
    assert sg.length == 3
    assert sg.allowable_guesses == 5

    sg.start_game(start="strathfield", end="ashfield")
    assert sg.length == 4
    assert sg.allowable_guesses == 6

    sg.start_game(start="birchgrove", end="leichhardt")
    assert sg.length == 5
    assert sg.allowable_guesses == 7

    sg.start_game(start="birchgrove", end="five dock")
    assert sg.length == 6
    assert sg.allowable_guesses == 9

    sg.start_game(start="birchgrove", end="concord")
    assert sg.length == 7
    assert sg.allowable_guesses == 10

    sg.start_game(start="birchgrove", end="concord west")
    assert sg.length == 8
    assert sg.allowable_guesses == 11

    # TODO: length == 9 is computationally too intensive (all_simple_paths)
    # sg.start_game(start="birchgrove", end="rhodes")
    # assert sg.length == 9
    # assert sg.allowable_guesses == 13


def test_start_random(load_game: SuburbGame):
    """Tests starting a random game."""
    sg = load_game
    sg.start_random_game(max_length=7)

    assert sg.length < 8
    assert sg.length > 4

    with pytest.raises(ValueError, match="max_length must be greater than or equal"):
        sg.start_random_game(max_length=7, min_length=8)


def test_concord_to_ashfield(load_game: SuburbGame):
    """Tests a game from Concord to Ashfield."""
    # start test game between concord and ashfield
    sg = load_game
    sg.start_game(start="concord", end="ashfield")

    # check start and end suburbs
    assert sg.start == sg.suburb_network.get_suburb_id_by_name("concord")
    assert sg.end == sg.suburb_network.get_suburb_id_by_name("ashfield")

    # check length
    assert sg.length == 4

    # check guesses remaining
    assert sg.guesses_remaining == 2

    # check allowable guesses
    assert sg.allowable_guesses == 6

    # game should not be finished yet
    assert not sg.is_game_finished()

    # guess 1 - not yet finished, score 0
    name = sg.guess("burwood")
    assert name == "Burwood"
    assert sg.guess_scores[-1] == 0
    assert sg.guesses_remaining == 1
    assert not sg.is_game_finished()

    # guess 2 - not yet finished, score 2
    name = sg.guess("tempe")
    assert name == "Tempe"
    assert sg.guess_scores[-1] == 2
    assert sg.guesses_remaining == 1
    assert not sg.is_game_finished()

    # guess 3 - not yet finished, score 1
    name = sg.guess("five dock")
    assert name == "Five Dock"
    assert sg.guess_scores[-1] == 1
    assert sg.guesses_remaining == 1
    assert not sg.is_game_finished()

    # test guessing duplicate suburb, start, end, cannot find
    with pytest.raises(ValueError, match="Suburb has already been guessed"):
        sg.guess("tempe")

    with pytest.raises(ValueError, match="Suburb has already been guessed"):
        sg.guess("ashfield")

    with pytest.raises(ValueError, match="Suburb has already been guessed"):
        sg.guess("concord")

    with pytest.raises(ValueError, match="Cannot find suburb:"):
        sg.guess("conord")

    # test get remaining suburbs
    concord = sg.suburb_network.get_suburb_by_name("concord")
    ashfield = sg.suburb_network.get_suburb_by_name("ashfield")
    burwood = sg.suburb_network.get_suburb_by_name("burwood")
    balmain = sg.suburb_network.get_suburb_by_name("balmain")
    croydon = sg.suburb_network.get_suburb_by_name("croydon")

    assert balmain in sg.get_remaining_suburbs()
    assert croydon in sg.get_remaining_suburbs()
    assert concord not in sg.get_remaining_suburbs()
    assert ashfield not in sg.get_remaining_suburbs()
    assert burwood not in sg.get_remaining_suburbs()

    # guess 4 - finished
    name = sg.guess("croydon")
    assert name == "Croydon"
    assert sg.guess_scores[-1] == 0
    assert sg.guesses_remaining == 0
    assert sg.is_game_finished()

    # test plot execution
    sg.plot_game()
    sg.plot_game(finished=True)

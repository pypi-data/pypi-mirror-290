[build-system]
requires = ["hatchling", "hatch-vcs",]
build-backend = "hatchling.build"

[project]
name = "extended-data-types"
dynamic = ["version"]
description = "Extended functionality for data types"
requires-python = ">=3.8"
license = "MIT"
readme = "README.md"
keywords = ["python3"]
authors = [
    { name = "Jon Bogaty", email = "jon@jonbogaty.com" },
]
maintainers = [
    { name = "Jon Bogaty", email = "jon@jonbogaty.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = [
    "requests>=2.32.3",
    "python-hcl2>=4.3.4",
    "validators>=0.33.0",
    "inflection>=0.5.1",
    "sortedcontainers>=2.4.0",
    "wrapt>=1.16.0",
    "pyyaml>=6.0.1",
    "future>=1.0.0",
]

[project.urls]
Documentation = "https://github.com/jbcom/extended-data-types#readme"
Issues = "https://github.com/jbcom/extended-data-types/issues"
Source = "https://github.com/jbcom/extended-data-types"

[project.optional-dependencies]
tests = [
    "pytest>=8.2.2",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.23.8",
    "coverage[toml]>=7.6.0",
]

typing = [
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.12.20240724",
    "sortedcontainers-stubs>=2.4.2",
]

docs = [
    "sphinx>=7.2,<7.5",
    "sphinxawesome-theme>=5.2.0",
    "sphinx-autodoc2>=0.5.0",
    "myst-parser>=3.0.1",
    "docutils>=0.17",
    "git-cliff>=2.4.0",
]

[tool.hatch.envs.default]
type = "virtual"
path = ".venv"

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.coverage.run]
branch = true
parallel = true
source = ["extended_data_types"]

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.codespell]
skip = '*.js,*.css,*.inv,*.lock,*.toml,*.json,*.yml,*.yaml'
count = true

[tool.interrogate]
omit-covered-files = true
verbose = 2
fail-under = 100
whitelist-regex = ["test_.*"]

[tool.black]
line-length = 88

[tool.ruff]
src = ["extended_data_types", "tests"]
exclude = ["docs"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",
    "COM",
    "E501",
    "FBT"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "D", "E", "S"]

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2

[tool.mypy]
strict = true
pretty = true

[[tool.mypy.overrides]]
module = "wrapt.*,"
ignore_missing_imports = true

[tool.git-cliff.changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details\

{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

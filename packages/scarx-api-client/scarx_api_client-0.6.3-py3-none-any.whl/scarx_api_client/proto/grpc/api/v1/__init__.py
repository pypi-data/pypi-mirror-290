# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: IpService.proto, LakConfigurationService.proto, LakDataService.proto, LakGatewayService.proto, LakInteractiveService.proto, date.proto, empty.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class IpRequest(betterproto.Message):
    ip: Optional[str] = betterproto.string_field(1, optional=True, group="_ip")


@dataclass(eq=False, repr=False)
class IpDetails(betterproto.Message):
    ip: str = betterproto.string_field(1)
    region: str = betterproto.string_field(2)
    country: str = betterproto.string_field(3)
    location: str = betterproto.string_field(4)
    postal: str = betterproto.string_field(5)
    country_name: str = betterproto.string_field(6)
    organization: str = betterproto.string_field(7)
    timezone: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class LakGatewayInputMetadataWithoutWorld(betterproto.Message):
    email: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)
    ip_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LakGatewayInputMetadata(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    email: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    ip_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LakGatewayStatus(betterproto.Message):
    is_finished: bool = betterproto.bool_field(1)
    status: str = betterproto.string_field(2)
    progress: int = betterproto.int32_field(3)
    data: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class LakGatewayInputEmpty(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LakUnitIdToCount(betterproto.Message):
    lak_unit_id_to_count_mapping: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class LakPrimaryKeys(betterproto.Message):
    primary_key: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LakHabitatIds(betterproto.Message):
    ids: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LakMissionIds(betterproto.Message):
    ids: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LakResourcesAndUnits(betterproto.Message):
    resources: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    units: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputLoginActionChangePassword(betterproto.Message):
    metadata: "LakGatewayInputMetadataWithoutWorld" = betterproto.message_field(1)
    new_password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputGuestLoginActionCreate(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    days: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionUpgradeBuilding(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionUpgradeBuildings(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_building_primary_keys: Dict[int, "LakPrimaryKeys"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionResearchKnowledge(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_granted: bool = betterproto.bool_field(2)
    habitat_id: int = betterproto.int32_field(3)
    primary_key: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionBatchUnitOrder(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    payment_amount: int = betterproto.int32_field(2)
    habitat_ids_to_unit_id_to_count: Dict[int, "LakUnitIdToCount"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionRelocateHabitatRepeatable(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    source_habitat_id: int = betterproto.int32_field(2)
    destination_habitat_id: int = betterproto.int32_field(3)
    destination_map_y: int = betterproto.int32_field(4)
    destination_map_x: int = betterproto.int32_field(5)
    payment_amount: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionChangeHabitatName(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    habitat_id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatActionExecuteMissionsInHabitatDictionary(
    betterproto.Message
):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    habitat_ids_to_mission_ids_dictionary: Dict[int, "LakMissionIds"] = (
        betterproto.map_field(2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatReservationActionAssignReservations(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    players_to_habitat_ids: Dict[int, "LakHabitatIds"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputHabitatReservationActionDeleteEntries(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    reservation_ids: List[int] = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputTransitActionStartTransit(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    units: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    resources: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    destination_habitat_id: int = betterproto.int32_field(4)
    source_habitat_id: int = betterproto.int32_field(5)
    transit_type: int = betterproto.int32_field(6)
    earliest_arrival_time: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class LakGatewayInputTransitActionSynchronizeTransit(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    units: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    resources: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )
    source_habitat_id: int = betterproto.int32_field(4)
    transit_id: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionSendInvitation(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    player_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionAcceptInvitation(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    alliance_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionLeaveAlliance(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    alliance_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionCreateAlliance(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionSetPermission(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    player_id: int = betterproto.int32_field(2)
    permission: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionChangeAllianceData(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    description_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceActionDepositResources(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    source_habitat_id: int = betterproto.int32_field(2)
    resource_amounts: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_INT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class LakGatewayInputAllianceShopActionPurchaseShopOffer(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    alliance_shop_offer_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputMapActionMap(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    x: int = betterproto.int32_field(2)
    y: int = betterproto.int32_field(3)
    height: int = betterproto.int32_field(4)
    width: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class LakGatewayInputTrackableEventActionBatch(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    habitat_id: int = betterproto.int32_field(2)
    start_event_ids: List[str] = betterproto.string_field(3)
    acknowledge_event_ids: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LakGatewayInputPlayerActionAcknowledgeActivityGift(betterproto.Message):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    habitat_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LakGatewayInputMarketActionTradeResourcesForHabitatDictionary(
    betterproto.Message
):
    metadata: "LakGatewayInputMetadata" = betterproto.message_field(1)
    wanted_resource_id: int = betterproto.int32_field(2)
    habitat_ids_to_resource_and_units: Dict[int, "LakResourcesAndUnits"] = (
        betterproto.map_field(3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class ConfigurationInput(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LakIosDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    device_group: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    ios_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class LakAndroidDeviceConfiguration(betterproto.Message):
    email: str = betterproto.string_field(1)
    salt: str = betterproto.string_field(2)
    device_id: str = betterproto.string_field(3)
    google_ad_id: str = betterproto.string_field(4)
    device_model: str = betterproto.string_field(5)
    android_version: str = betterproto.string_field(6)
    tos_acceptance_date: datetime = betterproto.message_field(7)
    client_cache_version: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CustomEmpty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Date(betterproto.Message):
    year: int = betterproto.int32_field(1)
    """
    Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
    year.
    """

    month: int = betterproto.int32_field(2)
    """
    Month of a year. Must be from 1 to 12, or 0 to specify a year without a
    month and day.
    """

    day: int = betterproto.int32_field(3)
    """
    Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
    to specify a year by itself or a year and month where the day isn't
    significant.
    """


@dataclass(eq=False, repr=False)
class AllLakRegions(betterproto.Message):
    regions: List["LakRegion"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LakRegion(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    maximum_modifiers: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    direction: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ServerQuery(betterproto.Message):
    world_id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ServerQueryWithObjectId(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    object_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ServerQueryWithDate(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    date: "Date" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ServerQueryWithDateAndObjectId(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    object_id: int = betterproto.int32_field(2)
    date: "Date" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AllLakWorlds(betterproto.Message):
    worlds: List["LakWorldMetadata"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LakWorldMetadata(betterproto.Message):
    id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    features: str = betterproto.string_field(3)
    country: str = betterproto.string_field(4)
    language: str = betterproto.string_field(5)
    url: str = betterproto.string_field(6)
    name_in_short_form: str = betterproto.string_field(7)
    name_in_url: str = betterproto.string_field(8)
    features_array: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class LakApplicationVersion(betterproto.Message):
    application_version: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LakHabitatCount(betterproto.Message):
    castles: int = betterproto.int32_field(1)
    fortresses: int = betterproto.int32_field(2)
    cities: int = betterproto.int32_field(3)
    metropolis: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LakPublicDataAlliance(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    description: str = betterproto.string_field(4)
    rank: int = betterproto.int32_field(5)
    points: int = betterproto.int32_field(6)
    points_average: int = betterproto.int32_field(7)
    members: List[int] = betterproto.int32_field(8)
    habitat_count: "LakHabitatCount" = betterproto.message_field(9)
    member_count: int = betterproto.int32_field(10)
    points_maxed: int = betterproto.int32_field(11)
    points_available: int = betterproto.int32_field(12)
    maxed_percent: float = betterproto.double_field(13)
    link: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class LakPublicDataPlayer(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    alliance_id: int = betterproto.int32_field(4)
    alliance_permission: int = betterproto.int32_field(5)
    under_attack_protection: bool = betterproto.bool_field(6)
    on_vacation: bool = betterproto.bool_field(7)
    points: int = betterproto.int32_field(8)
    rank: int = betterproto.int32_field(9)
    habitat_count: "LakHabitatCount" = betterproto.message_field(10)
    points_maxed: int = betterproto.int32_field(11)
    points_available: int = betterproto.int32_field(12)
    maxed_percent: float = betterproto.double_field(13)
    link: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class LakPublicDataHabitat(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    id: int = betterproto.int32_field(2)
    name: str = betterproto.string_field(3)
    map_x: int = betterproto.int32_field(4)
    map_y: int = betterproto.int32_field(5)
    points: int = betterproto.int32_field(6)
    creation_date: datetime = betterproto.message_field(7)
    player_id: int = betterproto.int32_field(8)
    type: int = betterproto.int32_field(9)
    owned: bool = betterproto.bool_field(10)
    alliance_id: int = betterproto.int32_field(11)
    region_id: int = betterproto.int32_field(12)
    region_name: str = betterproto.string_field(13)
    type_name: str = betterproto.string_field(14)
    link: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class LakPublicDataMetadata(betterproto.Message):
    world: "LakWorldMetadata" = betterproto.message_field(1)
    timestamp: datetime = betterproto.message_field(2)
    raw_size: int = betterproto.int64_field(3)
    time_took_for_download_in_ms: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class LakPublicDataAll(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitats: Dict[int, "LakPublicDataHabitat"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )
    alliances: Dict[int, "LakPublicDataAlliance"] = betterproto.map_field(
        3, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )
    players: Dict[int, "LakPublicDataPlayer"] = betterproto.map_field(
        4, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class LakPublicDataAllHabitats(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitats: Dict[int, "LakPublicDataHabitat"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class LakPublicDataAllAlliances(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    alliances: Dict[int, "LakPublicDataAlliance"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class LakPublicDataAllPlayers(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    players: Dict[int, "LakPublicDataPlayer"] = betterproto.map_field(
        2, betterproto.TYPE_INT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class LakPublicDataSingleHabitat(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitat: "LakPublicDataHabitat" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LakPublicDataSingleAlliance(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    alliance: "LakPublicDataAlliance" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LakPublicDataSinglePlayer(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    player: "LakPublicDataPlayer" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LakPublicDataSingleHabitatComplex(betterproto.Message):
    metadata: "LakPublicDataMetadata" = betterproto.message_field(1)
    habitat: "LakPublicDataHabitat" = betterproto.message_field(2)
    player: "LakPublicDataPlayer" = betterproto.message_field(3)
    alliance: "LakPublicDataAlliance" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LakPublicDataHistory(betterproto.Message):
    history: List["Date"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScarxIpExtern(betterproto.Message):
    id: str = betterproto.string_field(1)
    system_name: str = betterproto.string_field(2)
    custom_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AllScarxIps(betterproto.Message):
    ips: List["ScarxIpExtern"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LakCreateAccountRequest(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    email: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    ip_id: str = betterproto.string_field(4)
    nickname: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class LakCreateAccountStatus(betterproto.Message):
    is_finished: bool = betterproto.bool_field(1)
    status: str = betterproto.string_field(2)
    progress: int = betterproto.int32_field(3)
    status_german: str = betterproto.string_field(4)
    login_id: int = betterproto.int32_field(5)
    player_id: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LakAllianceHelpInfoStatus(betterproto.Message):
    is_finished: bool = betterproto.bool_field(1)
    status: str = betterproto.string_field(2)
    progress: int = betterproto.int32_field(3)
    status_german: str = betterproto.string_field(4)
    result: "LakAllianceHelpInfoResult" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class LakAllianceHelpInfoResult(betterproto.Message):
    alliance_id: int = betterproto.int32_field(1)
    alliance_name: str = betterproto.string_field(2)
    players: List["LakAllianceHelpInfoPlayer"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LakAllianceHelpInfoPlayer(betterproto.Message):
    player_id: int = betterproto.int32_field(1)
    nickname: str = betterproto.string_field(2)
    end_time: datetime = betterproto.message_field(3)
    can_enter: bool = betterproto.bool_field(4)
    re_enter_time: datetime = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class LakAllianceHelpInfoRequest(betterproto.Message):
    world_id: int = betterproto.int32_field(1)
    email: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    ip_id: str = betterproto.string_field(4)


class IpServiceStub(betterproto.ServiceStub):
    async def get_ip_details(
        self,
        ip_request: "IpRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IpDetails":
        return await self._unary_unary(
            "/grpc.api.v1.IpService/GetIpDetails",
            ip_request,
            IpDetails,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LakGatewayServiceStub(betterproto.ServiceStub):
    async def login_action_change_password(
        self,
        lak_gateway_input_login_action_change_password: "LakGatewayInputLoginActionChangePassword",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/LoginAction_ChangePassword",
            lak_gateway_input_login_action_change_password,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def session_action_data(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/SessionAction_Data",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def session_action_data_or_update(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/SessionAction_DataOrUpdate",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def session_action_update(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/SessionAction_Update",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def guest_login_action_show(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Show",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def guest_login_action_create(
        self,
        lak_gateway_input_guest_login_action_create: "LakGatewayInputGuestLoginActionCreate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Create",
            lak_gateway_input_guest_login_action_create,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def guest_login_action_remove(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Remove",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_needy_members(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_NeedyMembers",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_upgrade_building(
        self,
        lak_gateway_input_habitat_action_upgrade_building: "LakGatewayInputHabitatActionUpgradeBuilding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuilding",
            lak_gateway_input_habitat_action_upgrade_building,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_upgrade_buildings(
        self,
        lak_gateway_input_habitat_action_upgrade_buildings: "LakGatewayInputHabitatActionUpgradeBuildings",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuildings",
            lak_gateway_input_habitat_action_upgrade_buildings,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_research_knowledge(
        self,
        lak_gateway_input_habitat_action_research_knowledge: "LakGatewayInputHabitatActionResearchKnowledge",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_ResearchKnowledge",
            lak_gateway_input_habitat_action_research_knowledge,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_batch_unit_order(
        self,
        lak_gateway_input_habitat_action_batch_unit_order: "LakGatewayInputHabitatActionBatchUnitOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_BatchUnitOrder",
            lak_gateway_input_habitat_action_batch_unit_order,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_relocate_habitat_repeatable(
        self,
        lak_gateway_input_habitat_action_relocate_habitat_repeatable: "LakGatewayInputHabitatActionRelocateHabitatRepeatable",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_RelocateHabitatRepeatable",
            lak_gateway_input_habitat_action_relocate_habitat_repeatable,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_change_habitat_name(
        self,
        lak_gateway_input_habitat_action_change_habitat_name: "LakGatewayInputHabitatActionChangeHabitatName",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_ChangeHabitatName",
            lak_gateway_input_habitat_action_change_habitat_name,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_action_execute_missions_in_habitat_dictionary(
        self,
        lak_gateway_input_habitat_action_execute_missions_in_habitat_dictionary: "LakGatewayInputHabitatActionExecuteMissionsInHabitatDictionary",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatAction_ExecuteMissionsInHabitatDictionary",
            lak_gateway_input_habitat_action_execute_missions_in_habitat_dictionary,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_reservation_action_assign_reservations(
        self,
        lak_gateway_input_habitat_reservation_action_assign_reservations: "LakGatewayInputHabitatReservationActionAssignReservations",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatReservationAction_AssignReservations",
            lak_gateway_input_habitat_reservation_action_assign_reservations,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def habitat_reservation_action_delete_entries(
        self,
        lak_gateway_input_habitat_reservation_action_delete_entries: "LakGatewayInputHabitatReservationActionDeleteEntries",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/HabitatReservationAction_DeleteEntries",
            lak_gateway_input_habitat_reservation_action_delete_entries,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def transit_action_start_transit(
        self,
        lak_gateway_input_transit_action_start_transit: "LakGatewayInputTransitActionStartTransit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/TransitAction_StartTransit",
            lak_gateway_input_transit_action_start_transit,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def transit_action_synchronize_transit(
        self,
        lak_gateway_input_transit_action_synchronize_transit: "LakGatewayInputTransitActionSynchronizeTransit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/TransitAction_SynchronizeTransit",
            lak_gateway_input_transit_action_synchronize_transit,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_send_invitation(
        self,
        lak_gateway_input_alliance_action_send_invitation: "LakGatewayInputAllianceActionSendInvitation",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_SendInvitation",
            lak_gateway_input_alliance_action_send_invitation,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_accept_invitation(
        self,
        lak_gateway_input_alliance_action_accept_invitation: "LakGatewayInputAllianceActionAcceptInvitation",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_AcceptInvitation",
            lak_gateway_input_alliance_action_accept_invitation,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_leave_alliance(
        self,
        lak_gateway_input_alliance_action_leave_alliance: "LakGatewayInputAllianceActionLeaveAlliance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_LeaveAlliance",
            lak_gateway_input_alliance_action_leave_alliance,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_create_alliance(
        self,
        lak_gateway_input_alliance_action_create_alliance: "LakGatewayInputAllianceActionCreateAlliance",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_CreateAlliance",
            lak_gateway_input_alliance_action_create_alliance,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_set_permission(
        self,
        lak_gateway_input_alliance_action_set_permission: "LakGatewayInputAllianceActionSetPermission",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_SetPermission",
            lak_gateway_input_alliance_action_set_permission,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_change_alliance_data(
        self,
        lak_gateway_input_alliance_action_change_alliance_data: "LakGatewayInputAllianceActionChangeAllianceData",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_ChangeAllianceData",
            lak_gateway_input_alliance_action_change_alliance_data,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_action_deposit_resources(
        self,
        lak_gateway_input_alliance_action_deposit_resources: "LakGatewayInputAllianceActionDepositResources",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceAction_DepositResources",
            lak_gateway_input_alliance_action_deposit_resources,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_shop_action_shop_listing(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceShopAction_ShopListing",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def alliance_shop_action_purchase_shop_offer(
        self,
        lak_gateway_input_alliance_shop_action_purchase_shop_offer: "LakGatewayInputAllianceShopActionPurchaseShopOffer",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/AllianceShopAction_PurchaseShopOffer",
            lak_gateway_input_alliance_shop_action_purchase_shop_offer,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def map_action_map(
        self,
        lak_gateway_input_map_action_map: "LakGatewayInputMapActionMap",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/MapAction_Map",
            lak_gateway_input_map_action_map,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def trackable_event_action_batch(
        self,
        lak_gateway_input_trackable_event_action_batch: "LakGatewayInputTrackableEventActionBatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/TrackableEventAction_Batch",
            lak_gateway_input_trackable_event_action_batch,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def player_action_select_activity_gift(
        self,
        lak_gateway_input_empty: "LakGatewayInputEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/PlayerAction_SelectActivityGift",
            lak_gateway_input_empty,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def player_action_acknowledge_activity_gift(
        self,
        lak_gateway_input_player_action_acknowledge_activity_gift: "LakGatewayInputPlayerActionAcknowledgeActivityGift",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/PlayerAction_AcknowledgeActivityGift",
            lak_gateway_input_player_action_acknowledge_activity_gift,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def market_action_trade_resources_for_habitat_dictionary(
        self,
        lak_gateway_input_market_action_trade_resources_for_habitat_dictionary: "LakGatewayInputMarketActionTradeResourcesForHabitatDictionary",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakGatewayStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakGatewayService/MarketAction_TradeResourcesForHabitatDictionary",
            lak_gateway_input_market_action_trade_resources_for_habitat_dictionary,
            LakGatewayStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class LakConfigurationServiceStub(betterproto.ServiceStub):
    async def get_ios_configuration(
        self,
        configuration_input: "ConfigurationInput",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakIosDeviceConfiguration":
        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetIosConfiguration",
            configuration_input,
            LakIosDeviceConfiguration,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_android_configuration(
        self,
        configuration_input: "ConfigurationInput",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakAndroidDeviceConfiguration":
        return await self._unary_unary(
            "/grpc.api.v1.LakConfigurationService/GetAndroidConfiguration",
            configuration_input,
            LakAndroidDeviceConfiguration,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LakDataServiceStub(betterproto.ServiceStub):
    async def get_all_regions(
        self,
        custom_empty: "CustomEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AllLakRegions":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetAllRegions",
            custom_empty,
            AllLakRegions,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all_worlds(
        self,
        custom_empty: "CustomEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AllLakWorlds":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetAllWorlds",
            custom_empty,
            AllLakWorlds,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_world(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakWorldMetadata":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetWorld",
            server_query,
            LakWorldMetadata,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_application_version(
        self,
        custom_empty: "CustomEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakApplicationVersion":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetApplicationVersion",
            custom_empty,
            LakApplicationVersion,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_all(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAll":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAll",
            server_query,
            LakPublicDataAll,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_all_alliances(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllAlliances":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllAlliances",
            server_query,
            LakPublicDataAllAlliances,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_all_players(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllPlayers":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllPlayers",
            server_query,
            LakPublicDataAllPlayers,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_all_habitats(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllHabitats":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAllHabitats",
            server_query,
            LakPublicDataAllHabitats,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_alliance(
        self,
        server_query_with_object_id: "ServerQueryWithObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleAlliance":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataAlliance",
            server_query_with_object_id,
            LakPublicDataSingleAlliance,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_player(
        self,
        server_query_with_object_id: "ServerQueryWithObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSinglePlayer":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataPlayer",
            server_query_with_object_id,
            LakPublicDataSinglePlayer,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_habitat(
        self,
        server_query_with_object_id: "ServerQueryWithObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleHabitat":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHabitat",
            server_query_with_object_id,
            LakPublicDataSingleHabitat,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_habitat_complex(
        self,
        server_query_with_object_id: "ServerQueryWithObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleHabitatComplex":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHabitatComplex",
            server_query_with_object_id,
            LakPublicDataSingleHabitatComplex,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_history(
        self,
        server_query: "ServerQuery",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataHistory":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistory",
            server_query,
            LakPublicDataHistory,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_all(
        self,
        server_query_with_date: "ServerQueryWithDate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAll":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAll",
            server_query_with_date,
            LakPublicDataAll,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_all_alliances(
        self,
        server_query_with_date: "ServerQueryWithDate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllAlliances":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllAlliances",
            server_query_with_date,
            LakPublicDataAllAlliances,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_all_players(
        self,
        server_query_with_date: "ServerQueryWithDate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllPlayers":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllPlayers",
            server_query_with_date,
            LakPublicDataAllPlayers,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_all_habitats(
        self,
        server_query_with_date: "ServerQueryWithDate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataAllHabitats":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllHabitats",
            server_query_with_date,
            LakPublicDataAllHabitats,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_alliance(
        self,
        server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleAlliance":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAlliance",
            server_query_with_date_and_object_id,
            LakPublicDataSingleAlliance,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_player(
        self,
        server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSinglePlayer":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalPlayer",
            server_query_with_date_and_object_id,
            LakPublicDataSinglePlayer,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_habitat(
        self,
        server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleHabitat":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitat",
            server_query_with_date_and_object_id,
            LakPublicDataSingleHabitat,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_public_data_historical_habitat_complex(
        self,
        server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "LakPublicDataSingleHabitatComplex":
        return await self._unary_unary(
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitatComplex",
            server_query_with_date_and_object_id,
            LakPublicDataSingleHabitatComplex,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LakInteractiveServiceStub(betterproto.ServiceStub):
    async def get_scarx_ips(
        self,
        custom_empty: "CustomEmpty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AllScarxIps":
        return await self._unary_unary(
            "/grpc.api.v1.LakInteractiveService/GetScarxIps",
            custom_empty,
            AllScarxIps,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def process_lak_create_account(
        self,
        lak_create_account_request: "LakCreateAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakCreateAccountStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakInteractiveService/ProcessLakCreateAccount",
            lak_create_account_request,
            LakCreateAccountStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def process_get_alliance_help_info(
        self,
        lak_alliance_help_info_request: "LakAllianceHelpInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["LakAllianceHelpInfoStatus"]:
        async for response in self._unary_stream(
            "/grpc.api.v1.LakInteractiveService/ProcessGetAllianceHelpInfo",
            lak_alliance_help_info_request,
            LakAllianceHelpInfoStatus,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class IpServiceBase(ServiceBase):

    async def get_ip_details(self, ip_request: "IpRequest") -> "IpDetails":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ip_details(
        self, stream: "grpclib.server.Stream[IpRequest, IpDetails]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ip_details(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.api.v1.IpService/GetIpDetails": grpclib.const.Handler(
                self.__rpc_get_ip_details,
                grpclib.const.Cardinality.UNARY_UNARY,
                IpRequest,
                IpDetails,
            ),
        }


class LakGatewayServiceBase(ServiceBase):

    async def login_action_change_password(
        self,
        lak_gateway_input_login_action_change_password: "LakGatewayInputLoginActionChangePassword",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def session_action_data(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def session_action_data_or_update(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def session_action_update(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def guest_login_action_show(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def guest_login_action_create(
        self,
        lak_gateway_input_guest_login_action_create: "LakGatewayInputGuestLoginActionCreate",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def guest_login_action_remove(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_needy_members(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_upgrade_building(
        self,
        lak_gateway_input_habitat_action_upgrade_building: "LakGatewayInputHabitatActionUpgradeBuilding",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_upgrade_buildings(
        self,
        lak_gateway_input_habitat_action_upgrade_buildings: "LakGatewayInputHabitatActionUpgradeBuildings",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_research_knowledge(
        self,
        lak_gateway_input_habitat_action_research_knowledge: "LakGatewayInputHabitatActionResearchKnowledge",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_batch_unit_order(
        self,
        lak_gateway_input_habitat_action_batch_unit_order: "LakGatewayInputHabitatActionBatchUnitOrder",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_relocate_habitat_repeatable(
        self,
        lak_gateway_input_habitat_action_relocate_habitat_repeatable: "LakGatewayInputHabitatActionRelocateHabitatRepeatable",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_change_habitat_name(
        self,
        lak_gateway_input_habitat_action_change_habitat_name: "LakGatewayInputHabitatActionChangeHabitatName",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_action_execute_missions_in_habitat_dictionary(
        self,
        lak_gateway_input_habitat_action_execute_missions_in_habitat_dictionary: "LakGatewayInputHabitatActionExecuteMissionsInHabitatDictionary",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_reservation_action_assign_reservations(
        self,
        lak_gateway_input_habitat_reservation_action_assign_reservations: "LakGatewayInputHabitatReservationActionAssignReservations",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def habitat_reservation_action_delete_entries(
        self,
        lak_gateway_input_habitat_reservation_action_delete_entries: "LakGatewayInputHabitatReservationActionDeleteEntries",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def transit_action_start_transit(
        self,
        lak_gateway_input_transit_action_start_transit: "LakGatewayInputTransitActionStartTransit",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def transit_action_synchronize_transit(
        self,
        lak_gateway_input_transit_action_synchronize_transit: "LakGatewayInputTransitActionSynchronizeTransit",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_send_invitation(
        self,
        lak_gateway_input_alliance_action_send_invitation: "LakGatewayInputAllianceActionSendInvitation",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_accept_invitation(
        self,
        lak_gateway_input_alliance_action_accept_invitation: "LakGatewayInputAllianceActionAcceptInvitation",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_leave_alliance(
        self,
        lak_gateway_input_alliance_action_leave_alliance: "LakGatewayInputAllianceActionLeaveAlliance",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_create_alliance(
        self,
        lak_gateway_input_alliance_action_create_alliance: "LakGatewayInputAllianceActionCreateAlliance",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_set_permission(
        self,
        lak_gateway_input_alliance_action_set_permission: "LakGatewayInputAllianceActionSetPermission",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_change_alliance_data(
        self,
        lak_gateway_input_alliance_action_change_alliance_data: "LakGatewayInputAllianceActionChangeAllianceData",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_action_deposit_resources(
        self,
        lak_gateway_input_alliance_action_deposit_resources: "LakGatewayInputAllianceActionDepositResources",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_shop_action_shop_listing(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def alliance_shop_action_purchase_shop_offer(
        self,
        lak_gateway_input_alliance_shop_action_purchase_shop_offer: "LakGatewayInputAllianceShopActionPurchaseShopOffer",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def map_action_map(
        self, lak_gateway_input_map_action_map: "LakGatewayInputMapActionMap"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def trackable_event_action_batch(
        self,
        lak_gateway_input_trackable_event_action_batch: "LakGatewayInputTrackableEventActionBatch",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def player_action_select_activity_gift(
        self, lak_gateway_input_empty: "LakGatewayInputEmpty"
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def player_action_acknowledge_activity_gift(
        self,
        lak_gateway_input_player_action_acknowledge_activity_gift: "LakGatewayInputPlayerActionAcknowledgeActivityGift",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def market_action_trade_resources_for_habitat_dictionary(
        self,
        lak_gateway_input_market_action_trade_resources_for_habitat_dictionary: "LakGatewayInputMarketActionTradeResourcesForHabitatDictionary",
    ) -> AsyncIterator["LakGatewayStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakGatewayStatus()

    async def __rpc_login_action_change_password(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputLoginActionChangePassword, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.login_action_change_password,
            stream,
            request,
        )

    async def __rpc_session_action_data(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.session_action_data,
            stream,
            request,
        )

    async def __rpc_session_action_data_or_update(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.session_action_data_or_update,
            stream,
            request,
        )

    async def __rpc_session_action_update(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.session_action_update,
            stream,
            request,
        )

    async def __rpc_guest_login_action_show(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.guest_login_action_show,
            stream,
            request,
        )

    async def __rpc_guest_login_action_create(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputGuestLoginActionCreate, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.guest_login_action_create,
            stream,
            request,
        )

    async def __rpc_guest_login_action_remove(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.guest_login_action_remove,
            stream,
            request,
        )

    async def __rpc_alliance_action_needy_members(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_needy_members,
            stream,
            request,
        )

    async def __rpc_habitat_action_upgrade_building(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionUpgradeBuilding, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_upgrade_building,
            stream,
            request,
        )

    async def __rpc_habitat_action_upgrade_buildings(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionUpgradeBuildings, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_upgrade_buildings,
            stream,
            request,
        )

    async def __rpc_habitat_action_research_knowledge(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionResearchKnowledge, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_research_knowledge,
            stream,
            request,
        )

    async def __rpc_habitat_action_batch_unit_order(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionBatchUnitOrder, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_batch_unit_order,
            stream,
            request,
        )

    async def __rpc_habitat_action_relocate_habitat_repeatable(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionRelocateHabitatRepeatable, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_relocate_habitat_repeatable,
            stream,
            request,
        )

    async def __rpc_habitat_action_change_habitat_name(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionChangeHabitatName, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_change_habitat_name,
            stream,
            request,
        )

    async def __rpc_habitat_action_execute_missions_in_habitat_dictionary(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatActionExecuteMissionsInHabitatDictionary, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_action_execute_missions_in_habitat_dictionary,
            stream,
            request,
        )

    async def __rpc_habitat_reservation_action_assign_reservations(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatReservationActionAssignReservations, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_reservation_action_assign_reservations,
            stream,
            request,
        )

    async def __rpc_habitat_reservation_action_delete_entries(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputHabitatReservationActionDeleteEntries, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.habitat_reservation_action_delete_entries,
            stream,
            request,
        )

    async def __rpc_transit_action_start_transit(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputTransitActionStartTransit, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.transit_action_start_transit,
            stream,
            request,
        )

    async def __rpc_transit_action_synchronize_transit(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputTransitActionSynchronizeTransit, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.transit_action_synchronize_transit,
            stream,
            request,
        )

    async def __rpc_alliance_action_send_invitation(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionSendInvitation, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_send_invitation,
            stream,
            request,
        )

    async def __rpc_alliance_action_accept_invitation(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionAcceptInvitation, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_accept_invitation,
            stream,
            request,
        )

    async def __rpc_alliance_action_leave_alliance(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionLeaveAlliance, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_leave_alliance,
            stream,
            request,
        )

    async def __rpc_alliance_action_create_alliance(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionCreateAlliance, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_create_alliance,
            stream,
            request,
        )

    async def __rpc_alliance_action_set_permission(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionSetPermission, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_set_permission,
            stream,
            request,
        )

    async def __rpc_alliance_action_change_alliance_data(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionChangeAllianceData, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_change_alliance_data,
            stream,
            request,
        )

    async def __rpc_alliance_action_deposit_resources(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceActionDepositResources, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_action_deposit_resources,
            stream,
            request,
        )

    async def __rpc_alliance_shop_action_shop_listing(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_shop_action_shop_listing,
            stream,
            request,
        )

    async def __rpc_alliance_shop_action_purchase_shop_offer(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputAllianceShopActionPurchaseShopOffer, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.alliance_shop_action_purchase_shop_offer,
            stream,
            request,
        )

    async def __rpc_map_action_map(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputMapActionMap, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.map_action_map,
            stream,
            request,
        )

    async def __rpc_trackable_event_action_batch(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputTrackableEventActionBatch, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.trackable_event_action_batch,
            stream,
            request,
        )

    async def __rpc_player_action_select_activity_gift(
        self, stream: "grpclib.server.Stream[LakGatewayInputEmpty, LakGatewayStatus]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.player_action_select_activity_gift,
            stream,
            request,
        )

    async def __rpc_player_action_acknowledge_activity_gift(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputPlayerActionAcknowledgeActivityGift, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.player_action_acknowledge_activity_gift,
            stream,
            request,
        )

    async def __rpc_market_action_trade_resources_for_habitat_dictionary(
        self,
        stream: "grpclib.server.Stream[LakGatewayInputMarketActionTradeResourcesForHabitatDictionary, LakGatewayStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.market_action_trade_resources_for_habitat_dictionary,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.api.v1.LakGatewayService/LoginAction_ChangePassword": grpclib.const.Handler(
                self.__rpc_login_action_change_password,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputLoginActionChangePassword,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/SessionAction_Data": grpclib.const.Handler(
                self.__rpc_session_action_data,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/SessionAction_DataOrUpdate": grpclib.const.Handler(
                self.__rpc_session_action_data_or_update,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/SessionAction_Update": grpclib.const.Handler(
                self.__rpc_session_action_update,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Show": grpclib.const.Handler(
                self.__rpc_guest_login_action_show,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Create": grpclib.const.Handler(
                self.__rpc_guest_login_action_create,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputGuestLoginActionCreate,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/GuestLoginAction_Remove": grpclib.const.Handler(
                self.__rpc_guest_login_action_remove,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_NeedyMembers": grpclib.const.Handler(
                self.__rpc_alliance_action_needy_members,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuilding": grpclib.const.Handler(
                self.__rpc_habitat_action_upgrade_building,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionUpgradeBuilding,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_UpgradeBuildings": grpclib.const.Handler(
                self.__rpc_habitat_action_upgrade_buildings,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionUpgradeBuildings,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_ResearchKnowledge": grpclib.const.Handler(
                self.__rpc_habitat_action_research_knowledge,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionResearchKnowledge,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_BatchUnitOrder": grpclib.const.Handler(
                self.__rpc_habitat_action_batch_unit_order,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionBatchUnitOrder,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_RelocateHabitatRepeatable": grpclib.const.Handler(
                self.__rpc_habitat_action_relocate_habitat_repeatable,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionRelocateHabitatRepeatable,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_ChangeHabitatName": grpclib.const.Handler(
                self.__rpc_habitat_action_change_habitat_name,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionChangeHabitatName,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatAction_ExecuteMissionsInHabitatDictionary": grpclib.const.Handler(
                self.__rpc_habitat_action_execute_missions_in_habitat_dictionary,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatActionExecuteMissionsInHabitatDictionary,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatReservationAction_AssignReservations": grpclib.const.Handler(
                self.__rpc_habitat_reservation_action_assign_reservations,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatReservationActionAssignReservations,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/HabitatReservationAction_DeleteEntries": grpclib.const.Handler(
                self.__rpc_habitat_reservation_action_delete_entries,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputHabitatReservationActionDeleteEntries,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/TransitAction_StartTransit": grpclib.const.Handler(
                self.__rpc_transit_action_start_transit,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputTransitActionStartTransit,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/TransitAction_SynchronizeTransit": grpclib.const.Handler(
                self.__rpc_transit_action_synchronize_transit,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputTransitActionSynchronizeTransit,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_SendInvitation": grpclib.const.Handler(
                self.__rpc_alliance_action_send_invitation,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionSendInvitation,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_AcceptInvitation": grpclib.const.Handler(
                self.__rpc_alliance_action_accept_invitation,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionAcceptInvitation,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_LeaveAlliance": grpclib.const.Handler(
                self.__rpc_alliance_action_leave_alliance,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionLeaveAlliance,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_CreateAlliance": grpclib.const.Handler(
                self.__rpc_alliance_action_create_alliance,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionCreateAlliance,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_SetPermission": grpclib.const.Handler(
                self.__rpc_alliance_action_set_permission,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionSetPermission,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_ChangeAllianceData": grpclib.const.Handler(
                self.__rpc_alliance_action_change_alliance_data,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionChangeAllianceData,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceAction_DepositResources": grpclib.const.Handler(
                self.__rpc_alliance_action_deposit_resources,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceActionDepositResources,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceShopAction_ShopListing": grpclib.const.Handler(
                self.__rpc_alliance_shop_action_shop_listing,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/AllianceShopAction_PurchaseShopOffer": grpclib.const.Handler(
                self.__rpc_alliance_shop_action_purchase_shop_offer,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputAllianceShopActionPurchaseShopOffer,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/MapAction_Map": grpclib.const.Handler(
                self.__rpc_map_action_map,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputMapActionMap,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/TrackableEventAction_Batch": grpclib.const.Handler(
                self.__rpc_trackable_event_action_batch,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputTrackableEventActionBatch,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/PlayerAction_SelectActivityGift": grpclib.const.Handler(
                self.__rpc_player_action_select_activity_gift,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputEmpty,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/PlayerAction_AcknowledgeActivityGift": grpclib.const.Handler(
                self.__rpc_player_action_acknowledge_activity_gift,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputPlayerActionAcknowledgeActivityGift,
                LakGatewayStatus,
            ),
            "/grpc.api.v1.LakGatewayService/MarketAction_TradeResourcesForHabitatDictionary": grpclib.const.Handler(
                self.__rpc_market_action_trade_resources_for_habitat_dictionary,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakGatewayInputMarketActionTradeResourcesForHabitatDictionary,
                LakGatewayStatus,
            ),
        }


class LakConfigurationServiceBase(ServiceBase):

    async def get_ios_configuration(
        self, configuration_input: "ConfigurationInput"
    ) -> "LakIosDeviceConfiguration":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_android_configuration(
        self, configuration_input: "ConfigurationInput"
    ) -> "LakAndroidDeviceConfiguration":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ios_configuration(
        self,
        stream: "grpclib.server.Stream[ConfigurationInput, LakIosDeviceConfiguration]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_ios_configuration(request)
        await stream.send_message(response)

    async def __rpc_get_android_configuration(
        self,
        stream: "grpclib.server.Stream[ConfigurationInput, LakAndroidDeviceConfiguration]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_android_configuration(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.api.v1.LakConfigurationService/GetIosConfiguration": grpclib.const.Handler(
                self.__rpc_get_ios_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                ConfigurationInput,
                LakIosDeviceConfiguration,
            ),
            "/grpc.api.v1.LakConfigurationService/GetAndroidConfiguration": grpclib.const.Handler(
                self.__rpc_get_android_configuration,
                grpclib.const.Cardinality.UNARY_UNARY,
                ConfigurationInput,
                LakAndroidDeviceConfiguration,
            ),
        }


class LakDataServiceBase(ServiceBase):

    async def get_all_regions(self, custom_empty: "CustomEmpty") -> "AllLakRegions":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_worlds(self, custom_empty: "CustomEmpty") -> "AllLakWorlds":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_world(self, server_query: "ServerQuery") -> "LakWorldMetadata":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_application_version(
        self, custom_empty: "CustomEmpty"
    ) -> "LakApplicationVersion":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_all(
        self, server_query: "ServerQuery"
    ) -> "LakPublicDataAll":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_all_alliances(
        self, server_query: "ServerQuery"
    ) -> "LakPublicDataAllAlliances":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_all_players(
        self, server_query: "ServerQuery"
    ) -> "LakPublicDataAllPlayers":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_all_habitats(
        self, server_query: "ServerQuery"
    ) -> "LakPublicDataAllHabitats":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_alliance(
        self, server_query_with_object_id: "ServerQueryWithObjectId"
    ) -> "LakPublicDataSingleAlliance":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_player(
        self, server_query_with_object_id: "ServerQueryWithObjectId"
    ) -> "LakPublicDataSinglePlayer":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_habitat(
        self, server_query_with_object_id: "ServerQueryWithObjectId"
    ) -> "LakPublicDataSingleHabitat":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_habitat_complex(
        self, server_query_with_object_id: "ServerQueryWithObjectId"
    ) -> "LakPublicDataSingleHabitatComplex":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_history(
        self, server_query: "ServerQuery"
    ) -> "LakPublicDataHistory":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_all(
        self, server_query_with_date: "ServerQueryWithDate"
    ) -> "LakPublicDataAll":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_all_alliances(
        self, server_query_with_date: "ServerQueryWithDate"
    ) -> "LakPublicDataAllAlliances":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_all_players(
        self, server_query_with_date: "ServerQueryWithDate"
    ) -> "LakPublicDataAllPlayers":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_all_habitats(
        self, server_query_with_date: "ServerQueryWithDate"
    ) -> "LakPublicDataAllHabitats":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_alliance(
        self, server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId"
    ) -> "LakPublicDataSingleAlliance":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_player(
        self, server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId"
    ) -> "LakPublicDataSinglePlayer":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_habitat(
        self, server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId"
    ) -> "LakPublicDataSingleHabitat":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_public_data_historical_habitat_complex(
        self, server_query_with_date_and_object_id: "ServerQueryWithDateAndObjectId"
    ) -> "LakPublicDataSingleHabitatComplex":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_all_regions(
        self, stream: "grpclib.server.Stream[CustomEmpty, AllLakRegions]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_all_regions(request)
        await stream.send_message(response)

    async def __rpc_get_all_worlds(
        self, stream: "grpclib.server.Stream[CustomEmpty, AllLakWorlds]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_all_worlds(request)
        await stream.send_message(response)

    async def __rpc_get_world(
        self, stream: "grpclib.server.Stream[ServerQuery, LakWorldMetadata]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_world(request)
        await stream.send_message(response)

    async def __rpc_get_application_version(
        self, stream: "grpclib.server.Stream[CustomEmpty, LakApplicationVersion]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_application_version(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_all(
        self, stream: "grpclib.server.Stream[ServerQuery, LakPublicDataAll]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_all(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_all_alliances(
        self, stream: "grpclib.server.Stream[ServerQuery, LakPublicDataAllAlliances]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_all_alliances(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_all_players(
        self, stream: "grpclib.server.Stream[ServerQuery, LakPublicDataAllPlayers]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_all_players(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_all_habitats(
        self, stream: "grpclib.server.Stream[ServerQuery, LakPublicDataAllHabitats]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_all_habitats(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_alliance(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithObjectId, LakPublicDataSingleAlliance]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_alliance(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_player(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithObjectId, LakPublicDataSinglePlayer]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_player(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_habitat(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithObjectId, LakPublicDataSingleHabitat]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_habitat(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_habitat_complex(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithObjectId, LakPublicDataSingleHabitatComplex]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_habitat_complex(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_history(
        self, stream: "grpclib.server.Stream[ServerQuery, LakPublicDataHistory]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_history(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_all(
        self, stream: "grpclib.server.Stream[ServerQueryWithDate, LakPublicDataAll]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_all(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_all_alliances(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDate, LakPublicDataAllAlliances]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_all_alliances(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_all_players(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDate, LakPublicDataAllPlayers]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_all_players(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_all_habitats(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDate, LakPublicDataAllHabitats]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_all_habitats(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_alliance(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDateAndObjectId, LakPublicDataSingleAlliance]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_alliance(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_player(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDateAndObjectId, LakPublicDataSinglePlayer]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_player(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_habitat(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDateAndObjectId, LakPublicDataSingleHabitat]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_habitat(request)
        await stream.send_message(response)

    async def __rpc_get_public_data_historical_habitat_complex(
        self,
        stream: "grpclib.server.Stream[ServerQueryWithDateAndObjectId, LakPublicDataSingleHabitatComplex]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_public_data_historical_habitat_complex(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.api.v1.LakDataService/GetAllRegions": grpclib.const.Handler(
                self.__rpc_get_all_regions,
                grpclib.const.Cardinality.UNARY_UNARY,
                CustomEmpty,
                AllLakRegions,
            ),
            "/grpc.api.v1.LakDataService/GetAllWorlds": grpclib.const.Handler(
                self.__rpc_get_all_worlds,
                grpclib.const.Cardinality.UNARY_UNARY,
                CustomEmpty,
                AllLakWorlds,
            ),
            "/grpc.api.v1.LakDataService/GetWorld": grpclib.const.Handler(
                self.__rpc_get_world,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakWorldMetadata,
            ),
            "/grpc.api.v1.LakDataService/GetApplicationVersion": grpclib.const.Handler(
                self.__rpc_get_application_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                CustomEmpty,
                LakApplicationVersion,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataAll": grpclib.const.Handler(
                self.__rpc_get_public_data_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakPublicDataAll,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataAllAlliances": grpclib.const.Handler(
                self.__rpc_get_public_data_all_alliances,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakPublicDataAllAlliances,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataAllPlayers": grpclib.const.Handler(
                self.__rpc_get_public_data_all_players,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakPublicDataAllPlayers,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataAllHabitats": grpclib.const.Handler(
                self.__rpc_get_public_data_all_habitats,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakPublicDataAllHabitats,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataAlliance": grpclib.const.Handler(
                self.__rpc_get_public_data_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithObjectId,
                LakPublicDataSingleAlliance,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataPlayer": grpclib.const.Handler(
                self.__rpc_get_public_data_player,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithObjectId,
                LakPublicDataSinglePlayer,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHabitat": grpclib.const.Handler(
                self.__rpc_get_public_data_habitat,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithObjectId,
                LakPublicDataSingleHabitat,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHabitatComplex": grpclib.const.Handler(
                self.__rpc_get_public_data_habitat_complex,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithObjectId,
                LakPublicDataSingleHabitatComplex,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistory": grpclib.const.Handler(
                self.__rpc_get_public_data_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQuery,
                LakPublicDataHistory,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAll": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDate,
                LakPublicDataAll,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllAlliances": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_all_alliances,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDate,
                LakPublicDataAllAlliances,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllPlayers": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_all_players,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDate,
                LakPublicDataAllPlayers,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAllHabitats": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_all_habitats,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDate,
                LakPublicDataAllHabitats,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalAlliance": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_alliance,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDateAndObjectId,
                LakPublicDataSingleAlliance,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalPlayer": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_player,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDateAndObjectId,
                LakPublicDataSinglePlayer,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitat": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_habitat,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDateAndObjectId,
                LakPublicDataSingleHabitat,
            ),
            "/grpc.api.v1.LakDataService/GetPublicDataHistoricalHabitatComplex": grpclib.const.Handler(
                self.__rpc_get_public_data_historical_habitat_complex,
                grpclib.const.Cardinality.UNARY_UNARY,
                ServerQueryWithDateAndObjectId,
                LakPublicDataSingleHabitatComplex,
            ),
        }


class LakInteractiveServiceBase(ServiceBase):

    async def get_scarx_ips(self, custom_empty: "CustomEmpty") -> "AllScarxIps":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def process_lak_create_account(
        self, lak_create_account_request: "LakCreateAccountRequest"
    ) -> AsyncIterator["LakCreateAccountStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakCreateAccountStatus()

    async def process_get_alliance_help_info(
        self, lak_alliance_help_info_request: "LakAllianceHelpInfoRequest"
    ) -> AsyncIterator["LakAllianceHelpInfoStatus"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield LakAllianceHelpInfoStatus()

    async def __rpc_get_scarx_ips(
        self, stream: "grpclib.server.Stream[CustomEmpty, AllScarxIps]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_scarx_ips(request)
        await stream.send_message(response)

    async def __rpc_process_lak_create_account(
        self,
        stream: "grpclib.server.Stream[LakCreateAccountRequest, LakCreateAccountStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.process_lak_create_account,
            stream,
            request,
        )

    async def __rpc_process_get_alliance_help_info(
        self,
        stream: "grpclib.server.Stream[LakAllianceHelpInfoRequest, LakAllianceHelpInfoStatus]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.process_get_alliance_help_info,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/grpc.api.v1.LakInteractiveService/GetScarxIps": grpclib.const.Handler(
                self.__rpc_get_scarx_ips,
                grpclib.const.Cardinality.UNARY_UNARY,
                CustomEmpty,
                AllScarxIps,
            ),
            "/grpc.api.v1.LakInteractiveService/ProcessLakCreateAccount": grpclib.const.Handler(
                self.__rpc_process_lak_create_account,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakCreateAccountRequest,
                LakCreateAccountStatus,
            ),
            "/grpc.api.v1.LakInteractiveService/ProcessGetAllianceHelpInfo": grpclib.const.Handler(
                self.__rpc_process_get_alliance_help_info,
                grpclib.const.Cardinality.UNARY_STREAM,
                LakAllianceHelpInfoRequest,
                LakAllianceHelpInfoStatus,
            ),
        }

{"version":3,"file":"vendors-node_modules_lumino_collections_dist_index_es6_js.f926820e04f5eb392b61.js","mappings":"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","sources":["webpack://@jupyterlab/git/./node_modules/@lumino/collections/src/linkedlist.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IRetroable } from '@lumino/algorithm';\n\n/**\n * A generic doubly-linked list.\n */\nexport class LinkedList<T> implements Iterable<T>, IRetroable<T> {\n  /**\n   * Whether the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get isEmpty(): boolean {\n    return this._size === 0;\n  }\n\n  /**\n   * The size of the list.\n   *\n   * #### Complexity\n   * `O(1)`\n   *\n   * #### Notes\n   * This is equivalent to `length`.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * The length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `size`.\n   *\n   * This property is deprecated.\n   */\n  get length(): number {\n    return this._size;\n  }\n\n  /**\n   * The first value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get first(): T | undefined {\n    return this._first ? this._first.value : undefined;\n  }\n\n  /**\n   * The last value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get last(): T | undefined {\n    return this._last ? this._last.value : undefined;\n  }\n\n  /**\n   * The first node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get firstNode(): LinkedList.INode<T> | null {\n    return this._first;\n  }\n\n  /**\n   * The last node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get lastNode(): LinkedList.INode<T> | null {\n    return this._last;\n  }\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the first value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *[Symbol.iterator](): IterableIterator<T> {\n    let node = this._first;\n    while (node) {\n      yield node.value;\n      node = node.next;\n    }\n  }\n\n  /**\n   * Create a reverse iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the last value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *retro(): IterableIterator<T> {\n    let node = this._last;\n    while (node) {\n      yield node.value;\n      node = node.prev;\n    }\n  }\n\n  /**\n   * Create an iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the first node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *nodes(): IterableIterator<LinkedList.INode<T>> {\n    let node = this._first;\n    while (node) {\n      yield node;\n      node = node.next;\n    }\n  }\n\n  /**\n   * Create a reverse iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the last node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  *retroNodes(): IterableIterator<LinkedList.INode<T>> {\n    let node = this._last;\n    while (node) {\n      yield node;\n      node = node.prev;\n    }\n  }\n\n  /**\n   * Assign new values to the list, replacing all current values.\n   *\n   * @param values - The values to assign to the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  assign(values: Iterable<T>): void {\n    this.clear();\n    for (const value of values) {\n      this.addLast(value);\n    }\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addLast`.\n   */\n  push(value: T): void {\n    this.addLast(value);\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeLast`.\n   */\n  pop(): T | undefined {\n    return this.removeLast();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addFirst`.\n   */\n  shift(value: T): void {\n    this.addFirst(value);\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeFirst`.\n   */\n  unshift(): T | undefined {\n    return this.removeFirst();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addFirst(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._first) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.next = this._first;\n      this._first.prev = node;\n      this._first = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addLast(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._last) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.prev = this._last;\n      this._last.next = node;\n      this._last = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value before a specific node in the list.\n   *\n   * @param value - The value to insert before the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertBefore(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._first) {\n      return this.addFirst(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let prev = _ref.prev!;\n    node.next = _ref;\n    node.prev = prev;\n    _ref.prev = node;\n    prev.next = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value after a specific node in the list.\n   *\n   * @param value - The value to insert after the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertAfter(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._last) {\n      return this.addLast(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let next = _ref.next!;\n    node.next = next;\n    node.prev = _ref;\n    _ref.next = node;\n    next.prev = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeFirst(): T | undefined {\n    let node = this._first;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._first = node.next;\n      this._first!.prev = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeLast(): T | undefined {\n    let node = this._last;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._first) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._last = node.prev;\n      this._last!.next = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove a specific node from the list.\n   *\n   * @param node - The node to remove from the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * The node must be owned by the list.\n   */\n  removeNode(node: LinkedList.INode<T>): void {\n    if (!(node instanceof Private.LinkedListNode) || node.list !== this) {\n      throw new Error('Node is not owned by the list.');\n    }\n    let _node = node as Private.LinkedListNode<T>;\n    if (_node === this._first && _node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else if (_node === this._first) {\n      this._first = _node.next;\n      this._first!.prev = null;\n    } else if (_node === this._last) {\n      this._last = _node.prev;\n      this._last!.next = null;\n    } else {\n      _node.next!.prev = _node.prev;\n      _node.prev!.next = _node.next;\n    }\n    _node.list = null;\n    _node.next = null;\n    _node.prev = null;\n    this._size--;\n  }\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  clear(): void {\n    let node = this._first;\n    while (node) {\n      let next = node.next;\n      node.list = null;\n      node.prev = null;\n      node.next = null;\n      node = next;\n    }\n    this._first = null;\n    this._last = null;\n    this._size = 0;\n  }\n\n  private _first: Private.LinkedListNode<T> | null = null;\n  private _last: Private.LinkedListNode<T> | null = null;\n  private _size = 0;\n}\n\n/**\n * The namespace for the `LinkedList` class statics.\n */\nexport namespace LinkedList {\n  /**\n   * An object which represents a node in a linked list.\n   *\n   * #### Notes\n   * User code will not create linked list nodes directly. Nodes\n   * are created automatically when values are added to a list.\n   */\n  export interface INode<T> {\n    /**\n     * The linked list which created and owns the node.\n     *\n     * This will be `null` when the node is removed from the list.\n     */\n    readonly list: LinkedList<T> | null;\n\n    /**\n     * The next node in the list.\n     *\n     * This will be `null` when the node is the last node in the list\n     * or when the node is removed from the list.\n     */\n    readonly next: INode<T> | null;\n\n    /**\n     * The previous node in the list.\n     *\n     * This will be `null` when the node is the first node in the list\n     * or when the node is removed from the list.\n     */\n    readonly prev: INode<T> | null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n  }\n\n  /**\n   * Create a linked list from an iterable of values.\n   *\n   * @param values - The iterable object of interest.\n   *\n   * @returns A new linked list initialized with the given values.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  export function from<T>(values: Iterable<T>): LinkedList<T> {\n    let list = new LinkedList<T>();\n    list.assign(values);\n    return list;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The internal linked list node implementation.\n   */\n  export class LinkedListNode<T> {\n    /**\n     * The linked list which created and owns the node.\n     */\n    list: LinkedList<T> | null = null;\n\n    /**\n     * The next node in the list.\n     */\n    next: LinkedListNode<T> | null = null;\n\n    /**\n     * The previous node in the list.\n     */\n    prev: LinkedListNode<T> | null = null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n\n    /**\n     * Construct a new linked list node.\n     *\n     * @param list - The list which owns the node.\n     *\n     * @param value - The value for the link.\n     */\n    constructor(list: LinkedList<T>, value: T) {\n      this.list = list;\n      this.value = value;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}
from pydantic import BaseModel, Field

from datetime import datetime
from dateutil.relativedelta import relativedelta
from typing import Set, Optional, Dict, List




CLASS_ORIGIN_AUTHOR="Russlan Ramdowar;russlan@ftredge.com"
CLASS_ORGIN_DATE=datetime(2024, 2, 12, 20, 5)

SCHEMA_VERSION = 2.3
CLASS_REVISION_AUTHOR="Russlan Ramdowar;russlan@ftredge.com"
CLASS_REVISION_DATE=datetime(2024, 2, 13, 20, 15)
LAST_MODIFICATION="Changed default IAM_GROUPS"

DOMAIN="user"
OBJ_REF = "usrsttus"

DEFAULT_IAM_GROUPS={"pulseroot":["full_open_read"]}
DEFAULT_SUBSCRIPTION_PLAN="subscription_free"
DEFAULT_SUBSCRIPTION_STATUS="active"
DEFAULT_SUBSCRIPTION_INSIGHT_CREDITS=10
DEFAULT_EXTRA_INSIGHT_CREDITS=0

############################################ !!!!! ALWAYS UPDATE SCHEMA VERSION , IF SCHEMA IS BEING MODIFIED !!! ############################################
class UserStatus(BaseModel):
    schema_version: float = Field(default=SCHEMA_VERSION, description="Version of this Class == version of DB Schema") #User can Read only
    # uid: str = Field(frozen=True, description="Generated by Firebase Auth") #User can Read only
    # puid:str = Field(default_factory=lambda: f"{DOMAIN}{OBJ_REF}{datetime.utcnow().strftime('%Y%m%d%H%M')}{uuid.uuid4().hex[:8]}".lower(),
    #                   frozen=True, 
    #                   description="Generated Automatically by default_factory") #User can Read only
    
    iam_groups: Dict[str, List[str]] = Field(default_factory=lambda:DEFAULT_IAM_GROUPS, description="User's Groups, with a default one for all authenticated Pulse users") #User can Read only
    sbscrptn_plan: str=Field(default_factory=lambda:DEFAULT_SUBSCRIPTION_PLAN, description="Subscription Plan ") #User can Read only
    sbscrptn_status: str=Field(default_factory=lambda:DEFAULT_SUBSCRIPTION_STATUS, description="Subscription Status") #User can Read only
    sbscrptn_start_date: datetime=Field(default_factory=lambda:datetime.utcnow(), description="Subscription Start Date") #User can Read only
    sbscrptn_end_date: datetime=Field(default_factory=lambda:datetime.utcnow()+relativedelta(years=1) , description="Subscription End Date") #User can Read only
    sbscrptn_insight_credits: int= Field(default_factory=lambda:DEFAULT_SUBSCRIPTION_INSIGHT_CREDITS, description="Depends on Subscription Plan, Set Amount udated at Regular Intervals or at Regular Time") #User can Read only
    sbscrptn_ins_crdts_updtd_since_datetime: datetime=Field(default_factory=lambda:datetime.utcnow(), description="Subscription Start Date") #User can Read only #User can Read only #User can Read only
    extra_insight_credits: int= Field(default_factory=lambda:DEFAULT_EXTRA_INSIGHT_CREDITS, description="If user purchased extra Insigth Credits they shouldn't Expire") #User can Read only
    payment_refs_uids: Optional[Set[str]] = None #User can Read only
    
    creat_date: datetime #User can Read only
    creat_by_user: str #User can Read only / Ideally shouldn't be able to see even
    updt_date: datetime #User can Read only / Ideally shouldn't be able to see even
    updt_by_user: str #User can Read only / Ideally shouldn't be able to see even
    
    class Config:
        extra = "forbid"
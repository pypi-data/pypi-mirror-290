# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .ml_model_feature import MlModelFeature
from .ml_model_request_config_request import MlModelRequestConfigRequest
from .ml_model_response_config_request import MlModelResponseConfigRequest
from .ml_model_tokenizer_config_request import MlModelTokenizerConfigRequest


class MlModelExecConfigRequest(pydantic_v1.BaseModel):
    model_identifier: str
    base_url: str
    metadata: typing.Dict[str, typing.Any]
    features: typing.List[MlModelFeature]
    force_system_credentials: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    Can only be set when using an internal service token.
    """

    tokenizer_config: typing.Optional[MlModelTokenizerConfigRequest] = None
    request_config: typing.Optional[MlModelRequestConfigRequest] = None
    response_config: typing.Optional[MlModelResponseConfigRequest] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class SubmitCompletionActualRequest(pydantic_v1.BaseModel):
    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
    """

    external_id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
    """

    text: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Text representing what the completion _should_ have been.
    """

    quality: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
    """

    timestamp: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic_v1.Field(default=None)
    """
    Optionally provide additional metadata about the feedback submission.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .reducto_chunker_config_request import ReductoChunkerConfigRequest
from .sentence_chunker_config_request import SentenceChunkerConfigRequest
from .token_overlapping_window_chunker_config_request import TokenOverlappingWindowChunkerConfigRequest


class DocumentIndexChunkingRequest_ReductoChunker(pydantic_v1.BaseModel):
    chunker_config: typing.Optional[ReductoChunkerConfigRequest] = None
    chunker_name: typing.Literal["reducto-chunker"] = "reducto-chunker"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class DocumentIndexChunkingRequest_SentenceChunker(pydantic_v1.BaseModel):
    chunker_config: typing.Optional[SentenceChunkerConfigRequest] = None
    chunker_name: typing.Literal["sentence-chunker"] = "sentence-chunker"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class DocumentIndexChunkingRequest_TokenOverlappingWindowChunker(pydantic_v1.BaseModel):
    chunker_config: typing.Optional[TokenOverlappingWindowChunkerConfigRequest] = None
    chunker_name: typing.Literal["token-overlapping-window-chunker"] = "token-overlapping-window-chunker"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


DocumentIndexChunkingRequest = typing.Union[
    DocumentIndexChunkingRequest_ReductoChunker,
    DocumentIndexChunkingRequest_SentenceChunker,
    DocumentIndexChunkingRequest_TokenOverlappingWindowChunker,
]

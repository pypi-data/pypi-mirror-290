theory: null
likelihood:
  ring:
    type: []
    speed: -1
    stop_at_error: false
    version: null
    external: import_module('my_likelihood').gauss_ring_logp
    input_params:
    - x
    - y
    output_params: []
prior:
  Jacobian: 'lambda r: np.log(r)'
  x_eq_y_band: 'lambda r, theta: stats.norm.logpdf( r * (np.cos(theta) - np.sin(theta)),
    loc=0, scale=0.3)'
params:
  r:
    prior:
      min: 0
      max: 2
    ref: 1
    proposal: 0.01
    drop: true
  theta:
    prior:
      min: 0
      max: 1.571
    ref: 0
    proposal: 0.5
    latex: \theta
    drop: true
  x:
    value: 'lambda r,theta: r*np.cos(theta)'
    min: 0
    max: 2
    derived: true
  y:
    value: 'lambda r,theta: r*np.sin(theta)'
    min: 0
    max: 2
    derived: true
sampler:
  mcmc:
    burn_in: 0
    max_tries: 40d
    covmat: null
    covmat_params: null
    proposal_scale: 2.4
    output_every: 60s
    learn_every: 40d
    temperature: 1
    learn_proposal: true
    learn_proposal_Rminus1_max: 2.0
    learn_proposal_Rminus1_max_early: 30.0
    learn_proposal_Rminus1_min: 0.0
    max_samples: 100
    Rminus1_stop: 0.01
    Rminus1_cl_stop: 0.2
    Rminus1_cl_level: 0.95
    Rminus1_single_split: 4
    measure_speeds: true
    oversample_power: 0.4
    oversample_thin: true
    drag: false
    blocking:
    - - 1
      - - r
        - theta
    callback_function: null
    callback_every: null
    seed: null
    check_every: null
    oversample: null
    drag_limits: null
    fallback_covmat_scale: 4
    version: 3.5.4
output: my_model
version: 3.5.4

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts
from .....commons.types.claim_id import ClaimId
from .....commons.types.date_range_optional_end import DateRangeOptionalEnd
from .....commons.types.decimal import Decimal
from .....commons.types.facility_type_code import FacilityTypeCode
from .....commons.types.procedure_modifier import ProcedureModifier
from .....commons.types.service_line_id import ServiceLineId
from .....commons.types.service_line_units import ServiceLineUnits
from .....diagnoses.types.diagnosis_id import DiagnosisId
from .....encounter_providers.resources.v_2.types.encounter_provider import EncounterProvider
from .....invoices.resources.v_2.types.invoice_info import InvoiceInfo
from .service_line_adjustment import ServiceLineAdjustment
from .service_line_denial_reason import ServiceLineDenialReason


class ServiceLine(pydantic.BaseModel):
    """
    Examples
    --------
    import datetime
    import uuid

    from candid import (
        DateRangeOptionalEnd,
        FacilityTypeCode,
        ProcedureModifier,
        ServiceLineUnits,
    )
    from candid.resources.service_lines.v_2 import (
        DenialReasonContent,
        ServiceLine,
        ServiceLineDenialReason,
    )

    ServiceLine(
        modifiers=[ProcedureModifier.TWENTY_TWO],
        charge_amount_cents=10000,
        allowed_amount_cents=8000,
        paid_amount_cents=8000,
        patient_responsibility_cents=2000,
        diagnosis_id_zero=uuid.UUID(
            "4ac84bcd-12f5-4f86-a57b-e06749127c98",
        ),
        diagnosis_id_one=uuid.UUID(
            "eea5ca5a-8b43-45fd-8cbd-c6cc1103e759",
        ),
        diagnosis_id_two=uuid.UUID(
            "5c4aa029-2db9-4202-916e-e93c708f65ff",
        ),
        diagnosis_id_three=uuid.UUID(
            "81795126-a3ac-443c-b47e-7259a16ab4a2",
        ),
        denial_reason=ServiceLineDenialReason(
            reason=DenialReasonContent.AUTHORIZATION_REQUIRED,
        ),
        place_of_service_code=FacilityTypeCode.PHARMACY,
        service_line_id=uuid.UUID(
            "ced00f23-6e68-4678-9dbc-f5aa2969a565",
        ),
        procedure_code="99213",
        quantity="1",
        units=ServiceLineUnits.MJ,
        claim_id=uuid.UUID(
            "026a1fb8-748e-4859-a2d7-3ea9e07d25ae",
        ),
        date_of_service_range=DateRangeOptionalEnd(
            start_date="2023-01-01",
            end_date="2023-01-03",
        ),
        date_of_service=datetime.date.fromisoformat(
            "2023-01-01",
        ),
        end_date_of_service=datetime.date.fromisoformat(
            "2023-01-03",
        ),
    )
    """

    modifiers: typing.Optional[typing.List[ProcedureModifier]] = None
    charge_amount_cents: typing.Optional[int] = None
    allowed_amount_cents: typing.Optional[int] = None
    paid_amount_cents: typing.Optional[int] = None
    primary_paid_amount_cents: typing.Optional[int] = None
    secondary_paid_amount_cents: typing.Optional[int] = None
    tertiary_paid_amount_cents: typing.Optional[int] = None
    patient_responsibility_cents: typing.Optional[int] = None
    diagnosis_id_zero: typing.Optional[DiagnosisId] = None
    diagnosis_id_one: typing.Optional[DiagnosisId] = None
    diagnosis_id_two: typing.Optional[DiagnosisId] = None
    diagnosis_id_three: typing.Optional[DiagnosisId] = None
    service_line_manual_adjustments: typing.Optional[typing.List[ServiceLineAdjustment]] = None
    related_invoice_info: typing.Optional[typing.List[InvoiceInfo]] = None
    denial_reason: typing.Optional[ServiceLineDenialReason] = None
    place_of_service_code: typing.Optional[FacilityTypeCode] = None
    place_of_service_code_as_submitted: typing.Optional[FacilityTypeCode] = None
    service_line_id: ServiceLineId
    procedure_code: str
    referring_provider: typing.Optional[EncounterProvider] = None
    initial_referring_provider: typing.Optional[EncounterProvider] = None
    supervising_provider: typing.Optional[EncounterProvider] = None
    ordering_provider: typing.Optional[EncounterProvider] = None
    quantity: Decimal = pydantic.Field()
    """
    String representation of a Decimal that can be parsed by most libraries.
    A ServiceLine quantity cannot contain more than one digit of precision.
    Example: 1.1 is valid, 1.11 is not.
    """

    units: ServiceLineUnits
    claim_id: ClaimId
    date_of_service_range: DateRangeOptionalEnd = pydantic.Field()
    """
    A range of dates of service for this service line. If the service line is for a single date, the end date
    will be empty.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A free-form description to clarify the related data elements and their content. Maps to SV1-01, C003-07 on the 837-P.
    """

    date_of_service: dt.date
    end_date_of_service: typing.Optional[dt.date] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}

# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-03-22T18:44:46+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, EmailStr, Field, constr
from typing_extensions import Literal


class AssessmentPayload(BaseModel):
    iso_rating: Optional[int] = Field(None, title='Iso Rating')
    cpse_acredited: Optional[bool] = Field(None, title='Cpse Acredited')
    caas_acredited: Optional[bool] = Field(None, title='Caas Acredited')


class AssessmentResponse(BaseModel):
    iso_rating: Optional[int] = Field(None, title='Iso Rating')
    cpse_acredited: Optional[bool] = Field(None, title='Cpse Acredited')
    caas_acredited: Optional[bool] = Field(None, title='Caas Acredited')


class ContactPayload(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    title: Optional[str] = Field(None, title='Title')
    phone: Optional[str] = Field(None, title='Phone')
    email: Optional[str] = Field(None, title='Email')


class ContactResponse(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    title: Optional[str] = Field(None, title='Title')
    phone: Optional[str] = Field(None, title='Phone')
    email: Optional[str] = Field(None, title='Email')


class CreateUserPayload(BaseModel):
    username: str = Field(..., title='Username')
    email: EmailStr = Field(..., title='Email')
    phone_number: Optional[
        constr(
            pattern=r'^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$'
        )
    ] = Field(None, title='Phone Number')


class GeoJsonMultiPolygon(BaseModel):
    type: Literal['MultiPolygon'] = Field(..., title='Type')
    coordinates: List[List[List[List[float]]]] = Field(..., title='Coordinates')


class GeoJsonPoint(BaseModel):
    type: Literal['Point'] = Field(..., title='Type')
    coordinates: List[float] = Field(..., title='Coordinates')


class ShiftPayload(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    duration: Optional[int] = Field(None, title='Duration')
    signup: Optional[int] = Field(None, title='Signup')


class ShiftResponse(BaseModel):
    count: Optional[int] = Field(None, title='Count')
    duration: Optional[int] = Field(None, title='Duration')
    signup: Optional[int] = Field(None, title='Signup')


class StaffingPayload(BaseModel):
    active_firefighters_career_ft: Optional[int] = Field(
        None, title='Active Firefighters Career Ft'
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title='Active Firefighters Career Pt'
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title='Active Firefighters Volunteer'
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title='Active Ems Only Career Ft')
    active_ems_only_career_pt: Optional[int] = Field(None, title='Active Ems Only Career Pt')
    active_ems_only_volunteer: Optional[int] = Field(None, title='Active Ems Only Volunteer')
    active_civilians_career_ft: Optional[int] = Field(None, title='Active Civilians Career Ft')
    active_civilians_career_pt: Optional[int] = Field(None, title='Active Civilians Career Pt')
    active_civilians_volunteer: Optional[int] = Field(None, title='Active Civilians Volunteer')


class StaffingResponse(BaseModel):
    active_firefighters_career_ft: Optional[int] = Field(
        None, title='Active Firefighters Career Ft'
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title='Active Firefighters Career Pt'
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title='Active Firefighters Volunteer'
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title='Active Ems Only Career Ft')
    active_ems_only_career_pt: Optional[int] = Field(None, title='Active Ems Only Career Pt')
    active_ems_only_volunteer: Optional[int] = Field(None, title='Active Ems Only Volunteer')
    active_civilians_career_ft: Optional[int] = Field(None, title='Active Civilians Career Ft')
    active_civilians_career_pt: Optional[int] = Field(None, title='Active Civilians Career Pt')
    active_civilians_volunteer: Optional[int] = Field(None, title='Active Civilians Volunteer')


class StatesTerrs(Enum):
    AL = 'AL'
    AK = 'AK'
    AS = 'AS'
    AZ = 'AZ'
    AR = 'AR'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DE = 'DE'
    DC = 'DC'
    FL = 'FL'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    IA = 'IA'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    ME = 'ME'
    MD = 'MD'
    MA = 'MA'
    MI = 'MI'
    MN = 'MN'
    MS = 'MS'
    MO = 'MO'
    MP = 'MP'
    MT = 'MT'
    NA = 'NA'
    NE = 'NE'
    NV = 'NV'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NY = 'NY'
    NC = 'NC'
    ND = 'ND'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UT = 'UT'
    VT = 'VT'
    VA = 'VA'
    VI = 'VI'
    WA = 'WA'
    WV = 'WV'
    WI = 'WI'
    WY = 'WY'


class TypeDeptValue(Enum):
    CAREER = 'CAREER'
    VOLUNTEER = 'VOLUNTEER'
    COMBINED = 'COMBINED'


class TypeDispProtoFireValue(Enum):
    PROQA = 'PROQA'
    IAED = 'IAED'
    APCO = 'APCO'


class TypeDispProtoMedValue(Enum):
    PROQA = 'PROQA'
    IAED = 'IAED'
    APCO = 'APCO'


class TypeEmsServValue(Enum):
    NO_MEDICAL = 'NO_MEDICAL'
    BLS_NO_TRANSPORT = 'BLS_NO_TRANSPORT'
    ALS_NO_TRANSPORT = 'ALS_NO_TRANSPORT'
    BLS_TRANSPORT = 'BLS_TRANSPORT'
    ALS_TRANSPORT = 'ALS_TRANSPORT'
    AERO_TRANSPORT = 'AERO_TRANSPORT'
    COMMUNITY_MED = 'COMMUNITY_MED'


class TypeFdServValue(Enum):
    STRUCTURAL_FIREFIGHTING = 'STRUCTURAL_FIREFIGHTING'
    HIGHRISE_FIREFIGHTING = 'HIGHRISE_FIREFIGHTING'
    WILDLAND_FIREFIGHTING = 'WILDLAND_FIREFIGHTING'
    PETROCHEM_FIREFIGHTING = 'PETROCHEM_FIREFIGHTING'
    ARFF_FIREFIGHTING = 'ARFF_FIREFIGHTING'
    MARINE_FIREFIGHTING = 'MARINE_FIREFIGHTING'
    HAZMAT_OPS = 'HAZMAT_OPS'
    HAZMAT_TECHNICIAN = 'HAZMAT_TECHNICIAN'
    ROPE_RESCUE = 'ROPE_RESCUE'
    COLLAPSE_RESCUE = 'COLLAPSE_RESCUE'
    VEHICLE_RESCUE = 'VEHICLE_RESCUE'
    ANIMAL_TECHRESCUE = 'ANIMAL_TECHRESCUE'
    WILDERNESS_SAR = 'WILDERNESS_SAR'
    TRENCH_RESCUE = 'TRENCH_RESCUE'
    CONFINED_SPACE = 'CONFINED_SPACE'
    MACHINERY_RESCUE = 'MACHINERY_RESCUE'
    CAVE_SAR = 'CAVE_SAR'
    MINE_SAR = 'MINE_SAR'
    HELO_SAR = 'HELO_SAR'
    WATER_SAR = 'WATER_SAR'
    SWIFTWATER_SAR = 'SWIFTWATER_SAR'
    DIVE_SAR = 'DIVE_SAR'
    ICE_RESCUE = 'ICE_RESCUE'
    SURF_RESCUE = 'SURF_RESCUE'
    WATERCRAFT_RESCUE = 'WATERCRAFT_RESCUE'
    FLOOD_SAR = 'FLOOD_SAR'
    TOWER_SAR = 'TOWER_SAR'
    REHABILITATION = 'REHABILITATION'
    RRD_EXISTING = 'RRD_EXISTING'
    RRD_NEWCONST = 'RRD_NEWCONST'
    RRD_PUBLICED = 'RRD_PUBLICED'
    RRD_PLANS = 'RRD_PLANS'
    CAUSE_ORIGIN = 'CAUSE_ORIGIN'
    TRAINING_ELF = 'TRAINING_ELF'
    TRAINING_VETFF = 'TRAINING_VETFF'
    TRAINING_OD = 'TRAINING_OD'
    TRAINING_DRIVER = 'TRAINING_DRIVER'


class TypeGeoSourceValue(Enum):
    DEPT_UPLOAD = 'DEPT_UPLOAD'
    DEPT_FILE = 'DEPT_FILE'
    AWS = 'AWS'


class TypeInvestServValue(Enum):
    COMPANY_LEVEL = 'COMPANY_LEVEL'
    JUVENILE_FIRESETTER = 'JUVENILE_FIRESETTER'
    DEDICATED = 'DEDICATED'
    LAW_ENFORCEMENT = 'LAW_ENFORCEMENT'
    K9_DETECT = 'K9_DETECT'


class TypeOrgValue(Enum):
    LOCAL = 'LOCAL'
    TRIBAL_GOVT = 'TRIBAL_GOVT'
    PRIVATE = 'PRIVATE'
    DOD = 'DOD'
    SFM = 'SFM'
    FEDERAL = 'FEDERAL'


class TypePopSourceValue(Enum):
    DEPARTMENT_ENTERED = 'DEPARTMENT_ENTERED'
    CENSUS_DERIVED = 'CENSUS_DERIVED'


class TypePsapCapaValue(Enum):
    LEGACY = 'LEGACY'
    NG911 = 'NG911'


class TypePsapDiscValue(Enum):
    SINGLE = 'SINGLE'
    MULTIPLE = 'MULTIPLE'


class TypePsapJurisValue(Enum):
    SINGLE = 'SINGLE'
    MULTIPLE = 'MULTIPLE'


class TypePsapValue(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'


class TypeRegionValue(Enum):
    BATTALION = 'BATTALION'
    COUNCIL_DISTRICT = 'COUNCIL_DISTRICT'
    DISTRICT = 'DISTRICT'
    DIVISION = 'DIVISION'
    FIRST_DUE = 'FIRST_DUE'
    OTHER = 'OTHER'


class TypeUnitValue(Enum):
    CREW_TRANS = 'CREW_TRANS'
    ENGINE_STRUCT = 'ENGINE_STRUCT'
    ENGINE_WUI = 'ENGINE_WUI'
    BOAT = 'BOAT'
    BOAT_LARGE = 'BOAT_LARGE'
    LADDER_SMALL = 'LADDER_SMALL'
    LADDER_QUINT = 'LADDER_QUINT'
    LADDER_TALL = 'LADDER_TALL'
    QUINT_TALL = 'QUINT_TALL'
    PLATFORM = 'PLATFORM'
    PLATFORM_QUINT = 'PLATFORM_QUINT'
    LADDER_TILLER = 'LADDER_TILLER'
    ARFF = 'ARFF'
    FOAM = 'FOAM'
    TENDER = 'TENDER'
    CREW = 'CREW'
    HELO_GENERAL = 'HELO_GENERAL'
    HELO_FIRE = 'HELO_FIRE'
    HELO_RESCUE = 'HELO_RESCUE'
    UAS_FIRE = 'UAS_FIRE'
    UAS_RECON = 'UAS_RECON'
    AIR_TANKER = 'AIR_TANKER'
    AIR_EMS = 'AIR_EMS'
    AIR_RECON = 'AIR_RECON'
    ALS_AMB = 'ALS_AMB'
    BLS_AMB = 'BLS_AMB'
    EMS_NOTRANS = 'EMS_NOTRANS'
    EMS_SUPV = 'EMS_SUPV'
    CHIEF = 'CHIEF'
    HAZMAT = 'HAZMAT'
    DECON = 'DECON'
    POV = 'POV'
    RESCUE_HEAVY = 'RESCUE_HEAVY'
    RESCUE_MEDIUM = 'RESCUE_MEDIUM'
    RESCUE_LIGHT = 'RESCUE_LIGHT'
    RESCUE_USAR = 'RESCUE_USAR'
    RESCUE_WATER = 'RESCUE_WATER'
    SCBA = 'SCBA'
    AIR_LIGHT = 'AIR_LIGHT'
    REHAB = 'REHAB'
    MOBILE_ICP = 'MOBILE_ICP'
    MOBILE_COMMS = 'MOBILE_COMMS'
    DOZER = 'DOZER'
    OTHER_GROUND = 'OTHER_GROUND'
    ATV_EMS = 'ATV_EMS'
    ATV_FIRE = 'ATV_FIRE'
    INVEST = 'INVEST'
    UTIL = 'UTIL'


class UnitCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    valid_start: AwareDatetime = Field(..., title='Valid Start')


class UnitPayload(BaseModel):
    type: TypeUnitValue
    staffing: int = Field(..., title='Staffing')
    cad_designation_1: Optional[str] = Field(None, title='Cad Designation 1')
    cad_designation_2: Optional[str] = Field(None, title='Cad Designation 2')
    neris_id: str = Field(..., title='Neris Id')


class UnitResponse(BaseModel):
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    type: TypeUnitValue
    staffing: int = Field(..., title='Staffing')
    cad_designation_1: Optional[str] = Field(None, title='Cad Designation 1')
    cad_designation_2: Optional[str] = Field(None, title='Cad Designation 2')


class UpdateUserPayload(BaseModel):
    email: EmailStr = Field(..., title='Email')
    phone_number: Optional[
        constr(
            pattern=r'^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$'
        )
    ] = Field(None, title='Phone Number')


class UserActivationPayload(BaseModel):
    active: bool = Field(..., title='Active')


class UserStatus(Enum):
    UNCONFIRMED = 'UNCONFIRMED'
    CONFIRMED = 'CONFIRMED'
    UNKNOWN = 'UNKNOWN'
    RESET_REQUIRED = 'RESET_REQUIRED'
    FORCE_CHANGE_PASSWORD = 'FORCE_CHANGE_PASSWORD'


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class CreateUnitPayload(BaseModel):
    type: TypeUnitValue
    staffing: int = Field(..., title='Staffing')
    cad_designation_1: Optional[str] = Field(None, title='Cad Designation 1')
    cad_designation_2: Optional[str] = Field(None, title='Cad Designation 2')


class DispatchPayload(BaseModel):
    avl_usage: Optional[bool] = Field(None, title='Avl Usage')
    center_id: Optional[int] = Field(None, title='Center Id')
    cad_software: Optional[str] = Field(None, title='Cad Software')
    psap_type: Optional[TypePsapValue] = None
    psap_capability: Optional[TypePsapCapaValue] = None
    psap_discipline: Optional[TypePsapDiscValue] = None
    psap_jurisdiction: Optional[TypePsapJurisValue] = None
    protocol_fire: Optional[TypeDispProtoFireValue] = None
    protocol_med: Optional[TypeDispProtoMedValue] = None


class DispatchResponse(BaseModel):
    avl_usage: Optional[bool] = Field(None, title='Avl Usage')
    center_id: Optional[int] = Field(None, title='Center Id')
    cad_software: Optional[str] = Field(None, title='Cad Software')
    psap_type: Optional[TypePsapValue] = None
    psap_capability: Optional[TypePsapCapaValue] = None
    protocol_fire: Optional[TypeDispProtoFireValue] = None
    protocol_med: Optional[TypeDispProtoMedValue] = None


class GeoPoint(BaseModel):
    crs: Optional[Union[int, str]] = Field(4326, title='Crs')
    source: TypeGeoSourceValue
    geometry: GeoJsonPoint


class GeoPointResponse(BaseModel):
    crs: Optional[int] = Field(4326, title='Crs')
    source: TypeGeoSourceValue
    geometry: GeoJsonPoint


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class OrgSummaryInfoResponse(BaseModel):
    name: str = Field(..., title='Name')
    neris_id: str = Field(..., title='Neris Id')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')


class OrgsSummaryInfoResponse(BaseModel):
    count: int = Field(..., title='Count')
    orgs: List[OrgSummaryInfoResponse] = Field(..., title='Orgs')


class PopulationPayload(BaseModel):
    source: Optional[TypePopSourceValue] = None
    protected: Optional[int] = Field(None, title='Protected')


class PopulationResponse(BaseModel):
    source: Optional[TypePopSourceValue] = None
    protected: Optional[int] = Field(None, title='Protected')


class RegionPayload(BaseModel):
    crs: Optional[Union[int, str]] = Field(4326, title='Crs')
    source: TypeGeoSourceValue
    geometry: GeoJsonMultiPolygon
    name: Optional[str] = Field(None, title='Name')
    internal_id: Optional[str] = Field(None, title='Internal Id')


class RegionResponse(BaseModel):
    crs: Optional[int] = Field(4326, title='Crs')
    source: TypeGeoSourceValue
    geometry: GeoJsonMultiPolygon
    name: Optional[str] = Field(None, title='Name')
    internal_id: Optional[str] = Field(None, title='Internal Id')


class RegionSetPayload(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    type: TypeRegionValue
    primary: bool = Field(..., title='Primary')
    coverage: bool = Field(..., title='Coverage')
    juris: bool = Field(..., title='Juris')
    regions: Optional[List[RegionPayload]] = Field(None, title='Regions')


class RegionSetResponse(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    type: TypeRegionValue
    primary: bool = Field(..., title='Primary')
    coverage: bool = Field(..., title='Coverage')
    juris: bool = Field(..., title='Juris')
    regions: Optional[List[RegionResponse]] = Field(None, title='Regions')


class StationCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    valid_start: AwareDatetime = Field(..., title='Valid Start')
    units: Optional[List[UnitCreatedModifiedResponse]] = Field(None, title='Units')


class StationPayload(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    station_id: str = Field(..., title='Station Id')
    internal_id: Optional[str] = Field(None, title='Internal Id')
    staffing: Optional[int] = Field(None, title='Staffing')
    units: Optional[List[Union[UnitPayload, CreateUnitPayload]]] = Field(None, title='Units')
    location: Optional[GeoPoint] = None
    neris_id: str = Field(..., title='Neris Id')


class StationResponse(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    station_id: str = Field(..., title='Station Id')
    staffing: Optional[int] = Field(None, title='Staffing')
    location: Optional[GeoPointResponse] = None
    units: Optional[List[UnitResponse]] = Field(None, title='Units')


class UserResponse(BaseModel):
    username: str = Field(..., title='Username')
    sub: UUID = Field(..., title='Sub')
    email: Optional[EmailStr] = Field(None, title='Email')
    phone_number: Optional[
        constr(
            pattern=r'^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$'
        )
    ] = Field(None, title='Phone Number')
    status: UserStatus
    active: bool = Field(..., title='Active')


class CreateStationPayload(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    station_id: str = Field(..., title='Station Id')
    internal_id: Optional[str] = Field(None, title='Internal Id')
    staffing: Optional[int] = Field(None, title='Staffing')
    units: Optional[List[CreateUnitPayload]] = Field(None, title='Units')
    location: Optional[GeoPoint] = None


class DepartmentCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    valid_start: AwareDatetime = Field(..., title='Valid Start')
    stations: Optional[List[StationCreatedModifiedResponse]] = Field(None, title='Stations')


class DepartmentPayload(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    internal_id: Optional[str] = Field(None, title='Internal Id')
    name: str = Field(..., title='Name')
    mail_address_line_1: Optional[str] = Field(None, title='Mail Address Line 1')
    mail_address_line_2: Optional[str] = Field(None, title='Mail Address Line 2')
    mail_city: Optional[str] = Field(None, title='Mail City')
    mail_state: Optional[StatesTerrs] = None
    mail_zip_code: Optional[str] = Field(None, title='Mail Zip Code')
    email: Optional[str] = Field(None, title='Email')
    website: Optional[str] = Field(None, title='Website')
    continue_edu: Optional[bool] = Field(None, title='Continue Edu')
    department_type: Optional[TypeDeptValue] = None
    organization_type: Optional[TypeOrgValue] = None
    rms_software: Optional[str] = Field(None, title='Rms Software')
    population: Optional[PopulationPayload] = None
    dispatch: Optional[DispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    contact: Optional[ContactPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeFdServValue]] = Field(None, title='Fire Services')
    ems_services: Optional[List[TypeEmsServValue]] = Field(None, title='Ems Services')
    investigation_services: Optional[List[TypeInvestServValue]] = Field(
        None, title='Investigation Services'
    )
    stations: Optional[List[Union[StationPayload, CreateStationPayload]]] = Field(
        None, title='Stations'
    )
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title='Region Sets')
    neris_id: str = Field(..., title='Neris Id')


class DepartmentResponse(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    last_modified: AwareDatetime = Field(..., title='Last Modified')
    neris_id: str = Field(..., title='Neris Id')
    version: int = Field(..., title='Version')
    internal_id: Optional[str] = Field(None, title='Internal Id')
    name: str = Field(..., title='Name')
    mail_address_line_1: Optional[str] = Field(None, title='Mail Address Line 1')
    mail_address_line_2: Optional[str] = Field(None, title='Mail Address Line 2')
    mail_city: Optional[str] = Field(None, title='Mail City')
    mail_state: Optional[StatesTerrs] = None
    mail_zip_code: Optional[str] = Field(None, title='Mail Zip Code')
    email: Optional[str] = Field(None, title='Email')
    website: Optional[str] = Field(None, title='Website')
    continue_edu: Optional[bool] = Field(None, title='Continue Edu')
    department_type: Optional[TypeDeptValue] = None
    organization_type: Optional[TypeOrgValue] = None
    rms_software: Optional[str] = Field(None, title='Rms Software')
    population: Optional[PopulationResponse] = None
    dispatch: Optional[DispatchResponse] = None
    staffing: Optional[StaffingResponse] = None
    assessment: Optional[AssessmentResponse] = None
    contact: Optional[ContactResponse] = None
    shift: Optional[ShiftResponse] = None
    fire_services: Optional[List[TypeFdServValue]] = Field(None, title='Fire Services')
    ems_services: Optional[List[TypeEmsServValue]] = Field(None, title='Ems Services')
    investigation_services: Optional[List[TypeInvestServValue]] = Field(
        None, title='Investigation Services'
    )
    stations: Optional[List[StationResponse]] = Field(None, title='Stations')
    location: Optional[GeoPointResponse] = None
    region_sets: Optional[List[RegionSetResponse]] = Field(None, title='Region Sets')


class CreateDepartmentPayload(BaseModel):
    address_line_1: str = Field(..., title='Address Line 1')
    address_line_2: Optional[str] = Field(None, title='Address Line 2')
    city: str = Field(..., title='City')
    state: StatesTerrs
    zip_code: str = Field(..., title='Zip Code')
    internal_id: Optional[str] = Field(None, title='Internal Id')
    name: str = Field(..., title='Name')
    mail_address_line_1: Optional[str] = Field(None, title='Mail Address Line 1')
    mail_address_line_2: Optional[str] = Field(None, title='Mail Address Line 2')
    mail_city: Optional[str] = Field(None, title='Mail City')
    mail_state: Optional[StatesTerrs] = None
    mail_zip_code: Optional[str] = Field(None, title='Mail Zip Code')
    email: Optional[str] = Field(None, title='Email')
    website: Optional[str] = Field(None, title='Website')
    continue_edu: Optional[bool] = Field(None, title='Continue Edu')
    department_type: Optional[TypeDeptValue] = None
    organization_type: Optional[TypeOrgValue] = None
    rms_software: Optional[str] = Field(None, title='Rms Software')
    population: Optional[PopulationPayload] = None
    dispatch: Optional[DispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    contact: Optional[ContactPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeFdServValue]] = Field(None, title='Fire Services')
    ems_services: Optional[List[TypeEmsServValue]] = Field(None, title='Ems Services')
    investigation_services: Optional[List[TypeInvestServValue]] = Field(
        None, title='Investigation Services'
    )
    stations: Optional[List[CreateStationPayload]] = Field(None, title='Stations')
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title='Region Sets')

[tox]
envlist =
    tests
    linting
    coverage
    type_check
    generate_bo4e
skip_missing_interpreters = True
skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:tests]
# the tests environment is called by the Github action that runs the unit tests
deps =
    -r requirements.txt
    -r dev_requirements/requirements-tests.txt
setenv = PYTHONPATH = {toxinidir}/src
commands = python -m pytest --basetemp={envtmpdir} {posargs}

[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    {[testenv:tests]deps}
    {[testenv:generate_bo4e]deps}
    -r dev_requirements/requirements-linting.txt
    # add your fixtures like e.g. pytest_datafiles here
setenv = PYTHONPATH = {toxinidir}/src
commands =
    pylint ibims
    pylint unittests --rcfile=unittests/.pylintrc
    pylint bo4e/bo4e_updater.py
    # add single files (ending with .py) or packages here

[testenv:type_check]
# the type_check environment checks the type hints using mypy
setenv = PYTHONPATH = {toxinidir}/src
deps =
    {[testenv:tests]deps}
    {[testenv:generate_bo4e]deps}
    -r dev_requirements/requirements-type_check.txt
commands =
    mypy --show-error-codes src/ibims
    mypy --show-error-codes unittests
    mypy --show-error-codes bo4e/bo4e_updater.py
    # add single files (ending with .py) or packages here

[testenv:spellcheck]
# the spellcheck environment checks the code for typos
setenv = PYTHONPATH = {toxinidir}/src
deps =
    {[testenv:tests]deps}
    -r dev_requirements/requirements-spellcheck.txt
commands =
    codespell --ignore-words=domain-language.txt --skip "src/ibims/bo4e/**" src/ibims
    # add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
changedir = unittests
deps =
    {[testenv:tests]deps}
    -r dev_requirements/requirements-coverage.txt
setenv = PYTHONPATH = {toxinidir}/src
commands =
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 80 --omit .tox/*,unittests/*


[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:tests]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:coverage]deps}
    {[testenv:spellcheck]deps}
    {[testenv:docs]deps}
    {[testenv:generate_bo4e]deps}
    -r dev_requirements/requirements-formatting.txt
    pip-tools
    pre-commit
commands =
    python -m pip install --upgrade pip
    pip-compile requirements.in
    pip install -r requirements.txt
    pre-commit install

[testenv:test_packaging]
skip_install = true
deps =
    -r dev_requirements/requirements-packaging.txt
commands =
    python -m build
    twine check dist/*

[testenv:docs]
deps =
    -r requirements.txt
    -r dev_requirements/requirements-docs.txt
commands =
    sphinx-build -b html -d {envtmpdir}/doctrees docs {envtmpdir}/html
    sphinx-build -n -T -b doctest -d {envtmpdir}/doctrees docs docs/_build/html
    python -m doctest README.md

[testenv:generate_bo4e]
deps =
    -r dev_requirements/requirements-generate-bo4e.txt
setenv =
    file|bo4e/tox.env
commands =
    bost -o "tmp/bo4e_schemas" -t "{env:BO4E_VERSION}" -c "bo4e/bo4e_config.json" --clear-output \
    --cache-dir "tmp/bo4e_cache"
    bo4e-generator -i "tmp/bo4e_schemas" -o "src/ibims/bo4e" --clear-output -t "{env:BO4E_VERSION}"

from пітон.ядро import *

class ТипиАвтопілотів():
    PX4 = 'PX4'
    ARDUPILOT = 'ARDUPILOT'

    @staticmethod
    def отримати(код_типу_з_мавлінку: число):
        поточний_автопілот = Жоден
        # "MAV_AUTOPILOT_PX4"
        if код_типу_з_мавлінку == 12:
            поточний_автопілот = ТипиАвтопілотів.PX4
        else:
            поточний_автопілот = ТипиАвтопілотів.ARDUPILOT

        return поточний_автопілот


class ПерелікМов(enum.Enum):
    EN = "EN"
    UK = "UK"
    АНГ = EN
    УКР = UK

    @staticmethod
    def за_замовчанням():
        return ПерелікМов.УКР

    @staticmethod
    def отримати(ключ: (строка, "ПерелікМов", Жоден) = Жоден):
        if ключ is Жоден:
            обрана_мова = ПерелікМов.за_замовчанням()
        elif є_екземпляром(ключ, ПерелікМов):
            обрана_мова = ключ
        else:
            підготовлений_ключ = ключ.upper()

            обрана_мова = отримати_атрибут(ПерелікМов, ключ, Жоден)
            if обрана_мова is Жоден:
                обрана_мова = ПерелікМов.за_замовчанням()

        return обрана_мова


class ГеоКоординати:
    __slots__ = ("широта", "довгота", "висота", "мова")

    def __init__(свій, широта, довгота, висота, мова = ПерелікМов.УКР):
        свій.широта = широта
        свій.довгота = довгота
        свій.висота = висота
        свій.мова = мова

    def __str__(свій):
        представление = ""
        if свій.мова == ПерелікМов.УКР:
            представление = f"широта: {свій.широта} довгота: {свій.довгота} висота: {свій.висота}"
        else:
            представление = f"lat: {свій.широта} lon: {свій.довгота} alt: {свій.висота}"
        return представление

    @property
    def lat(свій):
        return свій.широта

    @property
    def lon(свій):
        return свій.довгота

    @property
    def alt(свій):
        return свій.висота
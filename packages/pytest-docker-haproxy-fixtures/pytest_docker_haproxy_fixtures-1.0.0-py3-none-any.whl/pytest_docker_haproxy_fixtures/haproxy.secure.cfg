global
  log stdout format raw daemon debug

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global

resolvers dns
    nameserver default 8.8.8.8:53
    resolve_retries 3
    timeout resolve 5s
    timeout retry 1s
    hold other 30s
    hold refused 30s
    hold nx 30s
    hold timeout 30s
    hold valid 10s
    hold obsolete 30s
    accepted_payload_size 8192

userlist myuserlist
  user $USERNAME insecure-password $PASSWORD

frontend myfrontend
  bind *:8080 ssl crt /pytest-haproxy.crt

  # Temporarily copy the Proxy-Authorization header into Authorization so that http_auth() works as expected.
  # ... would be nice if there was a http_proxy_auth() method ... =/
  http-request set-var(req.authorization) req.fhdr(Authorization)
  http-request set-var(req.proxy_authorization) req.fhdr(Proxy-Authorization)
  http-request set-header Authorization %[var(req.proxy_authorization)]
  http-request auth unless { http_auth(myuserlist) }
  http-request set-header Authorization %[var(req.authorization)]
  http-request del-header Proxy-Authorization

  http-request do-resolve(txn.dstIp,dns,ipv4) hdr(Host),lower unless { url_ip -m found }
  http-request set-var(txn.dstIp) url_ip if { url_ip -m found }
  http-request set-var(txn.dstPort) url_port
  default_backend mybackend

backend mybackend
  http-request set-dst var(txn.dstIp)
  http-request set-dst-port int(443)
  http-request set-dst-port var(txn.dstPort) if { var(txn.dstPort) -m found }
  server anywhere 0.0.0.0:0 ssl verify none

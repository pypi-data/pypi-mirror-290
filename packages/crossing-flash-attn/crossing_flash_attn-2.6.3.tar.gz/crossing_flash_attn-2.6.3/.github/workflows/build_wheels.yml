name: Build wheels

on:
  workflow_dispatch:

  workflow_call:
    secrets:
      CROSSING_CI_SSH_KEY:
        required: true
      OSS_ACCESS_KEY_ID:
        required: true
      OSS_ACCESS_KEY_SECRET:
        required: true
      CROSSING_EXTENSION_OSS_DIR:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          ssh-key: ${{ secrets.CROSSING_CI_SSH_KEY }}
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install ninja packaging setuptools wheel twine
          # We don't want to download anything CUDA-related here
          pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: Build sdist
        env:
          FLASH_ATTENTION_SKIP_CUDA_BUILD: "TRUE"
        run: |
          mkdir -p /tmp/${{ github.sha }} && python setup.py sdist --dist-dir /tmp/${{ github.sha }}

      - name: Upload package
        uses: ./.github/actions/oss_copy
        with:
          src_path: /tmp/${{ github.sha }}/
          dst_path: oss://${{ secrets.CROSSING_EXTENSION_OSS_DIR }}/crossing-flash-attention/${{ github.sha }}
          recursive: true
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}


  build_wheel:
    needs: build_sdist
    name: Build wheel
    runs-on: [self-hosted, linux, X64, cuda]

    strategy:
      fail-fast: false
      matrix:
          # Using ubuntu-20.04 instead of 22.04 for more compatibility (glibc). Ideally we'd use the
          # manylinux docker image, but I haven't figured out how to install CUDA on manylinux.
          python-version: ['3.8.19', '3.9.19', '3.10.14', '3.11.7']
          torch-version: ['2.1.2', '2.4.0']
          cudatoolkit-version: ['12-4']
          # We need separate wheels that either uses C++11 ABI (-D_GLIBCXX_USE_CXX11_ABI) or not.
          # Pytorch wheels currently don't use it, but nvcr images have Pytorch compiled with C++11 ABI.
          # Without this we get import error (undefined symbol: _ZN3c105ErrorC2ENS_14SourceLocationESs)
          # when building without C++11 ABI and using it on nvcr images.
          cxx11_abi: ['FALSE']

    steps:
      - name: Set CUDA and PyTorch versions
        run: |
          echo "MATRIX_IMAGE_NAME=$(echo flash-attn-builder:cudatoolkit-${{ matrix.cudatoolkit-version }}-torch-${{ matrix.torch-version }}-python-${{ matrix.python-version }})" >> $GITHUB_ENV
          echo "MATRIX_CONTAINER_NAME=$(echo flash-attn-builder-cudatoolkit-${{ matrix.cudatoolkit-version }}-torch-${{ matrix.torch-version }}-python-${{ matrix.python-version }})" >> $GITHUB_ENV
          echo "MATRIX_CUDATOOLKIT_VERSION=$(echo ${{ matrix.cudatoolkit-version }})" >> $GITHUB_ENV
          echo "MATRIX_TORCH_VERSION=$(echo ${{ matrix.torch-version }})" >> $GITHUB_ENV
          echo "MATRIX_PYTHON_VERSION=$(echo ${{ matrix.python-version }})" >> $GITHUB_ENV

      - name: Download from oss
        uses: ./.github/actions/oss_copy
        with:
          src_path: oss://${{ secrets.CROSSING_EXTENSION_OSS_DIR }}/crossing-flash-attention/${{ github.sha }}
          dst_path: /tmp
          recursive: true
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          oss_config_path: ./.ossutilconfig

      - name: Extract files
        run: |
          tar -xzvf /tmp/${{ github.sha }}/*.tar.gz --strip-components=1

      - name: Build docker
        run: |
          docker build . -f Dockerfile.builder \-t ${MATRIX_IMAGE_NAME} \
            --build-arg PYTHON_VERSION=${MATRIX_PYTHON_VERSION} \
            --build-arg TORCH_VERSION=${MATRIX_TORCH_VERSION} \
            --build-arg CUDA_TOOLKIT_VERSION=${MATRIX_CUDATOOLKIT_VERSION}
      
      - name: Run docker container
        run: |
          docker stop $MATRIX_CONTAINER_NAME || true
          docker rm $MATRIX_CONTAINER_NAME || true
          docker run --rm -d --name $MATRIX_CONTAINER_NAME -w /workspace ${MATRIX_IMAGE_NAME} sleep infinity

      - name: Build wheel
        run: |
          docker cp . $MATRIX_CONTAINER_NAME:/workspace
          docker exec -e FLASH_ATTENTION_FORCE_BUILD=TRUE $MATRIX_CONTAINER_NAME python setup.py bdist_wheel --dist-dir=dist
    
      - name: Rename wheel
        run: |
          CUDA_VERSION=$(docker exec $MATRIX_CONTAINER_NAME python -W ignore::UserWarning -c "import torch; print(torch.version.cuda.replace('.', ''))") && \
          TMPNAME=cu${CUDA_VERSION}torch$(echo $MATRIX_TORCH_VERSION | sed 's/\.[0-9]*$//')cxx11abi${{ matrix.cxx11_abi }} && \
          WHEEL_NAME=$(docker exec -e TMPNAME=$TMPNAME $MATRIX_CONTAINER_NAME bash -c 'ls dist/*whl | xargs -n 1 basename | sed "s/-/_$TMPNAME-/2"') && \
          docker exec -e WHEEL_NAME=$WHEEL_NAME $MATRIX_CONTAINER_NAME bash -c 'ls dist/*whl |xargs -I {} mv {} dist/$WHEEL_NAME'
          mkdir dist && docker cp $MATRIX_CONTAINER_NAME:/workspace/dist/${WHEEL_NAME} dist/${WHEEL_NAME}
          echo "WHEEL_NAME=${WHEEL_NAME}" >> $GITHUB_ENV

      - name: Stop docker container
        if: ${{ always() }}
        run: |
          docker stop $MATRIX_CONTAINER_NAME || true
          docker rm -f $MATRIX_CONTAINER_NAME || true

      - name: Log Built Wheels
        run: |
          echo "Built wheels:"
          echo WHEEL_NAME=$WHEEL_NAME

      - name: Upload package
        uses: ./.github/actions/oss_copy
        with:
          src_path: dist/$WHEEL_NAME
          dst_path: oss://${{ secrets.CROSSING_EXTENSION_OSS_DIR }}/crossing-flash-attention/${{ github.sha }}/$WHEEL_NAME
          recursive: true
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

  update_latest:
    needs: build_wheel
    name: Update latest
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Update latest package
        uses: ./.github/actions/oss_copy
        with:
          src_path: oss://${{ secrets.CROSSING_EXTENSION_OSS_DIR }}/crossing-flash-attention/${{ github.sha }}/
          dst_path: oss://${{ secrets.CROSSING_EXTENSION_OSS_DIR }}/crossing-flash-attention/latest
          recursive: true
          oss_access_key_id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          oss_access_key_secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright 2022 Raritan Inc. All rights reserved.
#
# This is an auto-generated file.

#
# Section generated by IdlC from "TacPlusServerSettings.idl"
#

import raritan.rpc
from raritan.rpc import Interface, Structure, ValueObject, Enumeration, typecheck, DecodeException
import raritan.rpc.tacplus


# enumeration
class AuthenType(Enumeration):
    idlType = "tacplus.AuthenType:1.0.0"
    values = ["ASCII", "PAP", "CHAP", "MSCHAP"]

AuthenType.ASCII = AuthenType(0)
AuthenType.PAP = AuthenType(1)
AuthenType.CHAP = AuthenType(2)
AuthenType.MSCHAP = AuthenType(3)

# structure
class ServerSettings(Structure):
    idlType = "tacplus.ServerSettings:1.0.0"
    elements = ["server", "port", "timeoutSeconds", "retries", "sharedSecret", "authenType", "disableAccounting"]

    def __init__(self, server, port, timeoutSeconds, retries, sharedSecret, authenType, disableAccounting):
        typecheck.is_string(server, AssertionError)
        typecheck.is_int(port, AssertionError)
        typecheck.is_int(timeoutSeconds, AssertionError)
        typecheck.is_int(retries, AssertionError)
        typecheck.is_string(sharedSecret, AssertionError)
        typecheck.is_enum(authenType, raritan.rpc.tacplus.AuthenType, AssertionError)
        typecheck.is_bool(disableAccounting, AssertionError)

        self.server = server
        self.port = port
        self.timeoutSeconds = timeoutSeconds
        self.retries = retries
        self.sharedSecret = sharedSecret
        self.authenType = authenType
        self.disableAccounting = disableAccounting

    @classmethod
    def decode(cls, json, agent):
        obj = cls(
            server = json['server'],
            port = json['port'],
            timeoutSeconds = json['timeoutSeconds'],
            retries = json['retries'],
            sharedSecret = json['sharedSecret'],
            authenType = raritan.rpc.tacplus.AuthenType.decode(json['authenType']),
            disableAccounting = json['disableAccounting'],
        )
        return obj

    def encode(self):
        json = {}
        json['server'] = self.server
        json['port'] = self.port
        json['timeoutSeconds'] = self.timeoutSeconds
        json['retries'] = self.retries
        json['sharedSecret'] = self.sharedSecret
        json['authenType'] = raritan.rpc.tacplus.AuthenType.encode(self.authenType)
        json['disableAccounting'] = self.disableAccounting
        return json
